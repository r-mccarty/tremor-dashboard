This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
memory-bank/
  activeContext.md
  productContext.md
  progress.md
  projectbrief.md
  systemPatterns.md
  techContext.md
public/
  DatabaseLogo.tsx
src/
  app/
    (main)/
      air-quality/
        page.tsx
      details/
        page.tsx
      overview/
        page.tsx
      layout.tsx
    settings/
      billing/
        page.tsx
      general/
        page.tsx
      users/
        page.tsx
      layout.tsx
    globals.css
    layout.tsx
    not-found.tsx
    siteConfig.ts
  components/
    ui/
      air-quality/
        AirQualityChartCard.tsx
        AirQualityGaugeCard.tsx
        AirQualityHeatmapCard.tsx
      data-table/
        columns.tsx
        DataTable.tsx
        DataTableBulkEditor.tsx
        DataTableColumnHeader.tsx
        DataTableFilter.tsx
        DataTableFilterbar.tsx
        DataTablePagination.tsx
        DataTableRowActions.tsx
        DataTableViewOptions.tsx
        TanstackTable.d.ts
      icons/
        ArrowAnimated.tsx
      navigation/
        DropdownUserProfile.tsx
        MobileSidebar.tsx
        ModalAddWorkspace.tsx
        Sidebar.tsx
        SidebarWorkspacesDropdown.tsx
        UserProfile.tsx
      overview/
        DashboardCategoryBarCard.tsx
        DashboardChartCard.tsx
        DashboardFilterbar.tsx
        DashboardProgressBarCard.tsx
        FeatureBento.tsx
        HeroBento.tsx
        HeroGlobe.tsx
      settings/
        ModalAddUser.tsx
    Badge.tsx
    Button.tsx
    Calendar.tsx
    Card.tsx
    Checkbox.tsx
    CommandBar.tsx
    DatePicker.tsx
    Dialog.tsx
    Divider.tsx
    Drawer.tsx
    Dropdown.tsx
    Input.tsx
    Label.tsx
    LineChart.tsx
    Popover.tsx
    ProgressBar.tsx
    ProgressCircle.tsx
    RadioCard.tsx
    Searchbar.tsx
    Select.tsx
    Switch.tsx
    Table.tsx
    TabNavigation.tsx
    Tooltip.tsx
  data/
    air-quality-data.ts
    data.ts
    generateData.js
    overview-data.ts
    schema.ts
  lib/
    chartUtils.ts
    useOnWindowResize.tsx
    utils.ts
.clinerules
.eslintrc.json
.gitignore
.prettierrc
LICENSE.md
next.config.mjs
package.json
postcss.config.mjs
README.md
repomix-output.txt
tailwind.config.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="repomix-output.txt">
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-04-25T03:10:33.187Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
memory-bank/
  activeContext.md
  productContext.md
  progress.md
  projectbrief.md
  systemPatterns.md
  techContext.md
public/
  DatabaseLogo.tsx
src/
  app/
    (main)/
      air-quality/
        page.tsx
      details/
        page.tsx
      overview/
        page.tsx
      layout.tsx
    settings/
      billing/
        page.tsx
      general/
        page.tsx
      users/
        page.tsx
      layout.tsx
    globals.css
    layout.tsx
    not-found.tsx
    siteConfig.ts
  components/
    ui/
      air-quality/
        AirQualityChartCard.tsx
        AirQualityGaugeCard.tsx
        AirQualityHeatmapCard.tsx
      data-table/
        columns.tsx
        DataTable.tsx
        DataTableBulkEditor.tsx
        DataTableColumnHeader.tsx
        DataTableFilter.tsx
        DataTableFilterbar.tsx
        DataTablePagination.tsx
        DataTableRowActions.tsx
        DataTableViewOptions.tsx
        TanstackTable.d.ts
      icons/
        ArrowAnimated.tsx
      navigation/
        DropdownUserProfile.tsx
        MobileSidebar.tsx
        ModalAddWorkspace.tsx
        Sidebar.tsx
        SidebarWorkspacesDropdown.tsx
        UserProfile.tsx
      overview/
        DashboardCategoryBarCard.tsx
        DashboardChartCard.tsx
        DashboardFilterbar.tsx
        DashboardProgressBarCard.tsx
        FeatureBento.tsx
        HeroBento.tsx
        HeroGlobe.tsx
      settings/
        ModalAddUser.tsx
    Badge.tsx
    Button.tsx
    Calendar.tsx
    Card.tsx
    Checkbox.tsx
    CommandBar.tsx
    DatePicker.tsx
    Dialog.tsx
    Divider.tsx
    Drawer.tsx
    Dropdown.tsx
    Input.tsx
    Label.tsx
    LineChart.tsx
    Popover.tsx
    ProgressBar.tsx
    ProgressCircle.tsx
    RadioCard.tsx
    Searchbar.tsx
    Select.tsx
    Switch.tsx
    Table.tsx
    TabNavigation.tsx
    Tooltip.tsx
  data/
    air-quality-data.ts
    data.ts
    generateData.js
    overview-data.ts
    schema.ts
  lib/
    chartUtils.ts
    useOnWindowResize.tsx
    utils.ts
.clinerules
.eslintrc.json
.gitignore
.prettierrc
LICENSE.md
next.config.mjs
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: memory-bank/activeContext.md
================
# Active Context

## Current Work Focus
- **Memory Bank Maintenance**: Keeping the Memory Bank documentation up-to-date with recent changes
- **Font System Enhancement**: Adding and configuring additional font options for the dashboard
- **UI Enhancement**: Adding a hero section with a globe visualization to the overview page

## Recent Changes
- Created Memory Bank directory and initial documentation files:
  - `projectbrief.md`: Defined core project requirements and goals
  - `productContext.md`: Documented why the project exists and problems it solves
  - `systemPatterns.md`: Outlined system architecture and design patterns
  - `techContext.md`: Detailed technologies used and development setup
  - `activeContext.md`: This file - tracking current focus and changes
  - `progress.md`: Documenting project status and next steps
- **Font System Enhancement**:
  - Added Feature Flat font family files to the project
  - Added font files: FeatureFlatCond-Regular, FeatureFlatCond-Medium, FeatureFlatHeadline, and FeatureFlatText-Bold
  - Prepared for potential integration with the existing font system
- **UI Enhancement**:
  - Added a hero section with a globe visualization to the overview page
  - Installed the `cobe` library for the interactive globe component
  - Created a new component at `src/components/ui/overview/HeroGlobe.tsx`
  - Integrated the hero section above the "Current billing cycle" section

## Next Steps
- Explore the dashboard components in more detail
- Understand the data flow and state management
- Document specific UI patterns and component usage
- Identify areas for potential enhancement or customization
- Consider creating additional documentation for complex features
- Evaluate how to integrate Feature Flat fonts into the application
- Consider creating a typography system that leverages all available fonts
- Document best practices for font usage across different UI components

## Active Decisions and Considerations
- **Documentation Structure**: Organized Memory Bank files according to the specified hierarchy
- **Content Detail Level**: Balanced between high-level overview and specific implementation details
- **Project Understanding**: Based on available files and structure, without running the application yet
- **Font System Strategy**: Added Feature Flat fonts to complement existing Colfax and Barlow fonts
- **Typography Hierarchy**: Considering how to structure typography with multiple font families for different UI elements

## Important Patterns and Preferences
- **File Organization**: Following Next.js App Router conventions
- **Component Structure**: Reusable components with clear separation of concerns
- **Documentation Style**: Markdown with clear headings and bullet points for readability
- **Memory Bank Updates**: Will require regular updates as project understanding deepens
- **Font Management**: Using Next.js local font optimization for performance
- **Typography System**: Structured approach with specific font families for different UI elements

## Learnings and Project Insights
- The project uses a comprehensive set of modern React libraries and patterns
- Strong focus on component reusability and composition
- Clear separation between UI components and data management
- Emphasis on accessibility through Radix UI components
- Tailwind CSS used consistently for styling
- Data visualization is a key feature with Recharts integration
- Table functionality enhanced with TanStack Table
- Typography system leverages Next.js font optimization for performance
- Multiple font families provide design flexibility for different UI contexts
- Font configuration in Tailwind enables consistent typography across components

## Current Questions
- How is authentication handled in the application?
- What is the intended deployment strategy?
- Are there specific customization points designed into the template?
- How is theming implemented beyond the basic Tailwind configuration?
- What testing strategies are recommended for the template?
- What is the intended use case for the Feature Flat font family in the dashboard?
- How should the typography system be structured to incorporate multiple font families effectively?

## Recent Insights
- The template provides a comprehensive starting point for dashboard applications
- Component organization follows logical grouping by function and complexity
- Next.js App Router provides a clean way to organize pages and layouts
- The project balances between providing structure and allowing customization
- Typography plays a crucial role in the dashboard's visual identity
- The font system is designed to be flexible with multiple font families for different purposes
- Next.js font optimization provides performance benefits through local font loading

================
File: memory-bank/productContext.md
================
# Product Context

## Purpose
The Tremor Dashboard template exists to provide developers with a high-quality, ready-to-use foundation for building modern SaaS dashboards. It eliminates the need to build common dashboard components from scratch, allowing developers to focus on their specific business logic and unique features.

## Problems Solved

### For Developers
- **Reduced Development Time**: Eliminates the need to build common dashboard UI components from scratch
- **Best Practices Implementation**: Provides a structure that follows modern React and Next.js patterns
- **Accessibility Built-in**: Components are built with accessibility in mind using Radix UI
- **Responsive Design**: Already optimized for various screen sizes
- **Data Visualization Ready**: Integrated with Recharts for common chart types

### For Businesses
- **Professional UI**: Provides a polished, professional look without extensive design work
- **Consistent Experience**: Ensures a cohesive user experience across the application
- **Scalable Foundation**: Built to accommodate growing feature sets and data complexity
- **Quick Time-to-Market**: Reduces the time needed to launch a dashboard product

## User Experience Goals

### Primary Users: Administrators & Analysts
- **Efficient Data Access**: Quick access to key metrics and detailed data
- **Intuitive Navigation**: Clear pathways to different sections of the application
- **Actionable Insights**: Visual representations that highlight important trends
- **Customizable Views**: Ability to filter and sort data to find relevant information
- **Administrative Control**: Easy management of settings, users, and billing

### Secondary Users: Developers
- **Maintainable Code**: Clean structure that's easy to extend and modify
- **Component Reusability**: Well-designed components that can be reused across the application
- **Clear Documentation**: Understanding of how components work together
- **Customization Options**: Easy ways to adapt the template to specific needs

## Product Vision
The Tremor Dashboard aims to be the go-to starting point for any SaaS dashboard project, providing a perfect balance between:
- **Structure**: Offering enough organization to be immediately useful
- **Flexibility**: Remaining adaptable to diverse use cases
- **Quality**: Maintaining high standards in code, design, and user experience
- **Simplicity**: Keeping the learning curve manageable for new developers

## Key Differentiators
- Built with Tremor Raw components for consistent, high-quality UI
- Integration of modern React patterns and libraries
- Focus on both developer experience and end-user experience
- Comprehensive component set covering most dashboard needs
- Thoughtful organization of code and features

================
File: memory-bank/progress.md
================
# Progress

## Current Status
- **Initial Setup**: Memory Bank documentation structure has been established
- **Project Understanding**: Basic understanding of the project structure and purpose has been documented
- **Documentation**: Core Memory Bank files have been created with initial content
- **Font System**: Feature Flat font family has been added to the project
- **UI Enhancement**: Added a hero section with a globe visualization to the overview page

## What Works
- **Project Structure**: The Next.js application structure is in place with App Router organization
- **Component Library**: Comprehensive set of UI components available in `src/components/`
- **Page Routes**: Basic routes established for overview, details, and settings sections
- **Data Visualization**: Chart components implemented with Recharts
- **Tables**: Advanced table functionality with TanStack Table
- **Navigation**: Sidebar and mobile navigation components
- **Settings Sections**: General, billing, and users settings pages

## What's Left to Build
- **Custom Features**: Any specific features beyond the template functionality
- **Data Integration**: Connection to real data sources instead of sample data
- **Authentication**: User authentication and authorization system
- **API Routes**: Backend API routes for data operations
- **Testing**: Comprehensive test suite for components and pages
- **Deployment**: Production deployment configuration
- **Documentation**: End-user documentation for the dashboard

## Known Issues
- No specific issues identified yet, as this is an initial documentation phase

## Evolution of Project Decisions

### Documentation Approach
- **Initial Decision**: Create Memory Bank structure according to specified hierarchy
- **Current Status**: Basic documentation created based on project file exploration
- **Future Direction**: Enhance documentation as project understanding deepens

### Project Understanding
- **Initial State**: Limited understanding based on file structure and README
- **Current State**: Basic understanding of architecture, components, and technologies
- **Next Steps**: Deeper exploration of component implementations and data flow

### Font System
- **Initial State**: Using Colfax for primary sans-serif and Barlow for headings
- **Current State**: Added Feature Flat font family (Condensed Regular, Condensed Medium, Headline, Text Bold)
- **Next Steps**: Potentially integrate Feature Flat fonts into the application's typography system

## Milestones

### Completed
- ✅ Memory Bank initialization
- ✅ Basic project structure documentation
- ✅ Technology stack documentation
- ✅ Font system enhancement with Feature Flat font family
- ✅ Added hero section with globe visualization to the overview page

### In Progress
- 🔄 Detailed component understanding
- 🔄 Data flow documentation

### Upcoming
- ⏳ UI pattern documentation
- ⏳ Customization guide
- ⏳ Feature enhancement planning

## Implementation Notes

### Documentation Structure
The Memory Bank follows the specified structure with six core files:
1. `projectbrief.md`: Foundation document defining core requirements
2. `productContext.md`: Why the project exists and problems it solves
3. `systemPatterns.md`: System architecture and design patterns
4. `techContext.md`: Technologies used and development setup
5. `activeContext.md`: Current work focus and recent changes
6. `progress.md`: This file - tracking project status and next steps

### Next Steps for Documentation
- Run the application locally to better understand its functionality
- Document specific component usage patterns
- Create visual documentation of the UI structure
- Document data flow and state management patterns
- Identify customization points and document them

## Lessons Learned
- The importance of structured documentation for project understanding
- The value of exploring file structure to understand project organization
- The benefit of documenting technologies and patterns early in the process
- The significance of typography in creating a consistent and professional UI
- The flexibility of Next.js font system for managing multiple font families

## Future Considerations
- How to extend the template for specific use cases
- Best practices for data integration
- Performance optimization strategies
- Accessibility improvements
- Testing strategies for the dashboard components

================
File: memory-bank/projectbrief.md
================
# Project Brief

## Project Overview
This is a template dashboard application built with Next.js, React, TypeScript, and Tailwind CSS. It serves as a SaaS application template from Tremor, designed to provide a comprehensive dashboard interface for various business needs.

## Core Requirements & Goals
- Provide a modern, responsive dashboard interface
- Demonstrate best practices for Next.js and React development
- Showcase various UI components and data visualization techniques
- Serve as a starting point for custom dashboard applications

## Target Audience
- Developers building SaaS applications
- Businesses needing admin dashboards
- Teams requiring data visualization interfaces

## Key Features
- Overview dashboard with charts and metrics
- Detailed data views and tables
- Settings management (general, billing, users)
- Responsive design for all device sizes
- Modern UI components

## Technical Requirements
- Built with Next.js, React, TypeScript
- Styled with Tailwind CSS
- Uses Radix UI for accessible components
- Recharts for data visualization
- TanStack Table for data tables

## Project Scope
This template provides a foundation for building custom dashboard applications. It includes:
- Page layouts and navigation
- UI components library
- Data visualization examples
- Table implementations
- Settings management interfaces

## Success Criteria
- Clean, maintainable code structure
- Responsive design across all device sizes
- Accessible UI components
- Performant rendering of data visualizations
- Easy customization for specific use cases

================
File: memory-bank/systemPatterns.md
================
# System Patterns

## System Architecture

### Next.js App Router Structure
The project uses Next.js with the App Router pattern, organizing pages and layouts in a nested structure:
- `src/app/` - Root application directory
  - `(main)/` - Main application routes (overview, details)
  - `settings/` - Settings-related routes
  - `layout.tsx` - Root layout with global providers
  - `globals.css` - Global styles
  - `siteConfig.ts` - Site-wide configuration

### Component Organization
- `src/components/` - Reusable UI components
  - Base components (Button, Input, etc.)
  - Complex components (Calendar, LineChart, etc.)
  - `ui/` - Specialized UI components
    - `data-table/` - Table-related components
    - `icons/` - Icon components
    - `navigation/` - Navigation components
    - `overview/` - Dashboard-specific components
    - `settings/` - Settings-specific components

### Data Management
- `src/data/` - Data-related files
  - `data.ts` - Main data structures
  - `generateData.js` - Data generation utilities
  - `overview-data.ts` - Dashboard-specific data
  - `schema.ts` - Data type definitions

### Utilities
- `src/lib/` - Utility functions and hooks
  - `chartUtils.ts` - Chart-related utilities
  - `useOnWindowResize.tsx` - Window resize hook
  - `utils.ts` - General utility functions

## Key Technical Decisions

### Framework Selection
- **Next.js**: Chosen for server-side rendering capabilities, routing, and overall React framework
- **TypeScript**: Used for type safety and better developer experience
- **Tailwind CSS**: Selected for utility-first styling approach

### UI Component Strategy
- **Radix UI**: Used as the foundation for accessible, unstyled components
- **Custom Components**: Built on top of Radix UI with Tailwind styling
- **Component Composition**: Complex UI elements composed from simpler components

### Data Visualization
- **Recharts**: Chosen for flexible, React-based charting library
- **Custom Chart Wrappers**: Added to provide consistent styling and behavior

### Data Management
- **TanStack Table**: Used for advanced table functionality
- **Static Data Generation**: Sample data generated for demonstration purposes

### State Management
- **React Hooks**: Used for component-level state
- **Context API**: Used for theme and potentially other global state

## Design Patterns

### Component Patterns
- **Compound Components**: Used for complex UI elements with multiple parts
- **Render Props**: Used in some components for flexible rendering
- **Custom Hooks**: Encapsulating reusable logic

### Layout Patterns
- **Nested Layouts**: Using Next.js App Router for shared layouts
- **Responsive Design**: Mobile-first approach with breakpoints
- **Grid System**: Using Tailwind's grid utilities

### Data Patterns
- **Data Fetching**: Structured for compatibility with various data sources
- **Data Transformation**: Utilities for formatting and processing data
- **Type Safety**: Strong typing throughout the application

### Navigation Patterns
- **Hierarchical Navigation**: Main sections with sub-sections
- **Sidebar Navigation**: Primary navigation method
- **Breadcrumbs**: For context within nested pages

## Component Relationships

### Layout Hierarchy
```
RootLayout
├── MainLayout (for main content pages)
│   ├── Overview Page
│   └── Details Page
└── SettingsLayout (for settings pages)
    ├── General Settings Page
    ├── Billing Settings Page
    └── Users Settings Page
```

### Component Dependencies
- UI components have minimal dependencies on application logic
- Data visualization components depend on data formatting utilities
- Navigation components depend on route configuration

## Critical Implementation Paths

### Rendering Flow
1. Next.js server components render the initial HTML
2. Client components hydrate with interactivity
3. Data is loaded and displayed in tables and charts

### User Interaction Flow
1. User navigates via sidebar or navigation components
2. Content is loaded for the selected section
3. User interacts with data visualizations or tables
4. Settings changes update application state

### Customization Flow
1. Modify theme variables in Tailwind configuration
2. Update component styles using Tailwind classes
3. Extend or modify data structures
4. Add new pages following the established patterns

================
File: memory-bank/techContext.md
================
# Technical Context

## Technologies Used

### Core Framework
- **Next.js 14.2.23**: React framework with server-side rendering and App Router
- **React 18.2.0**: UI library for component-based development
- **TypeScript 5.8.2**: Typed JavaScript for better developer experience and code quality

### Styling
- **Tailwind CSS 3.4.17**: Utility-first CSS framework
- **tailwind-merge**: Utility for merging Tailwind CSS classes
- **tailwind-variants**: Creating variants of components with different styles
- **@tailwindcss/forms**: Form styling plugin for Tailwind

### Fonts
- **Colfax**: Primary sans-serif font (Regular 400, Medium 500)
- **Barlow**: Heading font (Regular 400, Medium 500, Bold 700)
- **Feature Flat**: Additional font family (Condensed Regular, Condensed Medium, Headline, Text Bold)

### UI Components
- **Radix UI**: Headless UI components for accessibility
  - Components include: Checkbox, Dialog, Dropdown Menu, Label, Navigation Menu, Popover, Radio Group, Select, Slot, Switch, Tooltip
- **@remixicon/react 4.6.0**: Icon library

### Data Visualization
- **Recharts 2.15.1**: React charting library for data visualization
- **date-fns 3.6.0**: Date utility library
- **cobe 0.6.3**: Interactive 3D globe visualization library

### Data Management
- **@tanstack/react-table 8.21.2**: Table library for React
- **@internationalized/date 3.7.0**: Internationalization utilities for dates

### Drag and Drop
- **@atlaskit/pragmatic-drag-and-drop**: Drag and drop functionality
  - Includes core, flourish, hitbox, live-region, and react-drop-indicator packages

### Utilities
- **clsx 2.1.1**: Utility for constructing className strings
- **next-themes 0.4.6**: Theme management for Next.js
- **tiny-invariant 1.3.3**: Invariant checking utility
- **use-debounce 10.0.4**: Debounce hook for React

### Development Tools
- **ESLint 8.57.1**: JavaScript linter
- **Prettier 3.5.3**: Code formatter
- **prettier-plugin-tailwindcss 0.6.11**: Tailwind CSS integration for Prettier
- **TypeScript ESLint Parser 8.28.0**: TypeScript support for ESLint

## Development Setup

### Prerequisites
- Node.js (compatible with Next.js 14.2.23)
- pnpm (recommended) or npm

### Installation
```bash
pnpm install
```

### Development Server
```bash
pnpm run dev
```
This starts the development server at [http://localhost:3000](http://localhost:3000)

### Build for Production
```bash
pnpm run build
```

### Start Production Server
```bash
pnpm start
```

### Linting
```bash
pnpm run lint
```

### Generate Sample Data
```bash
pnpm run generate
```

## Technical Constraints

### Browser Compatibility
- Modern browsers (Chrome, Firefox, Safari, Edge)
- No explicit support for legacy browsers mentioned

### Performance Considerations
- Next.js optimizations for server-side rendering and static generation
- Font optimization via next/font
- Component-level optimizations should be considered for data-heavy visualizations

### Accessibility Requirements
- Radix UI provides accessible base components
- Additional accessibility considerations should be maintained when extending components

### Responsive Design
- Mobile-first approach with Tailwind CSS
- Responsive components for various screen sizes
- Custom hook (useOnWindowResize) for handling window resize events

### State Management
- React's built-in state management (useState, useContext)
- No external state management library (Redux, Zustand, etc.)

## Tool Usage Patterns

### Component Development
- Create reusable components in `src/components/`
- Use TypeScript interfaces for props
- Leverage Tailwind CSS for styling
- Extend Radix UI components for complex interactions

### Page Development
- Use Next.js App Router conventions
- Create pages in appropriate directories under `src/app/`
- Utilize layouts for shared UI elements

### Data Handling
- Sample data generation with `generateData.js`
- Type definitions in `schema.ts`
- Table data handling with TanStack Table

### Styling Approach
- Utility-first with Tailwind CSS
- Component variants with tailwind-variants
- Class merging with tailwind-merge and clsx

### Project Structure
- Feature-based organization within `src/app/`
- Component categorization in `src/components/`
- Utility functions in `src/lib/`
- Data-related files in `src/data/`

## Development Workflow

### Recommended Process
1. Understand requirements
2. Identify or create necessary components
3. Implement page layout and functionality
4. Connect to data sources (or use sample data)
5. Test across different screen sizes
6. Ensure accessibility compliance
7. Optimize for performance

### Code Style
- Follow ESLint and Prettier configurations
- Maintain consistent naming conventions
- Use TypeScript types for all components and functions

================
File: public/DatabaseLogo.tsx
================
import * as React from "react"
import type { SVGProps } from "react"
export const DatabaseLogo = (props: SVGProps<SVGSVGElement>) => (
  <svg aria-hidden="true" fill="none" viewBox="0 0 200 44" {...props}>
    <mask
      id="mask0_9418_64"
      width={44}
      height={44}
      x={0}
      y={0}
      maskUnits="userSpaceOnUse"
      style={{
        maskType: "luminance",
      }}
    >
      <path fill="white" d="M44 0H0V44H44V0Z" />
    </mask>
    <g mask="url(#mask0_9418_64)">
      <path
        fill="#6366F1"
        d="M27.2694 2.12169L23.0486 0.990723L19.4917 14.2654L16.2804 2.28093L12.0595 3.4119L15.5291 16.3602L6.88724 7.71841L3.79738 10.8083L13.2764 20.2874L1.47179 17.1243L0.34082 21.3451L13.2388 24.8011C13.0912 24.1642 13.0131 23.5006 13.0131 22.8187C13.0131 17.992 16.9258 14.0792 21.7525 14.0792C26.5792 14.0792 30.492 17.992 30.492 22.8187C30.492 23.4962 30.4148 24.1557 30.269 24.7889L41.9909 27.9297L43.1218 23.709L30.1725 20.2392L41.9779 17.0759L40.8469 12.8551L27.8981 16.3247L36.54 7.68293L33.4501 4.59307L24.1026 13.9406L27.2694 2.12169Z"
      />
      <path
        fill="#6366F1"
        d="M30.2567 24.8379C29.8948 26.3679 29.1308 27.7423 28.0825 28.8434L36.5745 37.3356L39.6644 34.2457L30.2567 24.8379Z"
      />
      <path
        fill="#6366F1"
        d="M27.997 28.9321C26.9361 30.0157 25.5953 30.8243 24.0918 31.2411L27.1819 42.7733L31.4027 41.6423L27.997 28.9321Z"
      />
      <path
        fill="#6366F1"
        d="M23.9342 31.2835C23.2366 31.4628 22.5055 31.5581 21.752 31.5581C20.9448 31.5581 20.1631 31.4486 19.421 31.2437L16.3281 42.7866L20.5489 43.9175L23.9342 31.2835Z"
      />
      <path
        fill="#6366F1"
        d="M19.2715 31.201C17.791 30.7636 16.4741 29.9446 15.4348 28.8579L6.92188 37.3709L10.0118 40.4607L19.2715 31.201Z"
      />
      <path
        fill="#6366F1"
        d="M15.3647 28.783C14.3432 27.6894 13.5992 26.3334 13.2451 24.8271L1.48486 27.9782L2.61582 32.199L15.3647 28.783Z"
      />
    </g>
    <path
      fill="currentColor"
      d="M63.7538 32.4108C59.2346 32.4108 55.6318 28.5868 55.6318 23.8464C55.6318 19.1059 59.2346 15.2187 63.7538 15.2187C66.5665 15.2187 68.0519 16.3564 68.9367 18.0946V8.92969H73.2032V32H69.0632V29.3137C68.1783 31.1783 66.6929 32.4108 63.7538 32.4108ZM59.8983 23.8148C59.8983 26.3114 61.7312 28.5552 64.4491 28.5552C67.2618 28.5552 69.0632 26.4062 69.0632 23.8464C69.0632 21.2865 67.2618 19.0743 64.4491 19.0743C61.7312 19.0743 59.8983 21.2549 59.8983 23.8148Z"
    />
    <path
      fill="currentColor"
      d="M83.228 32.4108C78.7088 32.4108 75.106 28.5868 75.106 23.8464C75.106 19.1059 78.7088 15.2187 83.228 15.2187C86.0723 15.2187 87.5576 16.388 88.4425 18.1578V15.5663H92.6774V32H88.5373V29.3137C87.6525 31.1783 86.1671 32.4108 83.228 32.4108ZM79.3724 23.8148C79.3724 26.3114 81.2054 28.5552 83.9233 28.5552C86.736 28.5552 88.5373 26.4062 88.5373 23.8464C88.5373 21.2865 86.736 19.0743 83.9233 19.0743C81.2054 19.0743 79.3724 21.2549 79.3724 23.8148Z"
    />
    <path
      fill="currentColor"
      d="M101.438 32C98.183 32 96.4132 30.483 96.4132 26.9119V19.2007H94.1062V15.5663H96.4132V12.248L100.68 11.8056V15.5663H104.156V19.2007H100.68V26.6906C100.68 27.7335 101.185 28.2076 102.007 28.2076H103.777V32H101.438Z"
    />
    <path
      fill="currentColor"
      d="M112.64 32.4108C108.121 32.4108 104.518 28.5868 104.518 23.8464C104.518 19.1059 108.121 15.2187 112.64 15.2187C115.484 15.2187 116.97 16.388 117.854 18.1578V15.5663H122.089V32H117.949V29.3137C117.064 31.1783 115.579 32.4108 112.64 32.4108ZM108.784 23.8148C108.784 26.3114 110.617 28.5552 113.335 28.5552C116.148 28.5552 117.949 26.4062 117.949 23.8464C117.949 21.2865 116.148 19.0743 113.335 19.0743C110.617 19.0743 108.784 21.2549 108.784 23.8148Z"
    />
    <path
      fill="currentColor"
      d="M134.073 32.4108C131.134 32.4108 129.649 31.1783 128.764 29.3137V32H124.624V8.92969H128.891V18.0946C129.775 16.3564 131.261 15.2187 134.073 15.2187C138.593 15.2187 142.195 19.1059 142.195 23.8464C142.195 28.5868 138.593 32.4108 134.073 32.4108ZM128.764 23.8464C128.764 26.4062 130.566 28.5552 133.378 28.5552C136.096 28.5552 137.929 26.3114 137.929 23.8148C137.929 21.2549 136.096 19.0743 133.378 19.0743C130.566 19.0743 128.764 21.2865 128.764 23.8464Z"
    />
    <path
      fill="currentColor"
      d="M151.434 32.4108C146.915 32.4108 143.312 28.5868 143.312 23.8464C143.312 19.1059 146.915 15.2187 151.434 15.2187C154.278 15.2187 155.764 16.388 156.648 18.1578V15.5663H160.883V32H156.743V29.3137C155.858 31.1783 154.373 32.4108 151.434 32.4108ZM147.578 23.8148C147.578 26.3114 149.411 28.5552 152.129 28.5552C154.942 28.5552 156.743 26.4062 156.743 23.8464C156.743 21.2865 154.942 19.0743 152.129 19.0743C149.411 19.0743 147.578 21.2549 147.578 23.8148Z"
    />
    <path
      fill="currentColor"
      d="M169.044 32.4108C166.262 32.4108 164.019 31.4627 162.217 29.5349L165.093 26.9119C166.294 28.2708 167.558 28.9345 168.949 28.9345C170.402 28.9345 171.224 28.2076 171.224 27.2279C171.224 26.3746 170.813 25.9006 168.222 25.3001C163.829 24.2572 163.165 22.2662 163.165 20.1804C163.165 17.3045 165.441 15.1555 169.296 15.1555C171.951 15.1555 173.721 15.8192 175.396 17.9998L172.299 20.37C171.509 19.1059 170.497 18.6002 169.391 18.6002C168.222 18.6002 167.337 19.0427 167.337 20.054C167.337 20.6228 167.59 21.1285 169.549 21.6341C174.321 22.8667 175.427 24.6364 175.427 27.1015C175.427 30.1354 172.678 32.4108 169.044 32.4108Z"
    />
    <path
      fill="currentColor"
      d="M184.959 32.4108C179.871 32.4108 176.458 28.5552 176.458 23.8148C176.458 19.0743 180.029 15.1555 184.959 15.1555C189.89 15.1555 193.303 19.0743 193.303 23.8148C193.303 24.2888 193.271 24.7944 193.176 25.3317H180.883C181.357 27.2595 182.81 28.6184 184.959 28.6184C186.792 28.6184 188.215 27.6703 188.973 26.4062L192.291 28.9029C190.964 30.9571 188.215 32.4108 184.959 32.4108ZM180.883 22.1398H189.005C188.531 20.3068 186.982 18.8215 184.896 18.8215C182.874 18.8215 181.357 20.1804 180.883 22.1398Z"
    />
  </svg>
)

================
File: src/app/(main)/air-quality/page.tsx
================
"use client"
import { AirQualityChartCard } from "@/components/ui/air-quality/AirQualityChartCard"
import { AirQualityGaugeCard } from "@/components/ui/air-quality/AirQualityGaugeCard"
import { AirQualityHeatmapCard } from "@/components/ui/air-quality/AirQualityHeatmapCard"
import { Filterbar } from "@/components/ui/overview/DashboardFilterbar"
import { AirQualityData } from "@/data/schema"
import { cx } from "@/lib/utils"
import { subDays } from "date-fns"
import React from "react"
import { DateRange } from "react-day-picker"

export type PeriodValue = "previous-period" | "last-year" | "no-comparison"

const categories: {
    title: keyof AirQualityData
    type: "level" | "temperature" | "percent" | "pressure"
}[] = [
        {
            title: "CO2",
            type: "level",
        },
        {
            title: "Temperature",
            type: "temperature",
        },
        {
            title: "Humidity",
            type: "percent",
        },
        {
            title: "PM2_5",
            type: "level",
        },
        {
            title: "PM10",
            type: "level",
        },
        {
            title: "VOC",
            type: "level",
        },
        {
            title: "Pressure",
            type: "pressure",
        },
    ]

export type SensorReading = {
    title: string
    value: number
    status: "normal" | "warning" | "critical"
    unit: string
}

const currentReadings: SensorReading[] = [
    {
        title: "CO2",
        value: 680,
        status: "normal",
        unit: "ppm",
    },
    {
        title: "Temperature",
        value: 23.2,
        status: "normal",
        unit: "°C",
    },
    {
        title: "Humidity",
        value: 42.5,
        status: "normal",
        unit: "%",
    },
]

const roomReadings: SensorReading[] = [
    {
        title: "Living Room",
        value: 680,
        status: "normal",
        unit: "ppm",
    },
    {
        title: "Bedroom",
        value: 825,
        status: "warning",
        unit: "ppm",
    },
    {
        title: "Kitchen",
        value: 910,
        status: "warning",
        unit: "ppm",
    },
]

// Calculate maxDate as today
const today = new Date()

export default function AirQualityDashboard() {
    const [selectedDates, setSelectedDates] = React.useState<
        DateRange | undefined
    >({
        from: subDays(today, 7),
        to: today,
    })
    const [selectedPeriod, setSelectedPeriod] =
        React.useState<PeriodValue>("previous-period")

    const [selectedCategories, setSelectedCategories] = React.useState<string[]>(
        categories.map((category) => category.title),
    )

    return (
        <>
            <div className="flex items-center gap-3">
                <div className="rounded-full bg-green-100 p-2 dark:bg-green-900">
                    <div className="h-3 w-3 rounded-full bg-green-500"></div>
                </div>
                <h1 className="text-xl font-semibold text-gray-900 dark:text-gray-50 font-heading">
                    Air Quality Monitoring
                </h1>
            </div>

            <section aria-labelledby="current-air-quality">
                <h2
                    id="current-air-quality"
                    className="mt-8 scroll-mt-10 text-lg tracking-normal font-semibold text-gray-900 sm:text-xl dark:text-gray-50 font-heading"
                >
                    CURRENT READINGS
                </h2>
                <div className="mt-4 grid grid-cols-1 gap-6 sm:mt-6 sm:grid-cols-2 lg:mt-8 xl:grid-cols-3">
                    <AirQualityGaugeCard
                        title="Air Quality"
                        value="Good"
                        valueDescription="Current air quality status"
                        ctaDescription="Last updated at 3:45 PM"
                        ctaText="View details"
                        ctaLink="#"
                        data={currentReadings}
                    />
                    <AirQualityGaugeCard
                        title="CO2 by Room"
                        value="825"
                        valueDescription="Average CO2 level (ppm)"
                        ctaDescription="2 rooms require ventilation"
                        ctaText="View all rooms"
                        ctaLink="#"
                        data={roomReadings}
                    />
                    <AirQualityHeatmapCard
                        title="24-hour Heatmap"
                        subtitle="CO2 levels (ppm)"
                        description="Today's hourly CO2 readings"
                    />
                </div>
            </section>

            <section aria-labelledby="air-quality-trends">
                <h2
                    id="air-quality-trends"
                    className="mt-16 scroll-mt-8 text-lg font-semibold text-gray-900 sm:text-xl dark:text-gray-50 font-heading"
                >
                    Air Quality Trends
                </h2>
                <div className="sticky top-16 z-20 flex items-center justify-between border-b border-gray-200 bg-white pb-4 pt-4 sm:pt-6 lg:top-0 lg:mx-0 lg:px-0 lg:pt-8 dark:border-gray-800 dark:bg-gray-950">
                    <Filterbar
                        maxDate={today}
                        minDate={subDays(today, 30)}
                        selectedDates={selectedDates}
                        onDatesChange={(dates) => setSelectedDates(dates)}
                        selectedPeriod={selectedPeriod}
                        onPeriodChange={(period) => setSelectedPeriod(period)}
                        categories={categories as any}
                        setSelectedCategories={setSelectedCategories}
                        selectedCategories={selectedCategories}
                    />
                </div>
                <dl
                    className={cx(
                        "mt-10 grid grid-cols-1 gap-8 sm:grid-cols-1 md:grid-cols-2 xl:grid-cols-3",
                    )}
                >
                    {categories
                        .filter((category) => selectedCategories.includes(category.title))
                        .map((category) => {
                            return (
                                <AirQualityChartCard
                                    key={category.title}
                                    title={category.title}
                                    type={category.type}
                                    selectedDates={selectedDates}
                                    selectedPeriod={selectedPeriod}
                                />
                            )
                        })}
                </dl>
            </section>
        </>
    )
}

================
File: src/app/(main)/details/page.tsx
================
import { columns } from "@/components/ui/data-table/columns"
import { DataTable } from "@/components/ui/data-table/DataTable"
import { usage } from "@/data/data"

export default function Example() {
  return (
    <>
      <h1 className="text-lg font-semibold text-gray-900 sm:text-xl dark:text-gray-50 font-heading">
        Details
      </h1>
      <div className="mt-4 sm:mt-6 lg:mt-10">
        <DataTable data={usage} columns={columns} />
      </div>
    </>
  )
}

================
File: src/app/(main)/overview/page.tsx
================
"use client"
import { CategoryBarCard } from "@/components/ui/overview/DashboardCategoryBarCard"
import { ChartCard } from "@/components/ui/overview/DashboardChartCard"
import { Filterbar } from "@/components/ui/overview/DashboardFilterbar"
import { ProgressBarCard } from "@/components/ui/overview/DashboardProgressBarCard"
import FeatureBento from "@/components/ui/overview/FeatureBento"
import { overviews } from "@/data/overview-data"
import { OverviewData } from "@/data/schema"
import { cx } from "@/lib/utils"
import { subDays, toDate } from "date-fns"
import React from "react"
import { DateRange } from "react-day-picker"

export type PeriodValue = "previous-period" | "last-year" | "no-comparison"

const categories: {
  title: keyof OverviewData
  type: "currency" | "unit"
}[] = [
    {
      title: "Rows read",
      type: "unit",
    },
    {
      title: "Rows written",
      type: "unit",
    },
    {
      title: "Queries",
      type: "unit",
    },
    {
      title: "Payments completed",
      type: "currency",
    },
    {
      title: "Sign ups",
      type: "unit",
    },
    {
      title: "Logins",
      type: "unit",
    },
    {
      title: "Sign outs",
      type: "unit",
    },
    {
      title: "Support calls",
      type: "unit",
    },
  ]

export type KpiEntry = {
  title: string
  percentage: number
  current: number
  allowed: number
  unit?: string
}

const data: KpiEntry[] = [
  {
    title: "Rows read",
    percentage: 48.1,
    current: 48.1,
    allowed: 100,
    unit: "M",
  },
  {
    title: "Rows written",
    percentage: 78.3,
    current: 78.3,
    allowed: 100,
    unit: "M",
  },
  {
    title: "Storage",
    percentage: 26,
    current: 5.2,
    allowed: 20,
    unit: "GB",
  },
]

const data2: KpiEntry[] = [
  {
    title: "Weekly active users",
    percentage: 21.7,
    current: 21.7,
    allowed: 100,
    unit: "%",
  },
  {
    title: "Total users",
    percentage: 70,
    current: 28,
    allowed: 40,
  },
  {
    title: "Uptime",
    percentage: 98.3,
    current: 98.3,
    allowed: 100,
    unit: "%",
  },
]

export type KpiEntryExtended = Omit<
  KpiEntry,
  "current" | "allowed" | "unit"
> & {
  value: string
  color: string
}

const data3: KpiEntryExtended[] = [
  {
    title: "Base tier",
    percentage: 68.1,
    value: "$200",
    color: "bg-indigo-600 dark:bg-indigo-500",
  },
  {
    title: "On-demand charges",
    percentage: 20.8,
    value: "$61.1",
    color: "bg-purple-600 dark:bg-purple-500",
  },
  {
    title: "Caching",
    percentage: 11.1,
    value: "$31.9",
    color: "bg-gray-400 dark:bg-gray-600",
  },
]

const overviewsDates = overviews.map((item) => toDate(item.date).getTime())
const maxDate = toDate(Math.max(...overviewsDates))

export default function Overview() {
  const [selectedDates, setSelectedDates] = React.useState<
    DateRange | undefined
  >({
    from: subDays(maxDate, 30),
    to: maxDate,
  })
  const [selectedPeriod, setSelectedPeriod] =
    React.useState<PeriodValue>("last-year")

  const [selectedCategories, setSelectedCategories] = React.useState<string[]>(
    categories.map((category) => category.title),
  )

  return (
    <>
      {/*<HeroGlobe />
      <HeroBento />*/}
      <FeatureBento />

      <section aria-labelledby="current-billing-cycle">
        <h1
          id="current-billing-cycle"
          className="scroll-mt-10 text-lg tracking-normal font-semibold text-gray-900 sm:text-xl dark:text-gray-50 font-heading"
        >
          CURRENT BILLING CYCLE
        </h1>
        <div className="mt-4 grid grid-cols-1 gap-14 sm:mt-8 sm:grid-cols-2 lg:mt-10 xl:grid-cols-3">
          <ProgressBarCard
            title="Usage"
            change="+0.2%"
            value="68.1%"
            valueDescription="of allowed capacity"
            ctaDescription="Monthly usage resets in 12 days."
            ctaText="Manage plan."
            ctaLink="#"
            data={data}
          />
          <ProgressBarCard
            title="Workspace"
            change="+2.9%"
            value="21.7%"
            valueDescription="weekly active users"
            ctaDescription="Add up to 20 members in free plan."
            ctaText="Invite users."
            ctaLink="#"
            data={data2}
          />
          <CategoryBarCard
            title="Costs"
            change="-1.4%"
            value="$293.5"
            valueDescription="current billing cycle"
            subtitle="Current costs"
            ctaDescription="Set hard caps in"
            ctaText="cost spend management."
            ctaLink="#"
            data={data3}
          />
        </div>
      </section>
      <section aria-labelledby="usage-overview">
        <h1
          id="usage-overview"
          className="mt-16 scroll-mt-8 text-lg font-semibold text-gray-900 sm:text-xl dark:text-gray-50 font-heading"
        >
          Overview
        </h1>
        <div className="sticky top-16 z-20 flex items-center justify-between border-b border-gray-200 bg-white pb-4 pt-4 sm:pt-6 lg:top-0 lg:mx-0 lg:px-0 lg:pt-8 dark:border-gray-800 dark:bg-gray-950">
          <Filterbar
            maxDate={maxDate}
            minDate={new Date(2024, 0, 1)}
            selectedDates={selectedDates}
            onDatesChange={(dates) => setSelectedDates(dates)}
            selectedPeriod={selectedPeriod}
            onPeriodChange={(period) => setSelectedPeriod(period)}
            categories={categories}
            setSelectedCategories={setSelectedCategories}
            selectedCategories={selectedCategories}
          />
        </div>
        <dl
          className={cx(
            "mt-10 grid grid-cols-1 gap-14 sm:grid-cols-1 md:grid-cols-2 xl:grid-cols-3",
          )}
        >
          {categories
            .filter((category) => selectedCategories.includes(category.title))
            .map((category) => {
              return (
                <ChartCard
                  key={category.title}
                  title={category.title}
                  type={category.type}
                  selectedDates={selectedDates}
                  selectedPeriod={selectedPeriod}
                />
              )
            })}
        </dl>
      </section>
    </>
  )
}

================
File: src/app/(main)/layout.tsx
================
export default function Layout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <div className="relative">
      <div className="p-4 sm:px-6 sm:pb-10 sm:pt-10 lg:px-10 lg:pt-7">
        {children}
      </div>
    </div>
  )
}

================
File: src/app/settings/billing/page.tsx
================
"use client"

import { Button } from "@/components/Button"
import { Card } from "@/components/Card"
import { Divider } from "@/components/Divider"
import { Input } from "@/components/Input"
import { Label } from "@/components/Label"
import { ProgressBar } from "@/components/ProgressBar"
import { ProgressCircle } from "@/components/ProgressCircle"
import { Switch } from "@/components/Switch"
import { cx } from "@/lib/utils"
import { RiArrowRightUpLine } from "@remixicon/react"
import React from "react"

const data: {
  name: string
  description: string
  value: string
  capacity?: string
  percentageValue?: number
}[] = [
    {
      name: "Starter plan",
      description: "Discounted plan for start-ups and growing companies",
      value: "$90",
    },
    {
      name: "Storage",
      description: "Used 10.1 GB",
      value: "$40",
      capacity: "100 GB included",
      percentageValue: 10.1,
    },
    {
      name: "Bandwith",
      description: "Used 2.9 GB",
      value: "$10",
      capacity: "5 GB included",
      percentageValue: 58,
    },
    {
      name: "Users",
      description: "Used 9",
      value: "$20",
      capacity: "50 users included",
      percentageValue: 18,
    },
    {
      name: "Query super caching (EU-Central 1)",
      description: "4 GB query cache, $120/mo",
      value: "$120.00",
    },
  ]

export default function Billing() {
  const [isSpendMgmtEnabled, setIsSpendMgmtEnabled] = React.useState(true)
  return (
    <>
      <div className="rounded-lg bg-gray-50 p-6 ring-1 ring-inset ring-gray-200 dark:bg-gray-400/10 dark:ring-gray-800">
        <h4 className="text-sm font-semibold text-gray-900 dark:text-gray-50">
          This workspace is currently on free plan
        </h4>
        <p className="mt-1 max-w-2xl text-sm leading-6 text-gray-500">
          Boost your analytics and unlock advanced features with our premium
          plans.{" "}
          <a
            href="#"
            className="inline-flex items-center gap-1 text-indigo-600 dark:text-indigo-500"
          >
            Compare plans
            <RiArrowRightUpLine
              className="size-4 shrink-0"
              aria-hidden="true"
            />
          </a>
        </p>
      </div>
      <div className="mt-6 space-y-10">
        <section aria-labelledby="billing-overview">
          <div className="grid grid-cols-1 gap-x-14 gap-y-8 md:grid-cols-3">
            <div>
              <h2
                id="billing-overview"
                className="scroll-mt-10 font-semibold text-gray-900 dark:text-gray-50 font-heading"
              >
                Billing
              </h2>
              <p className="mt-1 text-sm leading-6 text-gray-500">
                Overview of current billing cycle based on fixed and on-demand
                charges.
              </p>
            </div>
            <div className="md:col-span-2">
              <ul
                role="list"
                className="w-full divide-y divide-gray-200 border-b border-gray-200 dark:divide-gray-800 dark:border-gray-800"
              >
                {data.map((item) => (
                  <li key={item.name} className="px-2 py-4 text-sm md:p-4">
                    <div className="w-full">
                      <div className="flex items-center justify-between">
                        <p className="font-medium text-gray-900 dark:text-gray-50">
                          {item.name}
                        </p>
                        <p className="font-medium text-gray-700 dark:text-gray-300">
                          {item.value}
                        </p>
                      </div>
                      <div className="w-full md:w-2/3">
                        {item.percentageValue && (
                          <ProgressBar
                            value={item.percentageValue}
                            className="mt-2 [&>*]:h-1.5"
                          />
                        )}
                        <p className="mt-1 flex items-center justify-between text-xs text-gray-500">
                          <span>{item.description}</span>
                          <span>{item.capacity}</span>
                        </p>
                      </div>
                    </div>
                  </li>
                ))}
              </ul>
              <div className="px-2 py-4 md:p-4">
                <p className="flex items-center justify-between text-sm font-medium text-gray-900 dark:text-gray-50">
                  <span>Total for May 24</span>
                  <span className="font-semibold">$280</span>
                </p>
              </div>
            </div>
          </div>
        </section>
        <Divider />
        <section aria-labelledby="cost-spend-control">
          <form>
            <div className="grid grid-cols-1 gap-x-14 gap-y-8 md:grid-cols-3">
              <div>
                <h2
                  id="cost-spend-control"
                  className="scroll-mt-10 font-semibold text-gray-900 dark:text-gray-50 font-heading"
                >
                  Cost spend control
                </h2>
                <p className="mt-1 text-sm leading-6 text-gray-500">
                  Set hard caps for on-demand charges.
                </p>
              </div>
              <div className="md:col-span-2">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-4">
                    <ProgressCircle
                      value={isSpendMgmtEnabled ? 62.2 : 0}
                      radius={20}
                      strokeWidth={4.5}
                    />
                    <div>
                      {isSpendMgmtEnabled ? (
                        <>
                          <p className="text-sm font-medium text-gray-900 dark:text-gray-50">
                            &#36;280 / 350 (62.2&#37;)
                          </p>
                          <Label
                            htmlFor="spend-mgmt"
                            className="text-gray-500 dark:text-gray-500"
                          >
                            Spend management enabled
                          </Label>
                        </>
                      ) : (
                        <>
                          <p className="text-sm font-medium text-gray-900 dark:text-gray-50">
                            &#36;0 / 0 (0&#37;)
                          </p>
                          <Label
                            htmlFor="spend-mgmt"
                            className="text-gray-500 dark:text-gray-500"
                          >
                            Spend management disabled
                          </Label>
                        </>
                      )}
                    </div>
                  </div>
                  <Switch
                    id="spend-mgmt"
                    name="spend-mgmt"
                    checked={isSpendMgmtEnabled}
                    onCheckedChange={() => {
                      setIsSpendMgmtEnabled(!isSpendMgmtEnabled)
                    }}
                  />
                </div>
                <div
                  className={cx(
                    "transform-gpu transition-all ease-[cubic-bezier(0.16,1,0.3,1.03)] will-change-transform",
                    isSpendMgmtEnabled ? "h-52 md:h-32" : "h-0",
                  )}
                  style={{
                    transitionDuration: "300ms",
                    animationFillMode: "backwards",
                  }}
                >
                  <div
                    className={cx(
                      "animate-slideDownAndFade transition",
                      isSpendMgmtEnabled ? "" : "hidden",
                    )}
                    style={{
                      animationDelay: "100ms",
                      animationDuration: "300ms",
                      transitionDuration: "300ms",
                      animationFillMode: "backwards",
                    }}
                  >
                    <div className="mt-8 grid grid-cols-1 gap-4 md:grid-cols-3">
                      <div className="md:col-span-1">
                        <Label className="font-medium">Set amount ($)</Label>
                        <Input
                          id="hard-cap"
                          name="hard-cap"
                          defaultValue={350}
                          type="number"
                          className="mt-2"
                        />
                      </div>
                      <div className="md:col-span-2">
                        <Label className="font-medium">
                          Provide email for notifications
                        </Label>
                        <Input
                          id="email"
                          name="email"
                          placeholder="admin@company.com"
                          type="email"
                          className="mt-2"
                        />
                      </div>
                    </div>
                    <div className="mt-6 flex justify-end">
                      <Button type="submit">Update</Button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </form>
        </section>
        <Divider />
        <section aria-labelledby="add-ons">
          <form>
            <div className="grid grid-cols-1 gap-x-14 gap-y-8 md:grid-cols-3">
              <div>
                <h2
                  id="add-ons"
                  className="scroll-mt-10 font-semibold text-gray-900 dark:text-gray-50 font-heading"
                >
                  Add-Ons
                </h2>
                <p className="mt-1 text-sm leading-6 text-gray-500">
                  Additional services to boost your services.
                </p>
              </div>
              <div className="space-y-6 md:col-span-2">
                <Card className="overflow-hidden p-0">
                  <div className="px-4 pb-6 pt-4">
                    <span className="text-sm text-gray-500">$25/month</span>
                    <h4 className="mt-4 text-sm font-semibold text-gray-900 dark:text-gray-50 font-heading">
                      Advanced bot protection
                    </h4>
                    <p className="mt-2 max-w-xl text-sm leading-6 text-gray-500">
                      Safeguard your assets with our cutting-edge bot
                      protection. Our AI solution identifies and mitigates
                      automated traffic to protect your workspace from bad bots.
                    </p>
                  </div>
                  <div className="flex items-center justify-between border-t border-gray-200 bg-gray-50 p-4 dark:border-gray-900 dark:bg-gray-900">
                    <div className="flex items-center gap-3">
                      <Switch id="bot-protection" name="bot-protection" />
                      <Label htmlFor="bot-protection">Activate</Label>
                    </div>
                    <a
                      href="#"
                      className="inline-flex items-center gap-1 text-sm text-indigo-600 dark:text-indigo-500"
                    >
                      Learn more
                      <RiArrowRightUpLine
                        className="size-4 shrink-0"
                        aria-hidden="true"
                      />
                    </a>
                  </div>
                </Card>
                <Card className="overflow-hidden p-0">
                  <div className="px-4 pb-6 pt-4">
                    <span className="text-sm text-gray-500">$50/month</span>
                    <h4 className="mt-4 text-sm font-semibold text-gray-900 dark:text-gray-50 font-heading">
                      Workspace insights
                    </h4>
                    <p className="mt-2 max-w-xl text-sm leading-6 text-gray-500">
                      Real-time analysis of your workspace&#39;s usage, enabling
                      you to make well-informed decisions for optimization.
                    </p>
                  </div>
                  <div className="flex items-center justify-between border-t border-gray-200 bg-gray-50 p-4 dark:border-gray-900 dark:bg-gray-900">
                    <div className="flex items-center gap-3">
                      <Switch id="insights" name="insights" />
                      <Label htmlFor="insights">Activate</Label>
                    </div>
                    <a
                      href="#"
                      className="inline-flex items-center gap-1 text-sm text-indigo-600 dark:text-indigo-500"
                    >
                      Learn more
                      <RiArrowRightUpLine
                        className="size-4 shrink-0"
                        aria-hidden="true"
                      />
                    </a>
                  </div>
                </Card>
              </div>
            </div>
          </form>
        </section>
      </div>
    </>
  )
}

================
File: src/app/settings/general/page.tsx
================
"use client"
import { Button } from "@/components/Button"
import { Card } from "@/components/Card"
import { Checkbox } from "@/components/Checkbox"
import { Divider } from "@/components/Divider"
import { Input } from "@/components/Input"
import { Label } from "@/components/Label"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/Select"
import { RiExternalLinkLine } from "@remixicon/react"

import { roles } from "@/data/data"

export default function General() {
  return (
    <>
      <div className="space-y-10">
        <section aria-labelledby="personal-information">
          <form>
            <div className="grid grid-cols-1 gap-x-14 gap-y-8 md:grid-cols-3">
              <div>
                <h2
                  id="personal-information"
                  className="scroll-mt-10 font-semibold text-gray-900 dark:text-gray-50 font-heading"
                >
                  Personal information
                </h2>
                <p className="mt-1 text-sm leading-6 text-gray-500">
                  Manage your personal information and role.
                </p>
              </div>
              <div className="md:col-span-2">
                <div className="grid grid-cols-1 gap-4 sm:grid-cols-6">
                  <div className="col-span-full sm:col-span-3">
                    <Label htmlFor="first-name" className="font-medium">
                      First name
                    </Label>
                    <Input
                      type="text"
                      id="first-name"
                      name="first-name"
                      autoComplete="given-name"
                      placeholder="Emma"
                      className="mt-2"
                    />
                  </div>
                  <div className="col-span-full sm:col-span-3">
                    <Label htmlFor="last-name" className="font-medium">
                      Last name
                    </Label>
                    <Input
                      type="text"
                      id="last-name"
                      name="last-name"
                      autoComplete="family-name"
                      placeholder="Stone"
                      className="mt-2"
                    />
                  </div>
                  <div className="col-span-full">
                    <Label htmlFor="email" className="font-medium">
                      Email
                    </Label>
                    <Input
                      type="email"
                      id="email"
                      name="email"
                      autoComplete="email"
                      placeholder="emma@acme.com"
                      className="mt-2"
                    />
                  </div>
                  <div className="col-span-full sm:col-span-3">
                    <Label htmlFor="year" className="font-medium">
                      Birth year
                    </Label>
                    <Input
                      autoComplete="off"
                      id="birthyear"
                      name="year"
                      type="number"
                      placeholder="1994"
                      enableStepper={false}
                      className="mt-2"
                      min="1900"
                      max={new Date().getFullYear()}
                      step="1"
                    />
                  </div>
                  <div className="col-span-full sm:col-span-3">
                    <Label htmlFor="email" className="font-medium">
                      Role
                    </Label>
                    <Select defaultValue="member">
                      <SelectTrigger
                        name="role"
                        id="role"
                        className="mt-2"
                        disabled
                      >
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {roles.map((role) => (
                          <SelectItem key={role.value} value={role.value}>
                            {role.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <p className="mt-2 text-xs text-gray-500">
                      Roles can only be changed by system admin.
                    </p>
                  </div>
                  <div className="col-span-full mt-6 flex justify-end">
                    <Button type="submit">Save settings</Button>
                  </div>
                </div>
              </div>
            </div>
          </form>
        </section>
        <Divider />
        <section aria-labelledby="notification-settings">
          <form>
            <div className="grid grid-cols-1 gap-x-14 gap-y-8 md:grid-cols-3">
              <div>
                <h2
                  id="notification-settings"
                  className="scroll-mt-10 font-semibold text-gray-900 dark:text-gray-50 font-heading"
                >
                  Notification settings
                </h2>
                <p className="mt-1 text-sm leading-6 text-gray-500">
                  Configure the types of notifications you want to receive.
                </p>
              </div>
              <div className="md:col-span-2">
                <fieldset>
                  <legend className="text-sm font-medium text-gray-900 dark:text-gray-50 font-heading">
                    Team
                  </legend>
                  <p className="mt-1 text-sm leading-6 text-gray-500">
                    Configure the types of team alerts you want to receive.
                  </p>
                  <ul
                    role="list"
                    className="mt-4 divide-y divide-gray-200 dark:divide-gray-800"
                  >
                    <li className="flex items-center gap-x-3 py-3">
                      <Checkbox
                        id="team-requests"
                        name="team-requests"
                        defaultChecked
                      />
                      <Label htmlFor="team-requests">Team join requests</Label>
                    </li>
                    <li className="flex items-center gap-x-3 py-3">
                      <Checkbox id="team-activity-digest" />
                      <Label htmlFor="team-activity-digest">
                        Weekly team activity digest
                      </Label>
                    </li>
                  </ul>
                </fieldset>
                <fieldset className="mt-6">
                  <legend className="text-sm font-medium text-gray-900 dark:text-gray-50 font-heading">
                    Usage
                  </legend>
                  <p className="mt-1 text-sm leading-6 text-gray-500">
                    Configure the types of usage alerts you want to receive.
                  </p>
                  <ul
                    role="list"
                    className="mt-4 divide-y divide-gray-200 dark:divide-gray-800"
                  >
                    <li className="flex items-center gap-x-3 py-3">
                      <Checkbox id="api-requests" name="api-requests" />
                      <Label htmlFor="api-requests">API incidents</Label>
                    </li>
                    <li className="flex items-center gap-x-3 py-3">
                      <Checkbox
                        id="workspace-execution"
                        name="workspace-execution"
                      />
                      <Label htmlFor="workspace-execution">
                        Platform incidents
                      </Label>
                    </li>
                    <li className="flex items-center gap-x-3 py-3">
                      <Checkbox
                        id="query-caching"
                        name="query-caching"
                        defaultChecked
                      />
                      <Label htmlFor="query-caching">
                        Payment transactions
                      </Label>
                    </li>
                    <li className="flex items-center gap-x-3 py-3">
                      <Checkbox id="storage" name="storage" defaultChecked />
                      <Label htmlFor="storage">User behavior</Label>
                    </li>
                  </ul>
                </fieldset>
                <div className="col-span-full mt-6 flex justify-end">
                  <Button type="submit">Save settings</Button>
                </div>
              </div>
            </div>
          </form>
        </section>
        <Divider />
        <section aria-labelledby="danger-zone">
          <form>
            <div className="grid grid-cols-1 gap-x-14 gap-y-8 md:grid-cols-3">
              <div>
                <h2
                  id="danger-zone"
                  className="scroll-mt-10 font-semibold text-gray-900 dark:text-gray-50 font-heading"
                >
                  Danger zone
                </h2>
                <p className="mt-1 text-sm leading-6 text-gray-500">
                  Manage general workspace. Contact system admin for more
                  information.{" "}
                  <a
                    href="#"
                    className="inline-flex items-center gap-1 text-indigo-600 hover:underline hover:underline-offset-4 dark:text-indigo-400"
                  >
                    Learn more
                    <RiExternalLinkLine
                      className="size-4 shrink-0"
                      aria-hidden="true"
                    />
                  </a>
                </p>
              </div>
              <div className="space-y-6 md:col-span-2">
                <Card className="p-4">
                  <div className="flex items-start justify-between gap-10">
                    <div>
                      <h4 className="text-sm font-medium text-gray-900 dark:text-gray-50 font-heading">
                        Leave workspace
                      </h4>
                      <p className="mt-2 text-sm leading-6 text-gray-500">
                        Revoke your access to this team. Other people you have
                        added to the workspace will remain.
                      </p>
                    </div>
                    <Button
                      variant="secondary"
                      className="text-red-600 dark:text-red-500"
                    >
                      Leave
                    </Button>
                  </div>
                </Card>
                <Card className="overflow-hidden p-0">
                  <div className="flex items-start justify-between gap-10 p-4">
                    <div>
                      <h4 className="text-sm font-medium text-gray-400 dark:text-gray-600 font-heading">
                        Delete workspace
                      </h4>
                      <p className="mt-2 text-sm leading-6 text-gray-400 dark:text-gray-600">
                        Revoke your access to this team. Other people you have
                        added to the workspace will remain.
                      </p>
                    </div>
                    <Button
                      variant="secondary"
                      disabled
                      className="whitespace-nowrap text-red-600 disabled:text-red-300 disabled:opacity-50 dark:text-red-500 disabled:dark:text-red-700"
                    >
                      Delete workspace
                    </Button>
                  </div>
                  <div className="border-t border-gray-200 bg-gray-50 p-4 dark:border-gray-900 dark:bg-gray-900">
                    <p className="text-sm text-gray-500">
                      You cannot delete the workspace because you are not the
                      system admin.
                    </p>
                  </div>
                </Card>
              </div>
            </div>
          </form>
        </section>
      </div>
    </>
  )
}

================
File: src/app/settings/users/page.tsx
================
"use client"

import { Button } from "@/components/Button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/Dropdown"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/Select"
import { Tooltip } from "@/components/Tooltip"
import { ModalAddUser } from "@/components/ui/settings/ModalAddUser"
import { invitedUsers, roles, users } from "@/data/data"
import { RiAddLine, RiMore2Fill } from "@remixicon/react"

export default function Users() {
  return (
    <>
      <section aria-labelledby="existing-users">
        <div className="sm:flex sm:items-center sm:justify-between">
          <div>
            <h3
              id="existing-users"
              className="scroll-mt-10 font-semibold text-gray-900 dark:text-gray-50"
            >
              Users
            </h3>
            <p className="text-sm leading-6 text-gray-500">
              Workspace administrators can add, manage, and remove users.
            </p>
          </div>
          <ModalAddUser>
            <Button className="mt-4 w-full gap-2 sm:mt-0 sm:w-fit">
              <RiAddLine className="-ml-1 size-4 shrink-0" aria-hidden="true" />
              Add user
            </Button>
          </ModalAddUser>
        </div>
        <ul
          role="list"
          className="mt-6 divide-y divide-gray-200 dark:divide-gray-800"
        >
          {users.map((user) => (
            <li
              key={user.name}
              className="flex items-center justify-between gap-x-6 py-2.5"
            >
              <div className="flex items-center gap-x-4 truncate">
                <span
                  className="hidden size-9 shrink-0 items-center justify-center rounded-full border border-gray-300 bg-white text-xs text-gray-700 sm:flex dark:border-gray-800 dark:bg-gray-950 dark:text-gray-300"
                  aria-hidden="true"
                >
                  {user.initials}
                </span>
                <div className="truncate">
                  <p className="truncate text-sm font-medium text-gray-900 dark:text-gray-50">
                    {user.name}
                  </p>
                  <p className="truncate text-xs text-gray-500">{user.email}</p>
                </div>
              </div>
              <div className="flex items-center gap-2">
                {user.role === "admin" ? (
                  <Tooltip
                    content="A workspace must have at least one admin"
                    className="max-w-44 text-xs"
                    sideOffset={5}
                    triggerAsChild={true}
                  >
                    <div>
                      <Select
                        defaultValue={user.role}
                        disabled={user.role === "admin"}
                      >
                        <SelectTrigger className="h-8 w-32">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent align="end">
                          {roles.map((role) => (
                            <SelectItem
                              key={role.value}
                              value={role.value}
                              disabled={role.value === "admin"}
                            >
                              {role.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  </Tooltip>
                ) : (
                  <Select
                    defaultValue={user.role}
                    disabled={user.role === "admin"}
                  >
                    <SelectTrigger className="h-8 w-32">
                      <SelectValue placeholder="Select" />
                    </SelectTrigger>
                    <SelectContent align="end">
                      {roles.map((role) => (
                        <SelectItem
                          key={role.value}
                          value={role.value}
                          disabled={role.value === "admin"}
                        >
                          {role.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                )}
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button
                      variant="ghost"
                      className="group size-8 hover:border hover:border-gray-300 hover:bg-gray-50 data-[state=open]:border-gray-300 data-[state=open]:bg-gray-50 hover:dark:border-gray-700 hover:dark:bg-gray-900 data-[state=open]:dark:border-gray-700 data-[state=open]:dark:bg-gray-900"
                    >
                      <RiMore2Fill
                        className="size-4 shrink-0 text-gray-500 group-hover:text-gray-700 group-hover:dark:text-gray-400"
                        aria-hidden="true"
                      />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end" className="w-36">
                    <DropdownMenuItem disabled={user.role === "admin"}>
                      View details
                    </DropdownMenuItem>
                    <DropdownMenuItem
                      className="text-red-600 dark:text-red-500"
                      disabled={user.role === "admin"}
                    >
                      Delete
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>
            </li>
          ))}
        </ul>
      </section>
      <section className="mt-12" aria-labelledby="pending-invitations">
        <h2
          id="pending-invitations"
          className="scroll-mt-10 font-semibold text-gray-900 dark:text-gray-50"
        >
          Pending invitations
        </h2>
        <ul
          role="list"
          className="mt-6 divide-y divide-gray-200 dark:divide-gray-800"
        >
          {invitedUsers.map((user) => (
            <li
              key={user.initials}
              className="flex items-center justify-between gap-x-6 py-2.5"
            >
              <div className="flex items-center gap-x-4">
                <span
                  className="hidden size-9 shrink-0 items-center justify-center rounded-full border border-dashed border-gray-300 bg-white text-xs text-gray-700 sm:flex dark:border-gray-800 dark:bg-gray-950 dark:text-gray-300"
                  aria-hidden="true"
                >
                  {user.initials}
                </span>
                <div>
                  <p className="text-sm font-medium text-gray-900 dark:text-gray-50">
                    {user.email}
                  </p>
                  <p className="text-xs text-gray-500">
                    Expires in {user.expires} days
                  </p>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <Select defaultValue={user.role}>
                  <SelectTrigger className="h-8 w-32">
                    <SelectValue placeholder="Select" />
                  </SelectTrigger>
                  <SelectContent align="end">
                    {roles.map((role) => (
                      <SelectItem
                        key={role.value}
                        value={role.value}
                        disabled={role.value === "admin"}
                      >
                        {role.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button
                      variant="ghost"
                      className="group size-8 hover:border hover:border-gray-300 hover:bg-gray-50 data-[state=open]:border-gray-300 data-[state=open]:bg-gray-50 hover:dark:border-gray-700 hover:dark:bg-gray-900 data-[state=open]:dark:border-gray-700 data-[state=open]:dark:bg-gray-900"
                    >
                      <RiMore2Fill
                        className="size-4 shrink-0 text-gray-500 group-hover:text-gray-700 group-hover:dark:text-gray-400"
                        aria-hidden="true"
                      />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end" className="w-36">
                    <DropdownMenuItem
                      className="text-red-600 dark:text-red-500"
                      disabled={user.role === "admin"}
                    >
                      Revoke invitation
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>
            </li>
          ))}
        </ul>
      </section>
    </>
  )
}

================
File: src/app/settings/layout.tsx
================
"use client"

import { siteConfig } from "@/app/siteConfig"
import { TabNavigation, TabNavigationLink } from "@/components/TabNavigation"
import Link from "next/link"
import { usePathname } from "next/navigation"

const navigationSettings = [
  { name: "General", href: siteConfig.baseLinks.settings.general },
  { name: "Billing & Usage", href: siteConfig.baseLinks.settings.billing },
  { name: "Users", href: siteConfig.baseLinks.settings.users },
]

export default function Layout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  const pathname = usePathname()
  return (
    <div className="p-4 sm:px-6 sm:pb-10 sm:pt-10 lg:px-10 lg:pt-7">
      <h1 className="text-lg font-semibold text-gray-900 sm:text-xl dark:text-gray-50">
        Settings
      </h1>
      <TabNavigation className="mt-4 sm:mt-6 lg:mt-10">
        {navigationSettings.map((item) => (
          <TabNavigationLink
            key={item.name}
            asChild
            active={pathname === item.href}
          >
            <Link href={item.href}>{item.name}</Link>
          </TabNavigationLink>
        ))}
      </TabNavigation>
      <div className="pt-6">{children}</div>
    </div>
  )
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: src/app/layout.tsx
================
import type { Metadata } from "next";
import { ThemeProvider } from "next-themes";
import localFont from "next/font/local";
import "./globals.css";
import { siteConfig } from "./siteConfig"; // Assuming this file exists and is configured

import { Sidebar } from "@/components/ui/navigation/Sidebar"; // Assuming this component exists

const colfax = localFont({
  src: [
    {
      // Corrected path based on your 'ls' output
      path: '../fonts/ColfaxWebRegular-ffe8279204a8eb350c1a8320336a8e1a.woff2',
      weight: '400',
      style: 'normal',
    },
    {
      // This path was already correct
      path: '../fonts/ColfaxWebMedium-5cd963f45f4bd8647a4e41a58ca9c4d3.woff2',
      weight: '500',
      style: 'normal',
    },
  ],
  display: "swap",
  variable: "--font-colfax", // Keep this if you plan to use the CSS variable elsewhere, otherwise optional
})

const barlow = localFont({
  src: [
    {
      path: '../fonts/barlow-latin-400-normal-7fa387951673abf164b13dd1b45c70e3.woff2',
      weight: '400',
      style: 'normal',
    },
    {
      path: '../fonts/barlow-latin-500-normal-50adbbfa3bfe480bf4246ff5bad7ad06.woff2',
      weight: '500',
      style: 'normal',
    },
    {
      path: '../fonts/barlow-latin-700-normal-dd5b2912dbf896310865c1e9ac85ab41.woff2',
      weight: '700',
      style: 'normal',
    },
  ],
  display: "swap",
  variable: "--font-barlow",
})

// Create a CSS class to enforce uppercase on the Barlow font
const barlowUppercaseStyles = `
  .font-heading, :root [style*="var(--font-barlow)"] {
    text-transform: uppercase !important;
  }
`

// Remember to replace placeholder values below
export const metadata: Metadata = {
  metadataBase: new URL("https://yoururl.com"), // Replace with your actual URL
  title: siteConfig.name, // Ensure siteConfig provides a 'name'
  description: siteConfig.description, // Ensure siteConfig provides a 'description'
  keywords: [],
  authors: [
    {
      name: "yourname", // Replace with your name
      url: "", // Optionally add your URL
    },
  ],
  creator: "yourname", // Replace with your name
  openGraph: {
    type: "website",
    locale: "en_US",
    url: siteConfig.url, // Ensure siteConfig provides a 'url'
    title: siteConfig.name,
    description: siteConfig.description,
    siteName: siteConfig.name,
  },
  icons: {
    icon: "/favicon.ico", // Ensure favicon.ico exists in the /public folder
  },
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <style dangerouslySetInnerHTML={{ __html: barlowUppercaseStyles }} />
      </head>
      {/* Using colfax.className is fine even if 'variable' is defined.
          If you prefer the variable approach, remove colfax.className here
          and set `font-family: var(--font-colfax)` in your globals.css */}
      <body
        className={`${colfax.className} ${barlow.variable} overflow-y-scroll scroll-auto antialiased selection:bg-indigo-100 selection:text-indigo-700 dark:bg-gray-950`}
        suppressHydrationWarning // Good practice with next-themes
      >
        <div className="mx-auto max-w-screen-2xl">
          {/* ThemeProvider wraps the part of the UI that needs theme toggling */}
          <ThemeProvider defaultTheme="system" attribute="class">
            <Sidebar />
            {/* Ensure main content area accounts for sidebar width */}
            <main className="lg:pl-72">{children}</main>
          </ThemeProvider>
        </div>
      </body>
    </html>
  )
}

================
File: src/app/not-found.tsx
================
import { Button } from "@/components/Button"
import { ArrowAnimated } from "@/components/ui/icons/ArrowAnimated"
import Link from "next/link"
import { DatabaseLogo } from "../../public/DatabaseLogo"
import { siteConfig } from "./siteConfig"

export default function NotFound() {
  return (
    <div className="flex h-screen flex-col items-center justify-center">
      <Link href={siteConfig.baseLinks.home}>
        <DatabaseLogo className="mt-6 h-10" />
      </Link>
      <p className="mt-6 text-4xl font-semibold text-indigo-600 sm:text-5xl dark:text-indigo-500">
        404
      </p>
      <h1 className="mt-4 text-2xl font-semibold text-gray-900 dark:text-gray-50">
        Page not found
      </h1>
      <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">
        Sorry, we couldn’t find the page you’re looking for.
      </p>
      <Button asChild className="group mt-8" variant="light">
        <Link href={siteConfig.baseLinks.home}>
          Go to the home page
          <ArrowAnimated
            className="stroke-gray-900 dark:stroke-gray-50"
            aria-hidden="true"
          />
        </Link>
      </Button>
    </div>
  )
}

================
File: src/app/siteConfig.ts
================
export const siteConfig = {
  name: "Dashboard",
  url: "https://dashboard.tremor.so",
  description: "The only dashboard you will ever need.",
  baseLinks: {
    home: "/",
    overview: "/overview",
    airQuality: "/air-quality",
    details: "/details",
    settings: {
      general: "/settings/general",
      billing: "/settings/billing",
      users: "/settings/users",
    },
  },
}

export type siteConfig = typeof siteConfig

================
File: src/components/ui/air-quality/AirQualityChartCard.tsx
================
import { PeriodValue } from "@/app/(main)/air-quality/page"
import { Badge } from "@/components/Badge"
import { LineChart } from "@/components/LineChart"
import { airQualityData } from "@/data/air-quality-data"
import { AirQualityData } from "@/data/schema"
import { cx, percentageFormatter } from "@/lib/utils"
import {
    eachDayOfInterval,
    formatDate,
    interval,
    isWithinInterval,
} from "date-fns"
import { DateRange } from "react-day-picker"
import { getPeriod } from "../overview/DashboardFilterbar"

export type CardProps = {
    title: keyof AirQualityData
    type: "level" | "temperature" | "percent" | "pressure"
    selectedDates: DateRange | undefined
    selectedPeriod: PeriodValue
    isThumbnail?: boolean
}

// Custom formatting for different air quality metric types
const formattingMap = {
    level: (value: number) => `${value}`,
    temperature: (value: number) => `${value}°C`,
    percent: (value: number) => `${value}%`,
    pressure: (value: number) => `${value} hPa`,
}


export const getBadgeType = (value: number) => {
    if (value > 0) {
        return "success"
    } else if (value < 0) {
        if (value < -50) {
            return "warning"
        }
        return "error"
    } else {
        return "neutral"
    }
}

export function AirQualityChartCard({
    title,
    type,
    selectedDates,
    selectedPeriod,
    isThumbnail,
}: CardProps) {
    const formatter = formattingMap[type]
    const selectedDatesInterval =
        selectedDates?.from && selectedDates?.to
            ? interval(selectedDates.from, selectedDates.to)
            : null
    const allDatesInInterval =
        selectedDates?.from && selectedDates?.to
            ? eachDayOfInterval(interval(selectedDates.from, selectedDates.to))
            : null
    const prevDates = getPeriod(selectedDates, selectedPeriod)

    const prevDatesInterval =
        prevDates?.from && prevDates?.to
            ? interval(prevDates.from, prevDates.to)
            : null

    const data = airQualityData
        .filter((reading) => {
            if (selectedDatesInterval) {
                return isWithinInterval(new Date(reading.date), selectedDatesInterval)
            }
            return true
        })
        .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())

    const prevData = airQualityData
        .filter((reading) => {
            if (prevDatesInterval) {
                return isWithinInterval(new Date(reading.date), prevDatesInterval)
            }
            return false
        })
        .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())

    const chartData = allDatesInInterval
        ?.map((date, index) => {
            const dateStr = formatDate(date, "yyyy-MM-dd")
            const reading = data.find(d => d.date === dateStr)
            const prevReading = prevData[index]
            const value = reading ? reading[title] : null
            const previousValue = prevReading ? prevReading[title] : null

            return {
                title,
                date: date,
                formattedDate: formatDate(date, "dd/MM/yyyy"),
                value,
                previousDate: prevReading?.date,
                previousFormattedDate: prevReading
                    ? formatDate(new Date(prevReading.date), "dd/MM/yyyy")
                    : null,
                previousValue:
                    selectedPeriod !== "no-comparison" ? previousValue : null,
                evolution:
                    selectedPeriod !== "no-comparison" && typeof value === 'number' && typeof previousValue === 'number'
                        ? (value - previousValue) / previousValue
                        : undefined,
            }
        })
        .filter(item => item.value !== null)
        .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())

    const categories =
        selectedPeriod === "no-comparison" ? ["value"] : ["value", "previousValue"]

    // Get average value for the selected period
    const value =
        chartData && chartData.length > 0
            ? chartData.reduce((acc, item) => acc + (Number(item.value) || 0), 0) / chartData.length
            : 0

    const previousValue =
        chartData && chartData.length > 0 && selectedPeriod !== "no-comparison"
            ? chartData.reduce((acc, item) => acc + (Number(item.previousValue) || 0), 0) / chartData.length
            : 0

    const evolution =
        selectedPeriod !== "no-comparison" && previousValue !== 0
            ? (value - previousValue) / previousValue
            : 0

    // Colors based on metric type
    const chartColor = type === "level" ? "pink" :
        type === "temperature" ? "amber" :
            type === "percent" ? "blue" : "indigo"

    return (
        <div className={cx("transition rounded-xl border border-gray-200 p-6 dark:border-gray-800")}>
            <div className="flex items-center justify-between gap-x-2">
                <div className="flex items-center gap-x-2">
                    <dt className="font-bold text-gray-900 sm:text-sm dark:text-gray-50 font-heading">
                        {title}
                    </dt>
                    {selectedPeriod !== "no-comparison" && (
                        <Badge variant={getBadgeType(evolution)}>
                            {percentageFormatter(evolution)}
                        </Badge>
                    )}
                </div>
            </div>
            <div className="mt-2 flex items-baseline justify-between">
                <dd className="text-xl text-gray-900 dark:text-gray-50">
                    {formatter(value)}
                </dd>
                {selectedPeriod !== "no-comparison" && (
                    <dd className="text-sm text-gray-500">
                        from {formatter(previousValue)}
                    </dd>
                )}
            </div>
            <LineChart
                className="mt-4 h-40"
                data={chartData || []}
                index="formattedDate"
                colors={[chartColor, "gray"]}
                startEndOnly={true}
                valueFormatter={(value) => formatter(value as number)}
                showYAxis={true}
                showLegend={false}
                categories={categories}
                showTooltip={isThumbnail ? false : true}
                autoMinValue
            />
        </div>
    )
}

================
File: src/components/ui/air-quality/AirQualityGaugeCard.tsx
================
import { SensorReading } from "@/app/(main)/air-quality/page"
import { cx } from "@/lib/utils"

export type CardProps = {
    title: string
    value: string
    valueDescription: string
    ctaDescription: string
    ctaText: string
    ctaLink: string
    data: SensorReading[]
}

// Color mapping based on air quality status
const statusColors = {
    normal: "bg-green-500",
    warning: "bg-yellow-500",
    critical: "bg-red-500",
}

const statusTextColors = {
    normal: "text-green-500 dark:text-green-400",
    warning: "text-yellow-500 dark:text-yellow-400",
    critical: "text-red-500 dark:text-red-400",
}

export function AirQualityGaugeCard({
    title,
    value,
    valueDescription,
    ctaDescription,
    ctaText,
    ctaLink,
    data,
}: CardProps) {
    return (
        <div className="rounded-xl border border-gray-200 p-6 dark:border-gray-800">
            <div className="flex flex-col justify-between h-full">
                <div>
                    <div className="flex items-center gap-2">
                        <dt className="font-bold text-gray-900 sm:text-sm dark:text-gray-50 font-heading">
                            {title}
                        </dt>
                    </div>
                    <dd className="mt-2 flex items-baseline gap-2">
                        <span className="text-xl text-gray-900 dark:text-gray-50">
                            {value}
                        </span>
                        <span className="text-sm text-gray-500">{valueDescription}</span>
                    </dd>
                    <ul role="list" className="mt-6 space-y-4">
                        {data.map((item) => (
                            <li key={item.title} className="relative">
                                <div className="flex items-center justify-between mb-2">
                                    <span className="text-sm font-medium text-gray-900 dark:text-gray-50">
                                        {item.title}
                                    </span>
                                    <div className="flex items-center gap-2">
                                        <span className={cx("h-2 w-2 rounded-full", statusColors[item.status])}></span>
                                        <span className={cx("text-sm font-medium", statusTextColors[item.status])}>
                                            {item.value}{item.unit}
                                        </span>
                                    </div>
                                </div>

                                {/* Gauge visualization */}
                                <div className="h-2 w-full bg-gray-200 rounded-full overflow-hidden dark:bg-gray-800">
                                    <div
                                        className={cx(
                                            "h-full rounded-full transition-all duration-500",
                                            item.status === "normal" ? "bg-green-500" :
                                                item.status === "warning" ? "bg-yellow-500" : "bg-red-500"
                                        )}
                                        style={{
                                            width: `${
                                                // Calculate width based on reading type
                                                item.title === "CO2"
                                                    ? Math.min(100, (item.value / 1500) * 100)
                                                    : item.title === "Temperature"
                                                        ? Math.min(100, ((item.value - 15) / 15) * 100)
                                                        : item.title === "Humidity"
                                                            ? Math.min(100, (item.value / 100) * 100)
                                                            : 50 // Default fallback
                                                }%`
                                        }}
                                    ></div>
                                </div>

                                {/* Gauge ticks */}
                                <div className="flex justify-between mt-1 px-1">
                                    {item.title === "CO2" && (
                                        <>
                                            <span className="text-xs text-gray-500">400</span>
                                            <span className="text-xs text-gray-500">700</span>
                                            <span className="text-xs text-gray-500">1000</span>
                                            <span className="text-xs text-gray-500">1500+</span>
                                        </>
                                    )}
                                    {item.title === "Temperature" && (
                                        <>
                                            <span className="text-xs text-gray-500">15°C</span>
                                            <span className="text-xs text-gray-500">20°C</span>
                                            <span className="text-xs text-gray-500">25°C</span>
                                            <span className="text-xs text-gray-500">30°C</span>
                                        </>
                                    )}
                                    {item.title === "Humidity" && (
                                        <>
                                            <span className="text-xs text-gray-500">0%</span>
                                            <span className="text-xs text-gray-500">30%</span>
                                            <span className="text-xs text-gray-500">60%</span>
                                            <span className="text-xs text-gray-500">100%</span>
                                        </>
                                    )}
                                    {item.title === "Living Room" && (
                                        <>
                                            <span className="text-xs text-gray-500">400</span>
                                            <span className="text-xs text-gray-500">700</span>
                                            <span className="text-xs text-gray-500">1000</span>
                                            <span className="text-xs text-gray-500">1500+</span>
                                        </>
                                    )}
                                    {item.title === "Bedroom" && (
                                        <>
                                            <span className="text-xs text-gray-500">400</span>
                                            <span className="text-xs text-gray-500">700</span>
                                            <span className="text-xs text-gray-500">1000</span>
                                            <span className="text-xs text-gray-500">1500+</span>
                                        </>
                                    )}
                                    {item.title === "Kitchen" && (
                                        <>
                                            <span className="text-xs text-gray-500">400</span>
                                            <span className="text-xs text-gray-500">700</span>
                                            <span className="text-xs text-gray-500">1000</span>
                                            <span className="text-xs text-gray-500">1500+</span>
                                        </>
                                    )}
                                </div>
                            </li>
                        ))}
                    </ul>
                </div>
                <div>
                    <p className="mt-6 text-xs text-gray-500">
                        {ctaDescription}{" "}
                        <a href={ctaLink} className="text-indigo-600 dark:text-indigo-400">
                            {ctaText}
                        </a>
                    </p>
                </div>
            </div>
        </div>
    )
}

================
File: src/components/ui/air-quality/AirQualityHeatmapCard.tsx
================
import { hourlyData } from "@/data/air-quality-data"
import { cx } from "@/lib/utils"

export type HeatmapCardProps = {
    title: string
    subtitle: string
    description: string
}

// Color scale for CO2 levels
const getColorForValue = (value: number) => {
    if (value < 600) return "bg-green-100 dark:bg-green-900"
    if (value < 800) return "bg-green-300 dark:bg-green-700"
    if (value < 1000) return "bg-yellow-300 dark:bg-yellow-700"
    if (value < 1200) return "bg-orange-300 dark:bg-orange-700"
    return "bg-red-400 dark:bg-red-700"
}

// Get text color for value display
const getTextColorForValue = (value: number) => {
    if (value < 600) return "text-green-800 dark:text-green-200"
    if (value < 800) return "text-green-800 dark:text-green-200"
    if (value < 1000) return "text-yellow-800 dark:text-yellow-200"
    if (value < 1200) return "text-orange-800 dark:text-orange-200"
    return "text-red-800 dark:text-red-200"
}

// Hours to display on the x-axis
const hours = [0, 3, 6, 9, 12, 15, 18, 21]

// Filter to just get the first day of data for the week heatmap
const lastDay = hourlyData[hourlyData.length - 1]

export function AirQualityHeatmapCard({ title, subtitle, description }: HeatmapCardProps) {
    return (
        <div className="rounded-xl border border-gray-200 p-6 dark:border-gray-800">
            <div className="flex flex-col h-full">
                <div className="mb-4">
                    <h3 className="font-bold text-gray-900 sm:text-sm dark:text-gray-50 font-heading">
                        {title}
                    </h3>
                    <p className="mt-1 text-sm text-gray-500">{description}</p>
                </div>

                <div className="mt-2">
                    <p className="text-sm font-medium text-gray-900 dark:text-gray-50 font-heading mb-3">
                        {subtitle}
                    </p>

                    {/* Hour labels */}
                    <div className="flex mb-1">
                        <div className="w-12 mr-1 text-right">
                            <span className="text-xs text-gray-500">Hour</span>
                        </div>
                        <div className="flex flex-1 justify-between">
                            {hours.map(hour => (
                                <div key={hour} className="text-xs text-gray-500 w-6 text-center">
                                    {hour}
                                </div>
                            ))}
                        </div>
                    </div>

                    {/* Heatmap grid */}
                    <div className="flex mb-4 items-center">
                        <div className="w-12 mr-1 text-right">
                            <span className="text-xs text-gray-500 leading-relaxed">Today</span>
                        </div>
                        <div className="flex-1 grid grid-cols-24 gap-[1px]">
                            {lastDay.map((hourData, i) => (
                                <div
                                    key={i}
                                    className={cx(
                                        "aspect-square rounded-sm flex items-center justify-center relative group",
                                        getColorForValue(hourData.value)
                                    )}
                                >
                                    {/* Tooltip on hover */}
                                    <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-1 hidden group-hover:block z-10">
                                        <div className="bg-gray-900 text-white text-xs rounded p-1 whitespace-nowrap">
                                            {hourData.hour}:00 - {hourData.value} ppm
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>

                    {/* Legend */}
                    <div className="flex items-center justify-end mt-2 gap-3">
                        <div className="flex items-center">
                            <div className="w-3 h-3 rounded-sm bg-green-300 dark:bg-green-700 mr-1"></div>
                            <span className="text-xs text-gray-500">&lt;800</span>
                        </div>
                        <div className="flex items-center">
                            <div className="w-3 h-3 rounded-sm bg-yellow-300 dark:bg-yellow-700 mr-1"></div>
                            <span className="text-xs text-gray-500">&lt;1000</span>
                        </div>
                        <div className="flex items-center">
                            <div className="w-3 h-3 rounded-sm bg-orange-300 dark:bg-orange-700 mr-1"></div>
                            <span className="text-xs text-gray-500">&lt;1200</span>
                        </div>
                        <div className="flex items-center">
                            <div className="w-3 h-3 rounded-sm bg-red-400 dark:bg-red-700 mr-1"></div>
                            <span className="text-xs text-gray-500">&gt;1200</span>
                        </div>
                    </div>
                </div>

                {/* Weekly summary */}
                <div className="mt-auto pt-4">
                    <h4 className="text-xs font-medium text-gray-900 dark:text-gray-50 mb-2">
                        Weekly Pattern
                    </h4>
                    <div className="flex justify-between gap-1">
                        {hourlyData.map((dayData, i) => {
                            // Calculate average for the day
                            const sum = dayData.reduce((acc, hour) => acc + hour.value, 0);
                            const avg = Math.round(sum / dayData.length);

                            return (
                                <div key={i} className="flex flex-col items-center">
                                    <div className="text-xs text-gray-500 mb-1">{dayData[0].day}</div>
                                    <div className={cx(
                                        "h-5 w-8 rounded",
                                        getColorForValue(avg)
                                    )}>
                                        <span className={cx(
                                            "text-xs font-medium",
                                            getTextColorForValue(avg)
                                        )}>
                                            {avg}
                                        </span>
                                    </div>
                                </div>
                            );
                        })}
                    </div>
                </div>
            </div>
        </div>
    )
}

================
File: src/components/ui/data-table/columns.tsx
================
"use client"

import { Badge, BadgeProps } from "@/components/Badge"
import { Checkbox } from "@/components/Checkbox"
import { statuses } from "@/data/data"
import { Usage } from "@/data/schema"
import { formatters } from "@/lib/utils"
import { ColumnDef, createColumnHelper } from "@tanstack/react-table"
import { DataTableColumnHeader } from "./DataTableColumnHeader"
import { ConditionFilter } from "./DataTableFilter"
import { DataTableRowActions } from "./DataTableRowActions"

const columnHelper = createColumnHelper<Usage>()

export const columns = [
  columnHelper.display({
    id: "select",
    header: ({ table }) => (
      <Checkbox
        checked={
          table.getIsAllPageRowsSelected()
            ? true
            : table.getIsSomeRowsSelected()
              ? "indeterminate"
              : false
        }
        onCheckedChange={() => table.toggleAllPageRowsSelected()}
        className="translate-y-0.5"
        aria-label="Select all"
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={() => row.toggleSelected()}
        className="translate-y-0.5"
        aria-label="Select row"
      />
    ),
    enableSorting: false,
    enableHiding: false,
    meta: {
      displayName: "Select",
    },
  }),
  columnHelper.accessor("owner", {
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Owner" />
    ),
    enableSorting: true,
    enableHiding: false,
    meta: {
      className: "text-left",
      displayName: "Owner",
    },
  }),
  columnHelper.accessor("status", {
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Status" />
    ),
    enableSorting: true,
    meta: {
      className: "text-left",
      displayName: "Status",
    },
    cell: ({ row }) => {
      const status = statuses.find(
        (item) => item.value === row.getValue("status"),
      )

      if (!status) {
        return null
      }

      return (
        <Badge variant={status.variant as BadgeProps["variant"]}>
          {status.label}
        </Badge>
      )
    },
  }),
  columnHelper.accessor("region", {
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Region" />
    ),
    enableSorting: false,
    meta: {
      className: "text-left",
      displayName: "Region",
    },
    filterFn: "arrIncludesSome",
  }),
  columnHelper.accessor("stability", {
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Stability" />
    ),
    enableSorting: false,
    meta: {
      className: "text-left",
      displayName: "Stability",
    },
    cell: ({ getValue }) => {
      const value = getValue()

      function Indicator({ number }: { number: number }) {
        let category
        if (number === 0) {
          category = "zero"
        } else if (number < 9) {
          category = "bad"
        } else if (number >= 9 && number <= 15) {
          category = "ok"
        } else {
          category = "good"
        }

        const getBarClass = (index: number) => {
          if (category === "zero") {
            return "bg-gray-300 dark:bg-gray-800"
          } else if (category === "good") {
            return "bg-indigo-600 dark:bg-indigo-500"
          } else if (category === "ok" && index < 2) {
            return "bg-indigo-600 dark:bg-indigo-500"
          } else if (category === "bad" && index < 1) {
            return "bg-indigo-600 dark:bg-indigo-500"
          }
          return "bg-gray-300 dark:bg-gray-800"
        }

        return (
          <div className="flex gap-0.5">
            <div className={`h-3.5 w-1 rounded-sm ${getBarClass(0)}`} />
            <div className={`h-3.5 w-1 rounded-sm ${getBarClass(1)}`} />
            <div className={`h-3.5 w-1 rounded-sm ${getBarClass(2)}`} />
          </div>
        )
      }

      return (
        <div className="flex items-center gap-0.5">
          <span className="w-6">{value}</span>
          <Indicator number={value} />
        </div>
      )
    },
  }),
  columnHelper.accessor("costs", {
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Costs" />
    ),
    enableSorting: true,
    meta: {
      className: "text-right",
      displayName: "Costs",
    },
    cell: ({ getValue }) => {
      return (
        <span className="font-medium">{formatters.currency(getValue())}</span>
      )
    },
    filterFn: (row, columnId, filterValue: ConditionFilter) => {
      const value = row.getValue(columnId) as number
      const [min, max] = filterValue.value as [number, number]

      switch (filterValue.condition) {
        case "is-equal-to":
          return value == min
        case "is-between":
          return value >= min && value <= max
        case "is-greater-than":
          return value > min
        case "is-less-than":
          return value < min
        default:
          return true
      }
    },
  }),
  columnHelper.accessor("lastEdited", {
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Last edited" />
    ),
    enableSorting: false,
    meta: {
      className: "tabular-nums",
      displayName: "Last edited",
    },
  }),
  columnHelper.display({
    id: "edit",
    header: "Edit",
    enableSorting: false,
    enableHiding: false,
    meta: {
      className: "text-right",
      displayName: "Edit",
    },
    cell: ({ row }) => <DataTableRowActions row={row} />,
  }),
] as ColumnDef<Usage>[]

================
File: src/components/ui/data-table/DataTable.tsx
================
"use client"

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeaderCell,
  TableRow,
} from "@/components/Table"
import { cx } from "@/lib/utils"
import * as React from "react"

import { DataTableBulkEditor } from "./DataTableBulkEditor"
import { Filterbar } from "./DataTableFilterbar"
import { DataTablePagination } from "./DataTablePagination"

import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table"

interface DataTableProps<TData> {
  columns: ColumnDef<TData>[]
  data: TData[]
}

export function DataTable<TData>({ columns, data }: DataTableProps<TData>) {
  const pageSize = 20
  const [rowSelection, setRowSelection] = React.useState({})
  const table = useReactTable({
    data,
    columns,
    state: {
      rowSelection,
    },
    initialState: {
      pagination: {
        pageIndex: 0,
        pageSize: pageSize,
      },
    },
    enableRowSelection: true,
    getFilteredRowModel: getFilteredRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    onRowSelectionChange: setRowSelection,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
  })

  return (
    <>
      <div className="space-y-3">
        <Filterbar table={table} />
        <div className="relative overflow-hidden overflow-x-auto">
          <Table>
            <TableHead>
              {table.getHeaderGroups().map((headerGroup) => (
                <TableRow
                  key={headerGroup.id}
                  className="border-y border-gray-200 dark:border-gray-800"
                >
                  {headerGroup.headers.map((header) => (
                    <TableHeaderCell
                      key={header.id}
                      className={cx(
                        "whitespace-nowrap py-1 text-sm sm:text-xs",
                        header.column.columnDef.meta?.className,
                      )}
                    >
                      {flexRender(
                        header.column.columnDef.header,
                        header.getContext(),
                      )}
                    </TableHeaderCell>
                  ))}
                </TableRow>
              ))}
            </TableHead>
            <TableBody>
              {table.getRowModel().rows?.length ? (
                table.getRowModel().rows.map((row) => (
                  <TableRow
                    key={row.id}
                    onClick={() => row.toggleSelected(!row.getIsSelected())}
                    className="group select-none hover:bg-gray-50 hover:dark:bg-gray-900"
                  >
                    {row.getVisibleCells().map((cell, index) => (
                      <TableCell
                        key={cell.id}
                        className={cx(
                          row.getIsSelected()
                            ? "bg-gray-50 dark:bg-gray-900"
                            : "",
                          "relative whitespace-nowrap py-1 text-gray-600 first:w-10 dark:text-gray-400",
                          cell.column.columnDef.meta?.className,
                        )}
                      >
                        {index === 0 && row.getIsSelected() && (
                          <div className="absolute inset-y-0 left-0 w-0.5 bg-indigo-600 dark:bg-indigo-500" />
                        )}
                        {flexRender(
                          cell.column.columnDef.cell,
                          cell.getContext(),
                        )}
                      </TableCell>
                    ))}
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell
                    colSpan={columns.length}
                    className="h-24 text-center"
                  >
                    No results.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
          <DataTableBulkEditor table={table} rowSelection={rowSelection} />
        </div>
        <DataTablePagination table={table} pageSize={pageSize} />
      </div>
    </>
  )
}

================
File: src/components/ui/data-table/DataTableBulkEditor.tsx
================
"use client"

import {
  CommandBar,
  CommandBarBar,
  CommandBarCommand,
  CommandBarSeperator,
  CommandBarValue,
} from "@/components/CommandBar"
import { RowSelectionState, Table } from "@tanstack/react-table"

type DataTableBulkEditorProps<TData> = {
  table: Table<TData>
  rowSelection: RowSelectionState
}

function DataTableBulkEditor<TData>({
  table,
  rowSelection,
}: DataTableBulkEditorProps<TData>) {
  const hasSelectedRows = Object.keys(rowSelection).length > 0
  return (
    <CommandBar open={hasSelectedRows}>
      <CommandBarBar>
        <CommandBarValue>
          {Object.keys(rowSelection).length} selected
        </CommandBarValue>
        <CommandBarSeperator />
        <CommandBarCommand
          label="Edit"
          action={() => {
            console.log("Edit")
          }}
          shortcut={{ shortcut: "e" }}
        />
        <CommandBarSeperator />
        <CommandBarCommand
          label="Delete"
          action={() => {
            console.log("Delete")
          }}
          shortcut={{ shortcut: "d" }}
        />
        <CommandBarSeperator />
        <CommandBarCommand
          label="Reset"
          action={() => {
            table.resetRowSelection()
          }}
          shortcut={{ shortcut: "Escape", label: "esc" }}
          // don't disable this command
        />
      </CommandBarBar>
    </CommandBar>
  )
}

export { DataTableBulkEditor }

================
File: src/components/ui/data-table/DataTableColumnHeader.tsx
================
import { RiArrowDownSLine, RiArrowUpSLine } from "@remixicon/react"
import { Column } from "@tanstack/react-table"

import { cx } from "@/lib/utils"

interface DataTableColumnHeaderProps<TData, TValue>
  extends React.HTMLAttributes<HTMLDivElement> {
  column: Column<TData, TValue>
  title: string
}

export function DataTableColumnHeader<TData, TValue>({
  column,
  title,
  className,
}: DataTableColumnHeaderProps<TData, TValue>) {
  if (!column.getCanSort()) {
    return <div className={cx(className)}>{title}</div>
  }

  return (
    <div
      onClick={column.getToggleSortingHandler()}
      className={cx(
        column.columnDef.enableSorting === true
          ? "-mx-2 inline-flex cursor-pointer select-none items-center gap-2 rounded-md px-2 py-1 hover:bg-gray-50 hover:dark:bg-gray-900"
          : "",
      )}
    >
      <span>{title}</span>
      {column.getCanSort() ? (
        <div className="-space-y-2">
          <RiArrowUpSLine
            className={cx(
              "size-3.5 text-gray-900 dark:text-gray-50",
              column.getIsSorted() === "desc" ? "opacity-30" : "",
            )}
            aria-hidden="true"
          />
          <RiArrowDownSLine
            className={cx(
              "size-3.5 text-gray-900 dark:text-gray-50",
              column.getIsSorted() === "asc" ? "opacity-30" : "",
            )}
            aria-hidden="true"
          />
        </div>
      ) : null}
    </div>
  )
}

================
File: src/components/ui/data-table/DataTableFilter.tsx
================
"use client"

import {
  RiAddLine,
  RiArrowDownSLine,
  RiCornerDownRightLine,
} from "@remixicon/react"
import { Column } from "@tanstack/react-table"

import { Button } from "@/components/Button"
import { Checkbox } from "@/components/Checkbox"
import { Input } from "@/components/Input"
import { Label } from "@/components/Label"
import {
  Popover,
  PopoverClose,
  PopoverContent,
  PopoverTrigger,
} from "@/components/Popover"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/Select"
import { cx, focusRing } from "@/lib/utils"
import React from "react"

export type ConditionFilter = {
  condition: string
  value: [number | string, number | string]
}

type FilterType = "select" | "checkbox" | "number"

interface DataTableFilterProps<TData, TValue> {
  column: Column<TData, TValue> | undefined
  title?: string
  options?: {
    label: string
    value: string
  }[]
  type?: FilterType
  formatter?: (value: any) => string
}

const ColumnFiltersLabel = ({
  columnFilterLabels,
  className,
}: {
  columnFilterLabels: string[] | undefined
  className?: string
}) => {
  if (!columnFilterLabels) return null

  if (columnFilterLabels.length < 3) {
    return (
      <span className={cx("truncate", className)}>
        {columnFilterLabels.map((value, index) => (
          <span
            key={value}
            className={cx("font-semibold text-indigo-600 dark:text-indigo-400")}
          >
            {value}
            {index < columnFilterLabels.length - 1 && ", "}
          </span>
        ))}
      </span>
    )
  }

  return (
    <>
      <span
        className={cx(
          "font-semibold text-indigo-600 dark:text-indigo-400",
          className,
        )}
      >
        {columnFilterLabels[0]} and {columnFilterLabels.length - 1} more
      </span>
    </>
  )
}

type FilterValues = string | string[] | ConditionFilter | undefined

export function DataTableFilter<TData, TValue>({
  column,
  title,
  options,
  type = "select",
  formatter = (value) => value.toString(),
}: DataTableFilterProps<TData, TValue>) {
  const columnFilters = column?.getFilterValue() as FilterValues

  const [selectedValues, setSelectedValues] =
    React.useState<FilterValues>(columnFilters)

  const columnFilterLabels = React.useMemo(() => {
    if (!selectedValues) return undefined

    if (Array.isArray(selectedValues)) {
      return selectedValues.map((value) => formatter(value))
    }

    if (typeof selectedValues === "string") {
      return [formatter(selectedValues)]
    }

    if (typeof selectedValues === "object" && "condition" in selectedValues) {
      const condition = options?.find(
        (option) => option.value === selectedValues.condition,
      )?.label
      if (!condition) return undefined
      if (!selectedValues.value?.[0] && !selectedValues.value?.[1])
        return [`${condition}`]
      if (!selectedValues.value?.[1])
        return [`${condition} ${formatter(selectedValues.value?.[0])}`]
      return [
        `${condition} ${formatter(selectedValues.value?.[0])} and ${formatter(
          selectedValues.value?.[1],
        )}`,
      ]
    }

    return undefined
  }, [selectedValues, options, formatter])

  const getDisplayedFilter = () => {
    switch (type) {
      case "select":
        return (
          <Select
            value={selectedValues as string}
            onValueChange={(value) => {
              setSelectedValues(value)
            }}
          >
            <SelectTrigger className="mt-2 sm:py-1">
              <SelectValue placeholder="Select" />
            </SelectTrigger>
            <SelectContent>
              {options?.map((item) => (
                <SelectItem key={item.value} value={item.value}>
                  {item.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        )
      case "checkbox":
        return (
          <div className="mt-2 space-y-2 overflow-y-auto sm:max-h-36">
            {options?.map((option) => {
              return (
                <div key={option.label} className="flex items-center gap-2">
                  <Checkbox
                    id={option.value}
                    checked={(selectedValues as string[])?.includes(
                      option.value,
                    )}
                    onCheckedChange={(checked) => {
                      setSelectedValues((prev) => {
                        if (checked) {
                          return prev
                            ? [...(prev as string[]), option.value]
                            : [option.value]
                        } else {
                          return (prev as string[]).filter(
                            (value) => value !== option.value,
                          )
                        }
                      })
                    }}
                  />
                  <Label
                    htmlFor={option.value}
                    className="text-base sm:text-sm"
                  >
                    {option.label}
                  </Label>
                </div>
              )
            })}
          </div>
        )
      case "number":
        const isBetween =
          (selectedValues as ConditionFilter)?.condition === "is-between"
        return (
          <div className="space-y-2">
            <Select
              value={(selectedValues as ConditionFilter)?.condition}
              onValueChange={(value) => {
                setSelectedValues((prev) => {
                  return {
                    condition: value,
                    value: [
                      value !== "" ? (prev as ConditionFilter)?.value?.[0] : "",
                      "",
                    ],
                  }
                })
              }}
            >
              <SelectTrigger className="mt-2 sm:py-1">
                <SelectValue placeholder="Select condition" />
              </SelectTrigger>
              <SelectContent>
                {options?.map((item) => (
                  <SelectItem key={item.value} value={item.value}>
                    {item.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>

            <div className="flex w-full items-center gap-2">
              <RiCornerDownRightLine
                className="size-4 shrink-0 text-gray-500"
                aria-hidden="true"
              />
              <Input
                disabled={!(selectedValues as ConditionFilter)?.condition}
                type="number"
                placeholder="$0"
                className="sm:[&>input]:py-1"
                value={(selectedValues as ConditionFilter)?.value?.[0]}
                onChange={(e) => {
                  setSelectedValues((prev) => {
                    return {
                      condition: (prev as ConditionFilter)?.condition,
                      value: [
                        e.target.value,
                        isBetween ? (prev as ConditionFilter)?.value?.[1] : "",
                      ],
                    }
                  })
                }}
              />
              {(selectedValues as ConditionFilter)?.condition ===
                "is-between" && (
                <>
                  <span className="text-xs font-medium text-gray-500">and</span>
                  <Input
                    disabled={!(selectedValues as ConditionFilter)?.condition}
                    type="number"
                    placeholder="$0"
                    className="sm:[&>input]:py-1"
                    value={(selectedValues as ConditionFilter)?.value?.[1]}
                    onChange={(e) => {
                      setSelectedValues((prev) => {
                        return {
                          condition: (prev as ConditionFilter)?.condition,
                          value: [
                            (prev as ConditionFilter)?.value?.[0],
                            e.target.value,
                          ],
                        }
                      })
                    }}
                  />
                </>
              )}
            </div>
          </div>
        )
    }
  }

  React.useEffect(() => {
    setSelectedValues(columnFilters)
  }, [columnFilters])

  return (
    <Popover>
      <PopoverTrigger asChild>
        <button
          type="button"
          className={cx(
            "flex w-full items-center gap-x-1.5 whitespace-nowrap rounded-md border border-gray-300 px-2 py-1.5 font-medium text-gray-600 hover:bg-gray-50 sm:w-fit sm:text-xs dark:border-gray-700 dark:text-gray-400 hover:dark:bg-gray-900",
            selectedValues &&
              ((typeof selectedValues === "object" &&
                "condition" in selectedValues &&
                selectedValues.condition !== "") ||
                (typeof selectedValues === "string" && selectedValues !== "") ||
                (Array.isArray(selectedValues) && selectedValues.length > 0))
              ? ""
              : "border-dashed",
            focusRing,
          )}
        >
          <span
            aria-hidden="true"
            onClick={(e) => {
              if (selectedValues) {
                e.stopPropagation()
                column?.setFilterValue("")
                setSelectedValues("")
              }
            }}
          >
            <RiAddLine
              className={cx(
                "-ml-px size-5 shrink-0 transition sm:size-4",
                selectedValues && "rotate-45 hover:text-red-500",
              )}
              aria-hidden="true"
            />
          </span>
          {/* differentiation below for better mobile view */}
          {columnFilterLabels && columnFilterLabels.length > 0 ? (
            <span>{title}</span>
          ) : (
            <span className="w-full text-left sm:w-fit">{title}</span>
          )}
          {columnFilterLabels && columnFilterLabels.length > 0 && (
            <span
              className="h-4 w-px bg-gray-300 dark:bg-gray-700"
              aria-hidden="true"
            />
          )}
          <ColumnFiltersLabel
            columnFilterLabels={columnFilterLabels}
            className="w-full text-left sm:w-fit"
          />
          <RiArrowDownSLine
            className="size-5 shrink-0 text-gray-500 sm:size-4"
            aria-hidden="true"
          />
        </button>
      </PopoverTrigger>
      <PopoverContent
        align="start"
        sideOffset={7}
        className="min-w-[calc(var(--radix-popover-trigger-width))] max-w-[calc(var(--radix-popover-trigger-width))] sm:min-w-56 sm:max-w-56"
        onInteractOutside={() => {
          if (
            !columnFilters ||
            (typeof columnFilters === "string" && columnFilters === "") ||
            (Array.isArray(columnFilters) && columnFilters.length === 0) ||
            (typeof columnFilters === "object" &&
              "condition" in columnFilters &&
              columnFilters.condition === "")
          ) {
            column?.setFilterValue("")
            setSelectedValues("")
          }
        }}
      >
        <form
          onSubmit={(e) => {
            e.preventDefault()
            column?.setFilterValue(selectedValues)
          }}
        >
          <div className="space-y-2">
            <div>
              <Label className="text-base font-medium sm:text-sm">
                Filter by {title}
              </Label>
              {getDisplayedFilter()}
            </div>
            <PopoverClose className="w-full" asChild>
              <Button type="submit" className="w-full sm:py-1">
                Apply
              </Button>
            </PopoverClose>
            {columnFilterLabels && columnFilterLabels.length > 0 && (
              <Button
                variant="secondary"
                className="w-full sm:py-1"
                type="button"
                onClick={() => {
                  column?.setFilterValue("")
                  setSelectedValues(
                    type === "checkbox"
                      ? []
                      : type === "number"
                        ? { condition: "", value: ["", ""] }
                        : "",
                  )
                }}
              >
                Reset
              </Button>
            )}
          </div>
        </form>
      </PopoverContent>
    </Popover>
  )
}

================
File: src/components/ui/data-table/DataTableFilterbar.tsx
================
"use client"

import { Button } from "@/components/Button"
import { Searchbar } from "@/components/Searchbar"
import { conditions, regions, statuses } from "@/data/data"
import { formatters } from "@/lib/utils"
import { RiDownloadLine } from "@remixicon/react"
import { Table } from "@tanstack/react-table"
import { useState } from "react"
import { useDebouncedCallback } from "use-debounce"
import { DataTableFilter } from "./DataTableFilter"
import { ViewOptions } from "./DataTableViewOptions"

interface DataTableToolbarProps<TData> {
  table: Table<TData>
}

export function Filterbar<TData>({ table }: DataTableToolbarProps<TData>) {
  const isFiltered = table.getState().columnFilters.length > 0
  const [searchTerm, setSearchTerm] = useState<string>("")

  const debouncedSetFilterValue = useDebouncedCallback((value) => {
    table.getColumn("owner")?.setFilterValue(value)
  }, 300)

  const handleSearchChange = (event: any) => {
    const value = event.target.value
    setSearchTerm(value)
    debouncedSetFilterValue(value)
  }

  return (
    <div className="flex flex-wrap items-center justify-between gap-2 sm:gap-x-6">
      <div className="flex w-full flex-col gap-2 sm:w-fit sm:flex-row sm:items-center">
        {table.getColumn("status")?.getIsVisible() && (
          <DataTableFilter
            column={table.getColumn("status")}
            title="Status"
            options={statuses}
            type="select"
          />
        )}
        {table.getColumn("region")?.getIsVisible() && (
          <DataTableFilter
            column={table.getColumn("region")}
            title="Region"
            options={regions}
            type="checkbox"
          />
        )}
        {table.getColumn("costs")?.getIsVisible() && (
          <DataTableFilter
            column={table.getColumn("costs")}
            title="Costs"
            type="number"
            options={conditions}
            formatter={formatters.currency}
          />
        )}
        {table.getColumn("owner")?.getIsVisible() && (
          <Searchbar
            type="search"
            placeholder="Search by owner..."
            value={searchTerm}
            onChange={handleSearchChange}
            className="w-full sm:max-w-[250px] sm:[&>input]:h-[30px]"
          />
        )}
        {isFiltered && (
          <Button
            variant="ghost"
            onClick={() => table.resetColumnFilters()}
            className="border border-gray-200 px-2 font-semibold text-indigo-600 sm:border-none sm:py-1 dark:border-gray-800 dark:text-indigo-500"
          >
            Clear filters
          </Button>
        )}
      </div>
      <div className="flex items-center gap-2">
        <Button
          variant="secondary"
          className="hidden gap-x-2 px-2 py-1.5 text-sm sm:text-xs lg:flex"
        >
          <RiDownloadLine className="size-4 shrink-0" aria-hidden="true" />
          Export
        </Button>
        <ViewOptions table={table} />
      </div>
    </div>
  )
}

================
File: src/components/ui/data-table/DataTablePagination.tsx
================
import { Button } from "@/components/Button"
import { cx } from "@/lib/utils"
import {
  RiArrowLeftDoubleLine,
  RiArrowLeftSLine,
  RiArrowRightDoubleLine,
  RiArrowRightSLine,
} from "@remixicon/react"
import { Table } from "@tanstack/react-table"

interface DataTablePaginationProps<TData> {
  table: Table<TData>
  pageSize: number
}

export function DataTablePagination<TData>({
  table,
  pageSize,
}: DataTablePaginationProps<TData>) {
  const paginationButtons = [
    {
      icon: RiArrowLeftDoubleLine,
      onClick: () => table.setPageIndex(0),
      disabled: !table.getCanPreviousPage(),
      srText: "First page",
      mobileView: "hidden sm:block",
    },
    {
      icon: RiArrowLeftSLine,
      onClick: () => table.previousPage(),
      disabled: !table.getCanPreviousPage(),
      srText: "Previous page",
      mobileView: "",
    },
    {
      icon: RiArrowRightSLine,
      onClick: () => table.nextPage(),
      disabled: !table.getCanNextPage(),
      srText: "Next page",
      mobileView: "",
    },
    {
      icon: RiArrowRightDoubleLine,
      onClick: () => table.setPageIndex(table.getPageCount() - 1),
      disabled: !table.getCanNextPage(),
      srText: "Last page",
      mobileView: "hidden sm:block",
    },
  ]

  const totalRows = table.getFilteredRowModel().rows.length
  const currentPage = table.getState().pagination.pageIndex
  const firstRowIndex = currentPage * pageSize + 1
  const lastRowIndex = Math.min(totalRows, firstRowIndex + pageSize - 1)

  return (
    <div className="flex items-center justify-between">
      <div className="text-sm tabular-nums text-gray-500">
        {table.getFilteredSelectedRowModel().rows.length} of {totalRows} row(s)
        selected.
      </div>
      <div className="flex items-center gap-x-6 lg:gap-x-8">
        <p className="hidden text-sm tabular-nums text-gray-500 sm:block">
          Showing{" "}
          <span className="font-medium text-gray-900 dark:text-gray-50">
            {firstRowIndex}-{lastRowIndex}
          </span>{" "}
          of{" "}
          <span className="font-medium text-gray-900 dark:text-gray-50">
            {totalRows}
          </span>
        </p>
        <div className="flex items-center gap-x-1.5">
          {paginationButtons.map((button, index) => (
            <Button
              key={index}
              variant="secondary"
              className={cx(button.mobileView, "p-1.5")}
              onClick={() => {
                button.onClick()
                table.resetRowSelection()
              }}
              disabled={button.disabled}
            >
              <span className="sr-only">{button.srText}</span>
              <button.icon className="size-4 shrink-0" aria-hidden="true" />
            </Button>
          ))}
        </div>
      </div>
    </div>
  )
}

================
File: src/components/ui/data-table/DataTableRowActions.tsx
================
"use client"

import { Button } from "@/components/Button"
import { RiMoreFill } from "@remixicon/react"
import { Row } from "@tanstack/react-table"

import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/Dropdown"

interface DataTableRowActionsProps<TData> {
  row: Row<TData>
}

export function DataTableRowActions<
  TData,
>({}: DataTableRowActionsProps<TData>) {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="ghost"
          className="group aspect-square p-1.5 hover:border hover:border-gray-300 data-[state=open]:border-gray-300 data-[state=open]:bg-gray-50 hover:dark:border-gray-700 data-[state=open]:dark:border-gray-700 data-[state=open]:dark:bg-gray-900"
        >
          <RiMoreFill
            className="size-4 shrink-0 text-gray-500 group-hover:text-gray-700 group-data-[state=open]:text-gray-700 group-hover:dark:text-gray-300 group-data-[state=open]:dark:text-gray-300"
            aria-hidden="true"
          />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="min-w-40">
        <DropdownMenuItem>Add</DropdownMenuItem>
        <DropdownMenuItem>Edit</DropdownMenuItem>
        <DropdownMenuItem className="text-red-600 dark:text-red-500">
          Delete
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

================
File: src/components/ui/data-table/DataTableViewOptions.tsx
================
"use client"

import React from "react"

import { Popover, PopoverContent, PopoverTrigger } from "@/components/Popover"
import { Column, Table } from "@tanstack/react-table"

import ReactDOM from "react-dom"
import invariant from "tiny-invariant"

import { Button } from "@/components/Button"
import { Checkbox } from "@/components/Checkbox"
import { Label } from "@/components/Label"
import { cx } from "@/lib/utils"
import { triggerPostMoveFlash } from "@atlaskit/pragmatic-drag-and-drop-flourish/trigger-post-move-flash"
import {
  attachClosestEdge,
  extractClosestEdge,
  type Edge,
} from "@atlaskit/pragmatic-drag-and-drop-hitbox/closest-edge"
import { getReorderDestinationIndex } from "@atlaskit/pragmatic-drag-and-drop-hitbox/util/get-reorder-destination-index"
import * as liveRegion from "@atlaskit/pragmatic-drag-and-drop-live-region"
import { DropIndicator } from "@atlaskit/pragmatic-drag-and-drop-react-drop-indicator/box"
import { combine } from "@atlaskit/pragmatic-drag-and-drop/combine"
import {
  draggable,
  dropTargetForElements,
  monitorForElements,
} from "@atlaskit/pragmatic-drag-and-drop/element/adapter"
import { pointerOutsideOfPreview } from "@atlaskit/pragmatic-drag-and-drop/element/pointer-outside-of-preview"
import { setCustomNativeDragPreview } from "@atlaskit/pragmatic-drag-and-drop/element/set-custom-native-drag-preview"
import { reorder } from "@atlaskit/pragmatic-drag-and-drop/reorder"
import { RiDraggable, RiEqualizer2Line } from "@remixicon/react"

type CleanupFn = () => void

type ItemEntry = { itemId: string; element: HTMLElement }

type ListContextValue = {
  getListLength: () => number
  registerItem: (entry: ItemEntry) => CleanupFn
  reorderItem: (args: {
    startIndex: number
    indexOfTarget: number
    closestEdgeOfTarget: Edge | null
  }) => void
  instanceId: symbol
}

const ListContext = React.createContext<ListContextValue | null>(null)

function useListContext() {
  const listContext = React.useContext(ListContext)
  invariant(listContext !== null)
  return listContext
}

type Item = {
  id: string
  label: string
}

const itemKey = Symbol("item")

type ItemData = {
  [itemKey]: true
  item: Item
  index: number
  instanceId: symbol
}

function getItemData({
  item,
  index,
  instanceId,
}: {
  item: Item
  index: number
  instanceId: symbol
}): ItemData {
  return {
    [itemKey]: true,
    item,
    index,
    instanceId,
  }
}

function isItemData(data: Record<string | symbol, unknown>): data is ItemData {
  return data[itemKey] === true
}

type DraggableState =
  | { type: "idle" }
  | { type: "preview"; container: HTMLElement }
  | { type: "dragging" }

const idleState: DraggableState = { type: "idle" }
const draggingState: DraggableState = { type: "dragging" }

function ListItem({
  item,
  index,
  column,
}: {
  item: Item
  index: number
  column: Column<any, unknown> | undefined
}) {
  const { registerItem, instanceId } = useListContext()

  const ref = React.useRef<HTMLDivElement>(null)
  const [closestEdge, setClosestEdge] = React.useState<Edge | null>(null)

  const dragHandleRef = React.useRef<HTMLButtonElement>(null)

  const [draggableState, setDraggableState] =
    React.useState<DraggableState>(idleState)

  React.useEffect(() => {
    const element = ref.current
    const dragHandle = dragHandleRef.current
    invariant(element)
    invariant(dragHandle)

    const data = getItemData({ item, index, instanceId })

    return combine(
      registerItem({ itemId: item.id, element }),
      draggable({
        element: dragHandle,
        getInitialData: () => data,
        onGenerateDragPreview({ nativeSetDragImage }) {
          setCustomNativeDragPreview({
            nativeSetDragImage,
            getOffset: pointerOutsideOfPreview({
              x: "10px",
              y: "10px",
            }),
            render({ container }) {
              setDraggableState({ type: "preview", container })

              return () => setDraggableState(draggingState)
            },
          })
        },
        onDragStart() {
          setDraggableState(draggingState)
        },
        onDrop() {
          setDraggableState(idleState)
        },
      }),
      dropTargetForElements({
        element,
        canDrop({ source }) {
          return (
            isItemData(source.data) && source.data.instanceId === instanceId
          )
        },
        getData({ input }) {
          return attachClosestEdge(data, {
            element,
            input,
            allowedEdges: ["top", "bottom"],
          })
        },
        onDrag({ self, source }) {
          const isSource = source.element === element
          if (isSource) {
            setClosestEdge(null)
            return
          }

          const closestEdge = extractClosestEdge(self.data)

          const sourceIndex = source.data.index
          invariant(typeof sourceIndex === "number")

          const isItemBeforeSource = index === sourceIndex - 1
          const isItemAfterSource = index === sourceIndex + 1

          const isDropIndicatorHidden =
            (isItemBeforeSource && closestEdge === "bottom") ||
            (isItemAfterSource && closestEdge === "top")

          if (isDropIndicatorHidden) {
            setClosestEdge(null)
            return
          }

          setClosestEdge(closestEdge)
        },
        onDragLeave() {
          setClosestEdge(null)
        },
        onDrop() {
          setClosestEdge(null)
        },
      }),
    )
  }, [instanceId, item, index, registerItem])

  return (
    <React.Fragment>
      <div ref={ref} className="relative border-b border-transparent">
        <div
          className={cx(
            "relative flex items-center justify-between gap-2",
            draggableState.type === "dragging" && "opacity-50",
          )}
        >
          <div className="flex items-center gap-2">
            <Checkbox
              checked={column?.getIsVisible()}
              onCheckedChange={() => column?.toggleVisibility()}
            />
            <span>{item.label}</span>
          </div>
          <Button
            aria-hidden="true"
            tabIndex={-1}
            variant="ghost"
            className="-mr-1 px-0 py-1"
            ref={dragHandleRef}
            aria-label={`Reorder ${item.label}`}
          >
            <RiDraggable className="size-5 text-gray-400 dark:text-gray-600" />
          </Button>
        </div>
        {closestEdge && <DropIndicator edge={closestEdge} gap="1px" />}
      </div>
      {draggableState.type === "preview" &&
        ReactDOM.createPortal(
          <div>{item.label}</div>,
          draggableState.container,
        )}
    </React.Fragment>
  )
}

function getItemRegistry() {
  const registry = new Map<string, HTMLElement>()

  function register({ itemId, element }: ItemEntry) {
    registry.set(itemId, element)

    return function unregister() {
      registry.delete(itemId)
    }
  }

  function getElement(itemId: string): HTMLElement | null {
    return registry.get(itemId) ?? null
  }

  return { register, getElement }
}

type ListState = {
  items: Item[]
  lastCardMoved: {
    item: Item
    previousIndex: number
    currentIndex: number
    numberOfItems: number
  } | null
}

interface DataTableViewOptionsProps<TData> {
  table: Table<TData>
}

function ViewOptions<TData>({ table }: DataTableViewOptionsProps<TData>) {
  const tableColumns: Item[] = table.getAllColumns().map((column) => ({
    id: column.id,
    label: column.columnDef.meta?.displayName as string,
  }))
  const [{ items, lastCardMoved }, setListState] = React.useState<ListState>({
    items: tableColumns,
    lastCardMoved: null,
  })
  const [registry] = React.useState(getItemRegistry)

  // Isolated instances of this component from one another
  const [instanceId] = React.useState(() => Symbol("instance-id"))

  React.useEffect(() => {
    table.setColumnOrder(items.map((item) => item.id))
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [items])

  const reorderItem = React.useCallback(
    ({
      startIndex,
      indexOfTarget,
      closestEdgeOfTarget,
    }: {
      startIndex: number
      indexOfTarget: number
      closestEdgeOfTarget: Edge | null
    }) => {
      const finishIndex = getReorderDestinationIndex({
        startIndex,
        closestEdgeOfTarget,
        indexOfTarget,
        axis: "vertical",
      })

      if (finishIndex === startIndex) {
        return
      }

      setListState((listState) => {
        const item = listState.items[startIndex]

        return {
          items: reorder({
            list: listState.items,
            startIndex,
            finishIndex,
          }),
          lastCardMoved: {
            item,
            previousIndex: startIndex,
            currentIndex: finishIndex,
            numberOfItems: listState.items.length,
          },
        }
      })
    },
    [],
  )

  React.useEffect(() => {
    return monitorForElements({
      canMonitor({ source }) {
        return isItemData(source.data) && source.data.instanceId === instanceId
      },
      onDrop({ location, source }) {
        const target = location.current.dropTargets[0]
        if (!target) {
          return
        }

        const sourceData = source.data
        const targetData = target.data
        if (!isItemData(sourceData) || !isItemData(targetData)) {
          return
        }

        const indexOfTarget = items.findIndex(
          (item) => item.id === targetData.item.id,
        )
        if (indexOfTarget < 0) {
          return
        }

        const closestEdgeOfTarget = extractClosestEdge(targetData)

        reorderItem({
          startIndex: sourceData.index,
          indexOfTarget,
          closestEdgeOfTarget,
        })
      },
    })
  }, [instanceId, items, reorderItem])

  // once a drag is finished, we have some post drop actions to take
  React.useEffect(() => {
    if (lastCardMoved === null) {
      return
    }

    const { item, previousIndex, currentIndex, numberOfItems } = lastCardMoved
    const element = registry.getElement(item.id)
    if (element) {
      triggerPostMoveFlash(element)
    }

    liveRegion.announce(
      `You've moved ${item.label} from position ${previousIndex + 1
      } to position ${currentIndex + 1} of ${numberOfItems}.`,
    )
  }, [lastCardMoved, registry])

  // cleanup the live region when this component is finished
  React.useEffect(() => {
    return function cleanup() {
      liveRegion.cleanup()
    }
  }, [])

  const getListLength = React.useCallback(() => items.length, [items.length])

  const contextValue: ListContextValue = React.useMemo(() => {
    return {
      registerItem: registry.register,
      reorderItem,
      instanceId,
      getListLength,
    }
  }, [registry.register, reorderItem, instanceId, getListLength])

  return (
    <div>
      <div className="flex justify-center">
        <Popover>
          <PopoverTrigger asChild>
            <Button
              variant="secondary"
              className={cx(
                "ml-auto hidden gap-x-2 px-2 py-1.5 text-sm sm:text-xs lg:flex",
              )}
            >
              <RiEqualizer2Line className="size-4" aria-hidden="true" />
              View
            </Button>
          </PopoverTrigger>
          <PopoverContent
            align="end"
            sideOffset={7}
            className="z-50 w-fit space-y-2"
          >
            <Label className="font-medium">Display properties</Label>
            <ListContext.Provider value={contextValue}>
              <div className="flex flex-col">
                {items.map((item, index) => {
                  const column = table.getColumn(item.id)
                  if (!column) return null
                  return (
                    <div
                      key={column.id}
                      className={cx(!column.getCanHide() && "hidden")}
                    >
                      <ListItem column={column} item={item} index={index} />
                    </div>
                  )
                })}
              </div>
            </ListContext.Provider>
          </PopoverContent>
        </Popover>
      </div>
    </div>
  )
}

export { ViewOptions }

================
File: src/components/ui/data-table/TanstackTable.d.ts
================
import "@tanstack/react-table"

declare module "@tanstack/react-table" {
  interface ColumnMeta<TData extends RowData, TValue> {
    className?: string
    displayName: string
  }
}

================
File: src/components/ui/icons/ArrowAnimated.tsx
================
import { cx } from "@/lib/utils"

export function ArrowAnimated({
  className,
  ...props
}: React.HTMLAttributes<SVGElement>) {
  return (
    <svg
      className={cx("-mr-1 ml-1.5 stroke-[1.5px]", className)}
      fill="none"
      stroke="currentColor"
      width="11"
      height="11"
      viewBox="0 0 10 10"
      aria-hidden="true"
      {...props}
    >
      <path
        className="opacity-0 transition group-hover:opacity-100"
        d="M0 5h7"
      />
      <path
        className="transition group-hover:translate-x-[3px]"
        d="M1 1l4 4-4 4"
      />
    </svg>
  )
}

================
File: src/components/ui/navigation/DropdownUserProfile.tsx
================
"use client"

import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuSubMenu,
  DropdownMenuSubMenuContent,
  DropdownMenuSubMenuTrigger,
  DropdownMenuTrigger,
} from "@/components/Dropdown"
import {
  RiArrowRightUpLine,
  RiComputerLine,
  RiMoonLine,
  RiSunLine,
} from "@remixicon/react"
import { useTheme } from "next-themes"
import * as React from "react"

export type DropdownUserProfileProps = {
  children: React.ReactNode
  align?: "center" | "start" | "end"
}

export function DropdownUserProfile({
  children,
  align = "start",
}: DropdownUserProfileProps) {
  const [mounted, setMounted] = React.useState(false)
  const { theme, setTheme } = useTheme()
  React.useEffect(() => {
    setMounted(true)
  }, [])

  if (!mounted) {
    return null
  }
  return (
    <>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>{children}</DropdownMenuTrigger>
        <DropdownMenuContent align={align}>
          <DropdownMenuLabel>emma.stone@acme.com</DropdownMenuLabel>
          <DropdownMenuGroup>
            <DropdownMenuSubMenu>
              <DropdownMenuSubMenuTrigger>Theme</DropdownMenuSubMenuTrigger>
              <DropdownMenuSubMenuContent>
                <DropdownMenuRadioGroup
                  value={theme}
                  onValueChange={(value) => {
                    setTheme(value)
                  }}
                >
                  <DropdownMenuRadioItem
                    aria-label="Switch to Light Mode"
                    value="light"
                    iconType="check"
                  >
                    <RiSunLine className="size-4 shrink-0" aria-hidden="true" />
                    Light
                  </DropdownMenuRadioItem>
                  <DropdownMenuRadioItem
                    aria-label="Switch to Dark Mode"
                    value="dark"
                    iconType="check"
                  >
                    <RiMoonLine
                      className="size-4 shrink-0"
                      aria-hidden="true"
                    />
                    Dark
                  </DropdownMenuRadioItem>
                  <DropdownMenuRadioItem
                    aria-label="Switch to System Mode"
                    value="system"
                    iconType="check"
                  >
                    <RiComputerLine
                      className="size-4 shrink-0"
                      aria-hidden="true"
                    />
                    System
                  </DropdownMenuRadioItem>
                </DropdownMenuRadioGroup>
              </DropdownMenuSubMenuContent>
            </DropdownMenuSubMenu>
          </DropdownMenuGroup>
          <DropdownMenuSeparator />
          <DropdownMenuGroup>
            <DropdownMenuItem>
              Changelog
              <RiArrowRightUpLine
                className="mb-1 ml-1 size-2.5 shrink-0 text-gray-500"
                aria-hidden="true"
              />
            </DropdownMenuItem>
            <DropdownMenuItem>
              Documentation
              <RiArrowRightUpLine
                className="mb-1 ml-1 size-2.5 shrink-0 text-gray-500"
                aria-hidden="true"
              />
            </DropdownMenuItem>
            <DropdownMenuItem>
              Join Slack community
              <RiArrowRightUpLine
                className="mb-1 ml-1 size-2.5 shrink-0 text-gray-500"
                aria-hidden="true"
              />
            </DropdownMenuItem>
          </DropdownMenuGroup>
          <DropdownMenuSeparator />
          <DropdownMenuGroup>
            <DropdownMenuItem>Sign out</DropdownMenuItem>
          </DropdownMenuGroup>
        </DropdownMenuContent>
      </DropdownMenu>
    </>
  )
}

================
File: src/components/ui/navigation/MobileSidebar.tsx
================
import { siteConfig } from "@/app/siteConfig"
import { Button } from "@/components/Button"
import {
  Drawer,
  DrawerBody,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerTitle,
  DrawerTrigger,
} from "@/components/Drawer"
import { cx, focusRing } from "@/lib/utils"
import {
  RiHome2Line,
  RiLinkM,
  RiListCheck,
  RiMenuLine,
  RiSettings5Line,
  RiWindyLine,
} from "@remixicon/react"
import Link from "next/link"
import { usePathname } from "next/navigation"

const navigation = [
  { name: "Overview", href: siteConfig.baseLinks.overview, icon: RiHome2Line },
  { name: "Air Quality", href: siteConfig.baseLinks.airQuality, icon: RiWindyLine },
  { name: "Details", href: siteConfig.baseLinks.details, icon: RiListCheck },
  {
    name: "Settings",
    href: siteConfig.baseLinks.settings.general,
    icon: RiSettings5Line,
  },
] as const

const shortcuts = [
  {
    name: "Add new user",
    href: "/settings/users",
    icon: RiLinkM,
  },
  {
    name: "Workspace usage",
    href: "/settings/billing#billing-overview",
    icon: RiLinkM,
  },
  {
    name: "Cost spend control",
    href: "/settings/billing#cost-spend-control",
    icon: RiLinkM,
  },
  {
    name: "Overview – Rows written",
    href: "/overview#usage-overview",
    icon: RiLinkM,
  },
] as const

export default function MobileSidebar() {
  const pathname = usePathname()
  const isActive = (itemHref: string) => {
    if (itemHref === siteConfig.baseLinks.settings.general) {
      return pathname.startsWith("/settings")
    }
    return pathname === itemHref || pathname.startsWith(itemHref)
  }
  return (
    <>
      <Drawer>
        <DrawerTrigger asChild>
          <Button
            variant="ghost"
            aria-label="open sidebar"
            className="group flex items-center rounded-md p-2 text-sm font-medium hover:bg-gray-100 data-[state=open]:bg-gray-100 data-[state=open]:bg-gray-400/10 hover:dark:bg-gray-400/10"
          >
            <RiMenuLine
              className="size-6 shrink-0 sm:size-5"
              aria-hidden="true"
            />
          </Button>
        </DrawerTrigger>
        <DrawerContent className="sm:max-w-lg">
          <DrawerHeader>
            <DrawerTitle className="font-heading">Retail Analytics</DrawerTitle>
          </DrawerHeader>
          <DrawerBody>
            <nav
              aria-label="core mobile navigation links"
              className="flex flex-1 flex-col space-y-10"
            >
              <ul role="list" className="space-y-1.5">
                {navigation.map((item) => (
                  <li key={item.name}>
                    <DrawerClose asChild>
                      <Link
                        href={item.href}
                        className={cx(
                          isActive(item.href)
                            ? "text-indigo-600 dark:text-indigo-400"
                            : "text-gray-600 hover:text-gray-900 dark:text-gray-400 hover:dark:text-gray-50",
                          "flex items-center gap-x-2.5 rounded-md px-2 py-1.5 text-base font-medium transition hover:bg-gray-100 sm:text-sm hover:dark:bg-gray-900 font-heading",
                          focusRing,
                        )}
                      >
                        <item.icon
                          className="size-5 shrink-0"
                          aria-hidden="true"
                        />
                        {item.name}
                      </Link>
                    </DrawerClose>
                  </li>
                ))}
              </ul>
              <div>
                <span className="text-sm font-medium leading-6 text-gray-500 sm:text-xs font-heading">
                  Shortcuts
                </span>
                <ul aria-label="shortcuts" role="list" className="space-y-0.5">
                  {shortcuts.map((item) => (
                    <li key={item.name}>
                      <Link
                        href={item.href}
                        className={cx(
                          pathname === item.href || pathname.includes(item.href)
                            ? "text-indigo-600 dark:text-indigo-400"
                            : "text-gray-700 hover:text-gray-900 dark:text-gray-400 hover:dark:text-gray-50",
                          "flex items-center gap-x-2.5 rounded-md px-2 py-1.5 font-medium transition hover:bg-gray-100 sm:text-sm hover:dark:bg-gray-900 font-heading",
                          focusRing,
                        )}
                      >
                        <item.icon
                          className="size-4 shrink-0"
                          aria-hidden="true"
                        />
                        {item.name}
                      </Link>
                    </li>
                  ))}
                </ul>
              </div>
            </nav>
          </DrawerBody>
        </DrawerContent>
      </Drawer>
    </>
  )
}

================
File: src/components/ui/navigation/ModalAddWorkspace.tsx
================
import { Badge } from "@/components/Badge"
import { Button } from "@/components/Button"
import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/Dialog"
import { DropdownMenuItem } from "@/components/Dropdown"
import { Input } from "@/components/Input"
import { Label } from "@/components/Label"
import {
  RadioCardGroup,
  RadioCardGroupIndicator,
  RadioCardItem,
} from "@/components/RadioCard"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/Select"

export const databases: {
  label: string
  value: string
  description: string
  isRecommended: boolean
}[] = [
  {
    label: "Base performance",
    value: "base-performance",
    description: "1/8 vCPU, 1 GB RAM",
    isRecommended: true,
  },
  {
    label: "Advanced performance",
    value: "advanced-performance",
    description: "1/4 vCPU, 2 GB RAM",
    isRecommended: false,
  },
  {
    label: "Turbo performance",
    value: "turbo-performance",
    description: "1/2 vCPU, 4 GB RAM",
    isRecommended: false,
  },
]

export type ModalProps = {
  itemName: string
  onSelect: () => void
  onOpenChange: (open: boolean) => void
}

export function ModalAddWorkspace({
  itemName,
  onSelect,
  onOpenChange,
}: ModalProps) {
  return (
    <>
      <Dialog onOpenChange={onOpenChange}>
        <DialogTrigger className="w-full text-left">
          <DropdownMenuItem
            onSelect={(event) => {
              event.preventDefault()
              onSelect && onSelect()
            }}
          >
            {itemName}
          </DropdownMenuItem>
        </DialogTrigger>
        <DialogContent className="sm:max-w-2xl">
          <form>
            <DialogHeader>
              <DialogTitle>Add new workspace</DialogTitle>
              <DialogDescription className="mt-1 text-sm leading-6">
                With free plan, you can add up to 10 workspaces.
              </DialogDescription>
              <div className="mt-4 grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="workspace-name" className="font-medium">
                    Workspace name
                  </Label>
                  <Input
                    id="workspace-name"
                    name="workspace-name"
                    placeholder="my_workspace"
                    className="mt-2"
                  />
                </div>
                <div>
                  <Label htmlFor="starter-kit" className="font-medium">
                    Starter kit
                  </Label>
                  <Select defaultValue="empty-workspace">
                    <SelectTrigger
                      id="starter-kit"
                      name="starter-kit"
                      className="mt-2"
                    >
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="empty-workspace">
                        None - Empty workspace
                      </SelectItem>
                      <SelectItem value="commerce-analytics">
                        Commerce analytics
                      </SelectItem>
                      <SelectItem value="product-analytics">
                        Product analytics
                      </SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="col-span-full">
                  <Label htmlFor="database-region" className="font-medium">
                    Database region
                  </Label>
                  <Select defaultValue="europe-west-01">
                    <SelectTrigger
                      id="database-region"
                      name="database-region"
                      className="mt-2"
                    >
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="europe-west-01">
                        europe-west-01
                      </SelectItem>
                      <SelectItem value="us-east-02">us-east-02</SelectItem>
                      <SelectItem value="us-west-01">us-west-01</SelectItem>
                    </SelectContent>
                  </Select>
                  <p className="mt-2 text-xs text-gray-500">
                    For best performance, choose a region closest to your
                    application.
                  </p>
                </div>
              </div>
              <div className="mt-4">
                <Label htmlFor="database" className="font-medium">
                  Database configuration
                </Label>
                <RadioCardGroup
                  defaultValue={databases[0].value}
                  className="mt-2 grid grid-cols-1 gap-4 text-sm md:grid-cols-2"
                >
                  {databases.map((database) => (
                    <RadioCardItem key={database.value} value={database.value}>
                      <div className="flex items-start gap-3">
                        <RadioCardGroupIndicator className="mt-0.5" />
                        <div>
                          {database.isRecommended ? (
                            <div className="flex items-center gap-2">
                              <span className="leading-5">
                                {database.label}
                              </span>
                              <Badge>Recommended</Badge>
                            </div>
                          ) : (
                            <span>{database.label}</span>
                          )}
                          <p className="mt-1 text-xs text-gray-500">
                            1/8 vCPU, 1 GB RAM
                          </p>
                        </div>
                      </div>
                    </RadioCardItem>
                  ))}
                </RadioCardGroup>
              </div>
            </DialogHeader>
            <DialogFooter className="mt-6">
              <DialogClose asChild>
                <Button
                  className="mt-2 w-full sm:mt-0 sm:w-fit"
                  variant="secondary"
                >
                  Go back
                </Button>
              </DialogClose>
              <DialogClose asChild>
                <Button type="submit" className="w-full sm:w-fit">
                  Add workspace
                </Button>
              </DialogClose>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>
    </>
  )
}

================
File: src/components/ui/navigation/Sidebar.tsx
================
"use client"
import { siteConfig } from "@/app/siteConfig"
import { cx, focusRing } from "@/lib/utils"
import {
  RiHome2Line,
  RiLinkM,
  RiListCheck,
  RiSettings5Line,
  RiWindyLine,
} from "@remixicon/react"
import Link from "next/link"
import { usePathname } from "next/navigation"
import MobileSidebar from "./MobileSidebar"
import {
  WorkspacesDropdownDesktop,
  WorkspacesDropdownMobile,
} from "./SidebarWorkspacesDropdown"
import { UserProfileDesktop, UserProfileMobile } from "./UserProfile"

const navigation = [
  { name: "Overview", href: siteConfig.baseLinks.overview, icon: RiHome2Line },
  { name: "Air Quality", href: siteConfig.baseLinks.airQuality, icon: RiWindyLine },
  { name: "Details", href: siteConfig.baseLinks.details, icon: RiListCheck },
  {
    name: "Settings",
    href: siteConfig.baseLinks.settings.general,
    icon: RiSettings5Line,
  },
] as const

const shortcuts = [
  {
    name: "Add new user",
    href: "/settings/users",
    icon: RiLinkM,
  },
  {
    name: "Workspace usage",
    href: "/settings/billing#billing-overview",
    icon: RiLinkM,
  },
  {
    name: "Cost spend control",
    href: "/settings/billing#cost-spend-control",
    icon: RiLinkM,
  },
  {
    name: "Overview – Rows written",
    href: "/overview#usage-overview",
    icon: RiLinkM,
  },
] as const

export function Sidebar() {
  const pathname = usePathname()
  const isActive = (itemHref: string) => {
    if (itemHref === siteConfig.baseLinks.settings.general) {
      return pathname.startsWith("/settings")
    }
    return pathname === itemHref || pathname.startsWith(itemHref)
  }
  return (
    <>
      {/* sidebar (lg+) */}
      <nav className="hidden lg:fixed lg:inset-y-0 lg:z-50 lg:flex lg:w-72 lg:flex-col">
        <aside className="flex grow flex-col gap-y-6 overflow-y-auto border-r border-gray-200 bg-white p-4 dark:border-gray-800 dark:bg-gray-950">
          <WorkspacesDropdownDesktop />
          <nav
            aria-label="core navigation links"
            className="flex flex-1 flex-col space-y-10"
          >
            <ul role="list" className="space-y-0.5">
              {navigation.map((item) => (
                <li key={item.name}>
                  <Link
                    href={item.href}
                    className={cx(
                      isActive(item.href)
                        ? "text-indigo-600 dark:text-indigo-400"
                        : "text-gray-700 hover:text-gray-900 dark:text-gray-400 hover:dark:text-gray-50",
                      "flex items-center gap-x-2.5 rounded-md px-2 py-1.5 text-sm font-medium transition hover:bg-gray-100 hover:dark:bg-gray-900 font-heading",
                      focusRing,
                    )}
                  >
                    <item.icon className="size-4 shrink-0" aria-hidden="true" />
                    {item.name}
                  </Link>
                </li>
              ))}
            </ul>
            <div>
              <span className="text-xs font-medium leading-6 text-gray-500 font-heading">
                Shortcuts
              </span>
              <ul aria-label="shortcuts" role="list" className="space-y-0.5">
                {shortcuts.map((item) => (
                  <li key={item.name}>
                    <Link
                      href={item.href}
                      className={cx(
                        pathname === item.href || pathname.startsWith(item.href)
                          ? "text-indigo-600 dark:text-indigo-400"
                          : "text-gray-700 hover:text-gray-900 dark:text-gray-400 hover:dark:text-gray-50",
                        "flex items-center gap-x-2.5 rounded-md px-2 py-1.5 text-sm font-medium transition hover:bg-gray-100 hover:dark:bg-gray-900 font-heading",
                        focusRing,
                      )}
                    >
                      <item.icon
                        className="size-4 shrink-0"
                        aria-hidden="true"
                      />
                      {item.name}
                    </Link>
                  </li>
                ))}
              </ul>
            </div>
          </nav>
          <div className="mt-auto">
            <UserProfileDesktop />
          </div>
        </aside>
      </nav>
      {/* top navbar (xs-lg) */}
      <div className="sticky top-0 z-40 flex h-16 shrink-0 items-center justify-between border-b border-gray-200 bg-white px-2 shadow-sm sm:gap-x-6 sm:px-4 lg:hidden dark:border-gray-800 dark:bg-gray-950">
        <WorkspacesDropdownMobile />
        <div className="flex items-center gap-1 sm:gap-2">
          <UserProfileMobile />
          <MobileSidebar />
        </div>
      </div>
    </>
  )
}

================
File: src/components/ui/navigation/SidebarWorkspacesDropdown.tsx
================
"use client"

import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/Dropdown"
import { cx, focusInput } from "@/lib/utils"
import { RiArrowRightSLine, RiExpandUpDownLine } from "@remixicon/react"
import React from "react"
import { ModalAddWorkspace } from "./ModalAddWorkspace"

const workspaces = [
  {
    value: "retail-analytics",
    name: "Retail analytics",
    initials: "RA",
    role: "Member",
    color: "bg-indigo-600 dark:bg-indigo-500",
  },
  // Add more workspaces...
]

export const WorkspacesDropdownDesktop = () => {
  const [dropdownOpen, setDropdownOpen] = React.useState(false)
  const [hasOpenDialog, setHasOpenDialog] = React.useState(false)
  const dropdownTriggerRef = React.useRef<null | HTMLButtonElement>(null)
  const focusRef = React.useRef<null | HTMLButtonElement>(null)

  const handleDialogItemSelect = () => {
    focusRef.current = dropdownTriggerRef.current
  }

  const handleDialogItemOpenChange = (open: boolean) => {
    setHasOpenDialog(open)
    if (open === false) {
      setDropdownOpen(false)
    }
  }
  return (
    <>
      {/* sidebar (lg+) */}
      <DropdownMenu
        open={dropdownOpen}
        onOpenChange={setDropdownOpen}
        modal={false}
      >
        <DropdownMenuTrigger asChild>
          <button
            className={cx(
              "flex w-full items-center gap-x-2.5 rounded-md border border-gray-300 bg-white p-2 text-sm shadow-sm transition-all hover:bg-gray-50 dark:border-gray-800 dark:bg-gray-950 hover:dark:bg-gray-900",
              focusInput,
            )}
          >
            <span
              className="flex aspect-square size-8 items-center justify-center rounded bg-indigo-600 p-2 text-xs font-medium text-white dark:bg-indigo-500"
              aria-hidden="true"
            >
              RA
            </span>
            <div className="flex w-full items-center justify-between gap-x-4 truncate">
              <div className="truncate">
                <p className="truncate whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-50">
                  Retail analytics
                </p>
                <p className="whitespace-nowrap text-left text-xs text-gray-700 dark:text-gray-300">
                  Member
                </p>
              </div>
              <RiExpandUpDownLine
                className="size-5 shrink-0 text-gray-500"
                aria-hidden="true"
              />
            </div>
          </button>
        </DropdownMenuTrigger>
        <DropdownMenuContent
          hidden={hasOpenDialog}
          onCloseAutoFocus={(event) => {
            if (focusRef.current) {
              focusRef.current.focus()
              focusRef.current = null
              event.preventDefault()
            }
          }}
        >
          <DropdownMenuGroup>
            <DropdownMenuLabel className="font-heading">
              Workspaces ({workspaces.length})
            </DropdownMenuLabel>
            {workspaces.map((workspace) => (
              <DropdownMenuItem key={workspace.value}>
                <div className="flex w-full items-center gap-x-2.5">
                  <span
                    className={cx(
                      workspace.color,
                      "flex aspect-square size-8 items-center justify-center rounded p-2 text-xs font-medium text-white",
                    )}
                    aria-hidden="true"
                  >
                    {workspace.initials}
                  </span>
                  <div>
                    <p className="text-sm font-medium text-gray-900 dark:text-gray-50 font-heading">
                      {workspace.name}
                    </p>
                    <p className="text-xs text-gray-700 dark:text-gray-400">
                      {workspace.role}
                    </p>
                  </div>
                </div>
              </DropdownMenuItem>
            ))}
          </DropdownMenuGroup>
          <DropdownMenuSeparator />
          <ModalAddWorkspace
            onSelect={handleDialogItemSelect}
            onOpenChange={handleDialogItemOpenChange}
            itemName="Add workspace"
          />
        </DropdownMenuContent>
      </DropdownMenu>
    </>
  )
}

export const WorkspacesDropdownMobile = () => {
  const [dropdownOpen, setDropdownOpen] = React.useState(false)
  const [hasOpenDialog, setHasOpenDialog] = React.useState(false)
  const dropdownTriggerRef = React.useRef<null | HTMLButtonElement>(null)
  const focusRef = React.useRef<null | HTMLButtonElement>(null)

  const handleDialogItemSelect = () => {
    focusRef.current = dropdownTriggerRef.current
  }

  const handleDialogItemOpenChange = (open: boolean) => {
    setHasOpenDialog(open)
    if (open === false) {
      setDropdownOpen(false)
    }
  }
  return (
    <>
      {/* sidebar (xs-lg) */}
      <DropdownMenu
        open={dropdownOpen}
        onOpenChange={setDropdownOpen}
        modal={false}
      >
        <DropdownMenuTrigger asChild>
          <button className="flex items-center gap-x-1.5 rounded-md p-2 hover:bg-gray-100 focus:outline-none hover:dark:bg-gray-900">
            <span
              className={cx(
                "flex aspect-square size-7 items-center justify-center rounded bg-indigo-600 p-2 text-xs font-medium text-white dark:bg-indigo-500",
              )}
              aria-hidden="true"
            >
              RA
            </span>
            <RiArrowRightSLine
              className="size-4 shrink-0 text-gray-500"
              aria-hidden="true"
            />
            <div className="flex w-full items-center justify-between gap-x-3 truncate">
              <p className="truncate whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-50">
                Retail analytics
              </p>
              <RiExpandUpDownLine
                className="size-4 shrink-0 text-gray-500"
                aria-hidden="true"
              />
            </div>
          </button>
        </DropdownMenuTrigger>
        <DropdownMenuContent
          className="!min-w-72"
          hidden={hasOpenDialog}
          onCloseAutoFocus={(event) => {
            if (focusRef.current) {
              focusRef.current.focus()
              focusRef.current = null
              event.preventDefault()
            }
          }}
        >
          <DropdownMenuGroup>
            <DropdownMenuLabel className="font-heading">
              Workspaces ({workspaces.length})
            </DropdownMenuLabel>
            {workspaces.map((workspace) => (
              <DropdownMenuItem key={workspace.value}>
                <div className="flex w-full items-center gap-x-2.5">
                  <span
                    className={cx(
                      workspace.color,
                      "flex size-8 items-center justify-center rounded p-2 text-xs font-medium text-white",
                    )}
                    aria-hidden="true"
                  >
                    {workspace.initials}
                  </span>
                  <div>
                    <p className="text-sm font-medium text-gray-900 dark:text-gray-50 font-heading">
                      {workspace.name}
                    </p>
                    <p className="text-xs text-gray-700 dark:text-gray-300">
                      {workspace.role}
                    </p>
                  </div>
                </div>
              </DropdownMenuItem>
            ))}
          </DropdownMenuGroup>
          <DropdownMenuSeparator />
          <ModalAddWorkspace
            onSelect={handleDialogItemSelect}
            onOpenChange={handleDialogItemOpenChange}
            itemName="Add workspace"
          />
        </DropdownMenuContent>
      </DropdownMenu>
    </>
  )
}

================
File: src/components/ui/navigation/UserProfile.tsx
================
"use client"

import { Button } from "@/components/Button"
import { cx, focusRing } from "@/lib/utils"
import { RiMore2Fill } from "@remixicon/react"

import { DropdownUserProfile } from "./DropdownUserProfile"

export const UserProfileDesktop = () => {
  return (
    <DropdownUserProfile>
      <Button
        aria-label="User settings"
        variant="ghost"
        className={cx(
          focusRing,
          "group flex w-full items-center justify-between rounded-md p-2 text-sm font-medium text-gray-900 hover:bg-gray-100 data-[state=open]:bg-gray-100 data-[state=open]:bg-gray-400/10 hover:dark:bg-gray-400/10",
        )}
      >
        <span className="flex items-center gap-3">
          <span
            className="flex size-8 shrink-0 items-center justify-center rounded-full border border-gray-300 bg-white text-xs text-gray-700 dark:border-gray-800 dark:bg-gray-950 dark:text-gray-300"
            aria-hidden="true"
          >
            ES
          </span>
          <span>Emma Stone</span>
        </span>
        <RiMore2Fill
          className="size-4 shrink-0 text-gray-500 group-hover:text-gray-700 group-hover:dark:text-gray-400"
          aria-hidden="true"
        />
      </Button>
    </DropdownUserProfile>
  )
}

export const UserProfileMobile = () => {
  return (
    <DropdownUserProfile align="end">
      <Button
        aria-label="User settings"
        variant="ghost"
        className={cx(
          "group flex items-center rounded-md p-1 text-sm font-medium text-gray-900 hover:bg-gray-100 data-[state=open]:bg-gray-100 data-[state=open]:bg-gray-400/10 hover:dark:bg-gray-400/10",
        )}
      >
        <span
          className="flex size-7 shrink-0 items-center justify-center rounded-full border border-gray-300 bg-white text-xs text-gray-700 dark:border-gray-800 dark:bg-gray-950 dark:text-gray-300"
          aria-hidden="true"
        >
          ES
        </span>
      </Button>
    </DropdownUserProfile>
  )
}

================
File: src/components/ui/overview/DashboardCategoryBarCard.tsx
================
import { Badge } from "@/components/Badge"
import { cx } from "@/lib/utils"

import type { KpiEntryExtended } from "@/app/(main)/overview/page"

export type CardProps = {
  title: string
  change: string
  value: string
  valueDescription: string
  subtitle: string
  ctaDescription: string
  ctaText: string
  ctaLink: string
  data: KpiEntryExtended[]
}

export function CategoryBarCard({
  title,
  change,
  value,
  valueDescription,
  subtitle,
  ctaDescription,
  ctaText,
  ctaLink,
  data,
}: CardProps) {
  return (
    <>
      <div className="flex flex-col justify-between">
        <div>
          <div className="flex items-center gap-2">
            <h3 className="font-bold text-gray-900 sm:text-sm dark:text-gray-50 font-heading">
              {title}
            </h3>
            <Badge variant="neutral">{change}</Badge>
          </div>
          <p className="mt-2 flex items-baseline gap-2">
            <span className="text-xl text-gray-900 dark:text-gray-50">
              {value}
            </span>
            <span className="text-sm text-gray-500">{valueDescription}</span>
          </p>
          <div className="mt-4">
            <p className="text-sm font-medium text-gray-900 dark:text-gray-50 font-heading">
              {subtitle}
            </p>
            <div className="mt-2 flex items-center gap-0.5">
              {data.map((item) => (
                <div
                  key={item.title}
                  className={cx(item.color, `h-1.5 rounded-full`)}
                  style={{ width: `${item.percentage}%` }}
                />
              ))}
            </div>
          </div>
          <ul role="list" className="mt-5 space-y-2">
            {data.map((item) => (
              <li key={item.title} className="flex items-center gap-2 text-xs">
                <span
                  className={cx(item.color, "size-2.5 rounded-sm")}
                  aria-hidden="true"
                />
                <span className="text-gray-900 dark:text-gray-50">
                  {item.title}
                </span>
                <span className="text-gray-600 dark:text-gray-400">
                  ({item.value} / {item.percentage}%)
                </span>
              </li>
            ))}
          </ul>
        </div>
        <p className="mt-6 text-xs text-gray-500">
          {ctaDescription}{" "}
          <a href={ctaLink} className="text-indigo-600 dark:text-indigo-400">
            {ctaText}
          </a>
        </p>
      </div>
    </>
  )
}

================
File: src/components/ui/overview/DashboardChartCard.tsx
================
import { PeriodValue } from "@/app/(main)/overview/page"
import { Badge } from "@/components/Badge"
import { LineChart } from "@/components/LineChart"
import { overviews } from "@/data/overview-data"
import { OverviewData } from "@/data/schema"
import { cx, formatters, percentageFormatter } from "@/lib/utils"
import {
  eachDayOfInterval,
  formatDate,
  interval,
  isWithinInterval,
} from "date-fns"
import { DateRange } from "react-day-picker"
import { getPeriod } from "./DashboardFilterbar"

export type CardProps = {
  title: keyof OverviewData
  type: "currency" | "unit"
  selectedDates: DateRange | undefined
  selectedPeriod: PeriodValue
  isThumbnail?: boolean
}

const formattingMap = {
  currency: formatters.currency,
  unit: formatters.unit,
}

export const getBadgeType = (value: number) => {
  if (value > 0) {
    return "success"
  } else if (value < 0) {
    if (value < -50) {
      return "warning"
    }
    return "error"
  } else {
    return "neutral"
  }
}

export function ChartCard({
  title,
  type,
  selectedDates,
  selectedPeriod,
  isThumbnail,
}: CardProps) {
  const formatter = formattingMap[type]
  const selectedDatesInterval =
    selectedDates?.from && selectedDates?.to
      ? interval(selectedDates.from, selectedDates.to)
      : null
  const allDatesInInterval =
    selectedDates?.from && selectedDates?.to
      ? eachDayOfInterval(interval(selectedDates.from, selectedDates.to))
      : null
  const prevDates = getPeriod(selectedDates, selectedPeriod)

  const prevDatesInterval =
    prevDates?.from && prevDates?.to
      ? interval(prevDates.from, prevDates.to)
      : null

  const data = overviews
    .filter((overview) => {
      if (selectedDatesInterval) {
        return isWithinInterval(overview.date, selectedDatesInterval)
      }
      return true
    })
    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())

  const prevData = overviews
    .filter((overview) => {
      if (prevDatesInterval) {
        return isWithinInterval(overview.date, prevDatesInterval)
      }
      return false
    })
    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())

  const chartData = allDatesInInterval
    ?.map((date, index) => {
      const overview = data[index]
      const prevOverview = prevData[index]
      const value = (overview?.[title] as number) || null
      const previousValue = (prevOverview?.[title] as number) || null

      return {
        title,
        date: date,
        formattedDate: formatDate(date, "dd/MM/yyyy"),
        value,
        previousDate: prevOverview?.date,
        previousFormattedDate: prevOverview
          ? formatDate(prevOverview.date, "dd/MM/yyyy")
          : null,
        previousValue:
          selectedPeriod !== "no-comparison" ? previousValue : null,
        evolution:
          selectedPeriod !== "no-comparison" && value && previousValue
            ? (value - previousValue) / previousValue
            : undefined,
      }
    })
    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())

  const categories =
    selectedPeriod === "no-comparison" ? ["value"] : ["value", "previousValue"]
  const value =
    chartData?.reduce((acc, item) => acc + (item.value || 0), 0) || 0
  const previousValue =
    chartData?.reduce((acc, item) => acc + (item.previousValue || 0), 0) || 0
  const evolution =
    selectedPeriod !== "no-comparison"
      ? (value - previousValue) / previousValue
      : 0

  return (
    <div className={cx("transition")}>
      <div className="flex items-center justify-between gap-x-2">
        <div className="flex items-center gap-x-2">
          <dt className="font-bold text-gray-900 sm:text-sm dark:text-gray-50 font-heading">
            {title}
          </dt>
          {selectedPeriod !== "no-comparison" && (
            <Badge variant={getBadgeType(evolution)}>
              {percentageFormatter(evolution)}
            </Badge>
          )}
        </div>
      </div>
      <div className="mt-2 flex items-baseline justify-between">
        <dd className="text-xl text-gray-900 dark:text-gray-50">
          {formatter(value)}
        </dd>
        {selectedPeriod !== "no-comparison" && (
          <dd className="text-sm text-gray-500">
            from {formatter(previousValue)}
          </dd>
        )}
      </div>
      <LineChart
        className="mt-6 h-32"
        data={chartData || []}
        index="formattedDate"
        colors={["indigo", "gray"]}
        startEndOnly={true}
        valueFormatter={(value) => formatter(value as number)}
        showYAxis={false}
        showLegend={false}
        categories={categories}
        showTooltip={isThumbnail ? false : true}
        autoMinValue
      />
    </div>
  )
}

================
File: src/components/ui/overview/DashboardFilterbar.tsx
================
"use client"

import {
  Select,
  SelectContent,
  SelectItemPeriod,
  SelectTrigger,
  SelectValue,
} from "@/components/Select"

import { Label } from "@/components/Label"

import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/Dialog"

import { PeriodValue } from "@/app/(main)/overview/page"
import { Button } from "@/components/Button"
import { Checkbox } from "@/components/Checkbox"
import { DateRangePicker } from "@/components/DatePicker"
import { cx } from "@/lib/utils"
import { RiSettings5Line } from "@remixicon/react"
import { eachDayOfInterval, interval, subDays, subYears } from "date-fns"
import React from "react"
import { DateRange } from "react-day-picker"
import { ChartCard } from "./DashboardChartCard"

type Period = {
  value: PeriodValue
  label: string
}

const periods: Period[] = [
  {
    value: "previous-period",
    label: "Previous period",
  },
  {
    value: "last-year",
    label: "Last year",
  },
  {
    value: "no-comparison",
    label: "No comparison",
  },
]

export const getPeriod = (
  dateRange: DateRange | undefined,
  value: PeriodValue,
): DateRange | undefined => {
  if (!dateRange) return undefined
  const from = dateRange.from
  const to = dateRange.to
  switch (value) {
    case "previous-period":
      let previousPeriodFrom
      let previousPeriodTo
      if (from && to) {
        const datesInterval = interval(from, to)
        const numberOfDaysBetween = eachDayOfInterval(datesInterval).length
        previousPeriodTo = subDays(from, 1)
        previousPeriodFrom = subDays(previousPeriodTo, numberOfDaysBetween)
      }
      return { from: previousPeriodFrom, to: previousPeriodTo }
    case "last-year":
      let lastYearFrom
      let lastYearTo
      if (from) {
        lastYearFrom = subYears(from, 1)
      }
      if (to) {
        lastYearTo = subYears(to, 1)
      }
      return { from: lastYearFrom, to: lastYearTo }
    case "no-comparison":
      return undefined
  }
}

type FilterbarProps = {
  maxDate?: Date
  minDate?: Date
  selectedDates: DateRange | undefined
  onDatesChange: (dates: DateRange | undefined) => void
  selectedPeriod: PeriodValue
  onPeriodChange: (period: PeriodValue) => void
  categories: any[]
  setSelectedCategories: any
  selectedCategories: any
}

export function Filterbar({
  maxDate,
  minDate,
  selectedDates,
  onDatesChange,
  selectedPeriod,
  onPeriodChange,
  categories,
  setSelectedCategories,
  selectedCategories,
}: FilterbarProps) {
  const [tempSelectedCategories, setTempSelectedCategories] =
    React.useState(selectedCategories)

  const handleCategoryChange = (category: string) => {
    setTempSelectedCategories((prev: any) =>
      prev.includes(category)
        ? prev.filter((item: any) => item !== category)
        : [...prev, category],
    )
  }

  const handleApply = () => {
    setSelectedCategories(tempSelectedCategories)
  }
  return (
    <div className="flex w-full justify-between">
      <div className="w-full sm:flex sm:items-center sm:gap-2">
        <DateRangePicker
          value={selectedDates}
          onChange={onDatesChange}
          className="w-full sm:w-fit"
          toDate={maxDate}
          fromDate={minDate}
          align="start"
        />
        <span className="hidden text-sm font-medium text-gray-500 sm:block">
          compared to
        </span>
        <Select
          defaultValue="no-comparison"
          value={selectedPeriod}
          onValueChange={(value) => {
            onPeriodChange(value as PeriodValue)
          }}
        >
          <SelectTrigger className="mt-2 w-full sm:mt-0 sm:w-fit">
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            {periods.map((period) => (
              <SelectItemPeriod
                key={period.value}
                value={period.value}
                period={getPeriod(selectedDates, period.value)}
              >
                {period.label}
              </SelectItemPeriod>
            ))}
          </SelectContent>
        </Select>
      </div>
      <Dialog>
        <DialogTrigger asChild>
          <Button
            variant="secondary"
            className="hidden gap-2 px-2 py-1 sm:flex"
          >
            <RiSettings5Line
              className="-ml-0.5 size-4 shrink-0"
              aria-hidden="true"
            />
            <span>Edit</span>
          </Button>
        </DialogTrigger>
        <DialogContent className="max-w-5xl">
          <DialogHeader>
            <DialogTitle>Customise overview charts</DialogTitle>
            <DialogDescription className="sr-only">
              Add or remove the charts for the overview panel.
            </DialogDescription>
          </DialogHeader>
          <div
            className={cx(
              "mt-8 grid max-h-[70vh] grid-cols-1 gap-4 overflow-y-scroll sm:grid-cols-1 md:grid-cols-2 xl:grid-cols-3",
            )}
          >
            {categories.map((category) => {
              return (
                <Label
                  htmlFor={category.title}
                  key={category.title}
                  className="relative cursor-pointer rounded-md border border-gray-200 p-4 shadow-sm dark:border-gray-800"
                >
                  <Checkbox
                    id={category.title}
                    className="absolute right-4"
                    checked={tempSelectedCategories.includes(category.title)}
                    onCheckedChange={() => handleCategoryChange(category.title)}
                  />
                  <div className="pointer-events-none">
                    <ChartCard
                      title={category.title}
                      type={category.type}
                      selectedDates={selectedDates}
                      selectedPeriod={selectedPeriod}
                      isThumbnail={true}
                    />
                  </div>
                </Label>
              )
            })}
          </div>
          <DialogFooter className="mt-6">
            <DialogClose asChild>
              <Button
                className="mt-2 w-full sm:mt-0 sm:w-fit"
                variant="secondary"
              >
                Cancel
              </Button>
            </DialogClose>
            <DialogClose asChild>
              <Button className="w-full sm:w-fit" onClick={handleApply}>
                Apply
              </Button>
            </DialogClose>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}

================
File: src/components/ui/overview/DashboardProgressBarCard.tsx
================
import { Badge } from "@/components/Badge"
import { ProgressBar } from "@/components/ProgressBar"

import { KpiEntry } from "@/app/(main)/overview/page"

export type CardProps = {
  title: string
  change: string
  value: string
  valueDescription: string
  ctaDescription: string
  ctaText: string
  ctaLink: string
  data: KpiEntry[]
}

export function ProgressBarCard({
  title,
  change,
  value,
  valueDescription,
  ctaDescription,
  ctaText,
  ctaLink,
  data,
}: CardProps) {
  return (
    <>
      <div className="flex flex-col justify-between">
        <div>
          <div className="flex items-center gap-2">
            <dt className="font-bold text-gray-900 sm:text-sm dark:text-gray-50 font-heading">
              {title}
            </dt>
            <Badge variant="neutral">{change}</Badge>
          </div>
          <dd className="mt-2 flex items-baseline gap-2">
            <span className="text-xl text-gray-900 dark:text-gray-50">
              {value}
            </span>
            <span className="text-sm text-gray-500">{valueDescription}</span>
          </dd>
          <ul role="list" className="mt-4 space-y-5">
            {data.map((item) => (
              <li key={item.title}>
                <p className="flex justify-between text-sm">
                  <span className="font-medium text-gray-900 dark:text-gray-50">
                    {item.title}
                  </span>
                  <span className="font-medium text-gray-900 dark:text-gray-50">
                    {item.current}
                    <span className="font-normal text-gray-500">
                      /{item.allowed}
                      {item.unit}
                    </span>
                  </span>
                </p>
                <ProgressBar
                  value={item.percentage}
                  className="mt-2 [&>*]:h-1.5"
                />
              </li>
            ))}
          </ul>
        </div>
        <div>
          <p className="mt-6 text-xs text-gray-500">
            {ctaDescription}{" "}
            <a href={ctaLink} className="text-indigo-600 dark:text-indigo-400">
              {ctaText}
            </a>
          </p>
        </div>
      </div>
    </>
  )
}

================
File: src/components/ui/overview/FeatureBento.tsx
================
export default function FeatureBento() {
    return (
        <div className="bg-gray-50 py-24 sm:py-32">
            <div className="mx-auto max-w-2xl px-6 lg:max-w-7xl lg:px-8">
                <h2 className="text-center text-base/7 font-semibold text-indigo-600">Deploy faster</h2>
                <p className="mx-auto mt-2 max-w-lg text-balance text-center text-4xl font-semibold tracking-tight text-gray-950 sm:text-5xl">
                    Everything you need to deploy your app
                </p>
                <div className="mt-10 grid gap-4 sm:mt-16 lg:grid-cols-3 lg:grid-rows-2">
                    <div className="relative lg:row-span-2">
                        <div className="absolute inset-px rounded-lg bg-white lg:rounded-l-[2rem]"></div>
                        <div className="relative flex h-full flex-col overflow-hidden rounded-[calc(theme(borderRadius.lg)+1px)] lg:rounded-l-[calc(2rem+1px)]">
                            <div className="px-8 pb-3 pt-8 sm:px-10 sm:pb-0 sm:pt-10">
                                <p className="mt-2 text-lg font-medium tracking-tight text-gray-950 max-lg:text-center">
                                    Mobile friendly
                                </p>
                                <p className="mt-2 max-w-lg text-sm/6 text-gray-600 max-lg:text-center">
                                    Anim aute id magna aliqua ad ad non deserunt sunt. Qui irure qui lorem cupidatat commodo.
                                </p>
                            </div>
                            <div className="relative min-h-[30rem] w-full grow [container-type:inline-size] max-lg:mx-auto max-lg:max-w-sm">
                                <div className="absolute inset-x-10 bottom-0 top-10 overflow-hidden rounded-t-[12cqw] border-x-[3cqw] border-t-[3cqw] border-gray-700 bg-gray-900 shadow-2xl">
                                    <img
                                        className="size-full object-cover object-top"
                                        src="https://tailwindcss.com/plus-assets/img/component-images/bento-03-mobile-friendly.png"
                                        alt=""
                                    />
                                </div>
                            </div>
                        </div>
                        <div className="pointer-events-none absolute inset-px rounded-lg shadow ring-1 ring-black/5 lg:rounded-l-[2rem]"></div>
                    </div>
                    <div className="relative max-lg:row-start-1">
                        <div className="absolute inset-px rounded-lg bg-white max-lg:rounded-t-[2rem]"></div>
                        <div className="relative flex h-full flex-col overflow-hidden rounded-[calc(theme(borderRadius.lg)+1px)] max-lg:rounded-t-[calc(2rem+1px)]">
                            <div className="px-8 pt-8 sm:px-10 sm:pt-10">
                                <p className="mt-2 text-lg font-medium tracking-tight text-gray-950 max-lg:text-center">Performance</p>
                                <p className="mt-2 max-w-lg text-sm/6 text-gray-600 max-lg:text-center">
                                    Lorem ipsum, dolor sit amet consectetur adipisicing elit maiores impedit.
                                </p>
                            </div>
                            <div className="flex flex-1 items-center justify-center px-8 max-lg:pb-12 max-lg:pt-10 sm:px-10 lg:pb-2">
                                <img
                                    className="w-full max-lg:max-w-xs"
                                    src="https://tailwindcss.com/plus-assets/img/component-images/bento-03-performance.png"
                                    alt=""
                                />
                            </div>
                        </div>
                        <div className="pointer-events-none absolute inset-px rounded-lg shadow ring-1 ring-black/5 max-lg:rounded-t-[2rem]"></div>
                    </div>
                    <div className="relative max-lg:row-start-3 lg:col-start-2 lg:row-start-2">
                        <div className="absolute inset-px rounded-lg bg-white"></div>
                        <div className="relative flex h-full flex-col overflow-hidden rounded-[calc(theme(borderRadius.lg)+1px)]">
                            <div className="px-8 pt-8 sm:px-10 sm:pt-10">
                                <p className="mt-2 text-lg font-medium tracking-tight text-gray-950 max-lg:text-center">Security</p>
                                <p className="mt-2 max-w-lg text-sm/6 text-gray-600 max-lg:text-center">
                                    Morbi viverra dui mi arcu sed. Tellus semper adipiscing suspendisse semper morbi.
                                </p>
                            </div>
                            <div className="flex flex-1 items-center [container-type:inline-size] max-lg:py-6 lg:pb-2">
                                <img
                                    className="h-[min(152px,40cqw)] object-cover"
                                    src="https://tailwindcss.com/plus-assets/img/component-images/bento-03-security.png"
                                    alt=""
                                />
                            </div>
                        </div>
                        <div className="pointer-events-none absolute inset-px rounded-lg shadow ring-1 ring-black/5"></div>
                    </div>
                    <div className="relative lg:row-span-2">
                        <div className="absolute inset-px rounded-lg bg-white max-lg:rounded-b-[2rem] lg:rounded-r-[2rem]"></div>
                        <div className="relative flex h-full flex-col overflow-hidden rounded-[calc(theme(borderRadius.lg)+1px)] max-lg:rounded-b-[calc(2rem+1px)] lg:rounded-r-[calc(2rem+1px)]">
                            <div className="px-8 pb-3 pt-8 sm:px-10 sm:pb-0 sm:pt-10">
                                <p className="mt-2 text-lg font-medium tracking-tight text-gray-950 max-lg:text-center">
                                    Powerful APIs
                                </p>
                                <p className="mt-2 max-w-lg text-sm/6 text-gray-600 max-lg:text-center">
                                    Sit quis amet rutrum tellus ullamcorper ultricies libero dolor eget sem sodales gravida.
                                </p>
                            </div>
                            <div className="relative min-h-[30rem] w-full grow">
                                <div className="absolute bottom-0 left-10 right-0 top-10 overflow-hidden rounded-tl-xl bg-gray-900 shadow-2xl">
                                    <div className="flex bg-gray-800/40 ring-1 ring-white/5">
                                        <div className="-mb-px flex text-sm/6 font-medium text-gray-400">
                                            <div className="border-b border-r border-b-white/20 border-r-white/10 bg-white/5 px-4 py-2 text-white">
                                                NotificationSetting.jsx
                                            </div>
                                            <div className="border-r border-gray-600/10 px-4 py-2">App.jsx</div>
                                        </div>
                                    </div>
                                    <div className="px-6 pb-14 pt-6">{/* Your code example */}</div>
                                </div>
                            </div>
                        </div>
                        <div className="pointer-events-none absolute inset-px rounded-lg shadow ring-1 ring-black/5 max-lg:rounded-b-[2rem] lg:rounded-r-[2rem]"></div>
                    </div>
                </div>
            </div>
        </div>
    )
}

================
File: src/components/ui/overview/HeroBento.tsx
================
// 'use client';

import { RiArrowRightSLine } from '@remixicon/react';
import createGlobe from 'cobe';
import { useEffect, useRef } from 'react';

function GlobeCanvas() {
    const canvasRef = useRef(null);

    useEffect(function () {
        let phi = 4;
        let globe: ReturnType<typeof createGlobe> | undefined;

        if (canvasRef.current) {
            globe = createGlobe(canvasRef.current, {
                devicePixelRatio: 2,
                width: 800 * 2,
                height: 800 * 2,
                phi: 0,
                theta: -0.3,
                dark: 0,
                diffuse: 1.2,
                mapSamples: 30000,
                mapBrightness: 13,
                mapBaseBrightness: 0.01,
                baseColor: [1, 1, 1],
                glowColor: [1, 1, 1],
                markerColor: [100, 100, 100],
                markers: [],
                onRender: function (state) {
                    state.phi = phi;
                    phi += 0.0005;
                },
            });
        }

        return function () {
            if (globe) {
                globe.destroy();
            }
        };
    }, []);

    return (
        <canvas
            ref={canvasRef}
            style={{ width: 800, height: 800 }}
            className="absolute -right-72 top-40 z-10 aspect-square size-full max-w-fit transition-transform group-hover:scale-[1.01] sm:top-12 lg:-right-60 lg:top-0"
        />
    );
}

export default function Example() {
    return (
        <>
            <div className="mx-auto w-full max-w-6xl px-3 py-8 sm:py-20">
                <span className="block text-lg font-semibold tracking-tighter text-blue-500">
                    AI-Powered
                </span>
                <h2
                    id="features-title"
                    className="mt-2 inline-block bg-gradient-to-br from-gray-900 to-gray-800 bg-clip-text py-2 text-3xl font-bold tracking-tighter text-transparent dark:from-gray-50 dark:to-gray-300 sm:text-5xl"
                >
                    Revolutionize your customer service
                </h2>
                <p className="mt-6 max-w-3xl text-lg leading-7 text-gray-600 dark:text-gray-400">
                    Harness the power of AI to provide 24/7 support, reduce response
                    times, and increase customer satisfaction with our cutting-edge
                    solutions.
                </p>
                <div className="mt-12 grid grid-cols-1 gap-4 lg:grid-cols-3">
                    <a
                        href="#"
                        className="group relative col-span-1 overflow-hidden rounded-b rounded-t-2xl bg-gray-50 p-8 shadow-2xl shadow-black/10 ring-1 ring-black/5 dark:bg-gray-900 dark:ring-white/5 lg:col-span-2 lg:rounded-l-2xl lg:rounded-r"
                    >
                        <div className="relative z-20">
                            <h3 className="text-2xl font-semibold text-gray-950 dark:text-gray-50">
                                AI Chatbot Integration
                            </h3>
                            <p className="mt-4 max-w-sm text-gray-700 dark:text-gray-400">
                                Seamlessly integrate our advanced AI chatbots to handle customer
                                queries instantly, freeing up your human agents for complex
                                issues.
                            </p>
                            <div className="mt-12 flex w-fit items-center gap-0.5 rounded bg-white/10 px-2 py-1 text-blue-500 backdrop-blur-[3px]">
                                <span>Explore features</span>
                                <RiArrowRightSLine className="mt-0.5 size-5 transition-all group-hover:translate-x-1 group-hover:opacity-100 sm:opacity-20" />
                            </div>
                        </div>
                        <GlobeCanvas />
                    </a>
                    <div className="rounded-b-2xl rounded-t bg-gradient-to-br from-blue-400 to-blue-600 p-8 shadow-lg shadow-blue-500/20 lg:rounded-l lg:rounded-r-2xl">
                        <figure className="flex h-full flex-col justify-between">
                            <blockquote className="text-base font-medium text-gray-50 sm:text-lg/8">
                                <p className="relative bg-gradient-to-br from-blue-100 to-white bg-clip-text font-medium leading-7 tracking-tighter text-transparent before:absolute before:right-full before:top-0">
                                    The AI-powered customer support has completely transformed our
                                    service capabilities. We&apos;ve seen a 70% reduction in response
                                    times and a significant increase in customer satisfaction
                                    scores.
                                </p>
                            </blockquote>
                            <figcaption className="mt-8 flex items-center space-x-4 sm:mt-0">
                                <div className="flex-auto">
                                    <div className="mt-7 text-sm font-semibold text-gray-50">
                                        <div>
                                            <span className="absolute inset-0" />
                                            Sarah Johnson
                                        </div>
                                    </div>
                                    <span className="text-sm text-blue-200">
                                        CX Director, TechInnovate
                                    </span>
                                </div>
                            </figcaption>
                        </figure>
                    </div>
                </div>
            </div>
        </>
    );
}

================
File: src/components/ui/overview/HeroGlobe.tsx
================
'use client';

import createGlobe from 'cobe';
import { useEffect, useRef } from 'react';

export default function HeroGlobe() {
    const canvasRef = useRef(null);

    useEffect(() => {
        let phi = 4.7;

        if (!canvasRef.current) return;

        const globe = createGlobe(canvasRef.current, {
            devicePixelRatio: 2,
            width: 1200 * 2,
            height: 1200 * 2,
            phi: 0,
            theta: -0.3,
            dark: 1,
            diffuse: 1.2,
            mapSamples: 25000,
            mapBrightness: 13,
            mapBaseBrightness: 0.05,
            baseColor: [0.3, 0.3, 0.3],
            glowColor: [0.15, 0.15, 0.15],
            markerColor: [100, 100, 100],
            markers: [
                // { location: [37.7595, -122.4367], size: 0.03 }, // San Francisco
                // { location: [40.7128, -74.006], size: 0.03 }, // New York City
                // { location: [35.6895, 139.6917], size: 0.03 }, // Tokyo
                // { location: [28.7041, 77.1025], size: 0.03 }, // Delhi
            ],
            onRender: (state) => {
                state.phi = phi;
                phi += 0.0002;
            },
        });

        return () => {
            globe.destroy();
        };
    }, []);

    const features = [
        {
            name: 'Global Clusters',
            description: 'Enable low-latency global access, enhancing performance.',
        },
        {
            name: 'Serverless Triggers',
            description: 'Trigger functions automatically for dynamic app behavior.',
        },
        {
            name: 'Monitoring & Alerts',
            description:
                'Monitor health with key metrics or integrate third-party tools.',
        },
    ];

    return (
        <>
            <div className="sm:px-3">
                <div className="relative mx-auto flex w-full max-w-6xl flex-col items-center justify-center overflow-hidden rounded-3xl bg-gray-950 pt-24 shadow-xl shadow-black/30">
                    <div className="absolute top-[17rem] size-[40rem] rounded-full bg-blue-800 blur-3xl md:top-[20rem]" />
                    <div className="z-10 inline-block rounded-lg border border-blue-400/20 bg-blue-800/20 px-3 py-1.5 font-semibold uppercase leading-4 tracking-tight sm:text-sm">
                        <span className="bg-gradient-to-b from-blue-200 to-blue-400 bg-clip-text text-transparent">
                            Made for the cloud
                        </span>
                    </div>
                    <h2
                        id="global-database-title"
                        className="z-10 mt-6 inline-block bg-gradient-to-b from-white to-blue-100 bg-clip-text px-2 text-center text-5xl font-bold tracking-tighter text-transparent md:text-8xl"
                    >
                        The global <br className="md:bock hidden" /> cloud database
                    </h2>
                    <canvas
                        className="absolute top-[10rem] z-20 aspect-square size-full max-w-fit sm:top-[7.1rem] md:top-[12rem]"
                        ref={canvasRef}
                        style={{ width: 1200, height: 1200 }}
                    />
                    <div className="z-20 -mt-32 h-[36rem] w-full overflow-hidden md:-mt-36">
                        <div className="absolute bottom-0 h-3/5 w-full bg-gradient-to-b from-transparent via-gray-950/95 to-gray-950" />
                        <div className="absolute inset-x-6 bottom-12 m-auto max-w-4xl md:top-2/3">
                            <div className="grid grid-cols-1 gap-x-10 gap-y-6 rounded-lg border border-white/[3%] bg-white/[1%] px-6 py-6 shadow-xl backdrop-blur md:grid-cols-3 md:p-8">
                                {features.map((item) => (
                                    <div key={item.name} className="flex flex-col gap-2">
                                        <h3 className="whitespace-nowrap bg-gradient-to-b from-blue-300 to-blue-500 bg-clip-text text-lg font-semibold text-transparent md:text-xl">
                                            {item.name}
                                        </h3>
                                        <p className="text-sm leading-6 text-blue-200/40">
                                            {item.description}
                                        </p>
                                    </div>
                                ))}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </>
    );
}

================
File: src/components/ui/settings/ModalAddUser.tsx
================
import { Button } from "@/components/Button"
import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/Dialog"
import { Input } from "@/components/Input"
import { Label } from "@/components/Label"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/Select"
import { roles } from "@/data/data"

export type ModalAddUserProps = {
  children: React.ReactNode
}

export function ModalAddUser({ children }: ModalAddUserProps) {
  return (
    <Dialog>
      <DialogTrigger asChild>{children}</DialogTrigger>
      <DialogContent className="sm:max-w-lg">
        <form>
          <DialogHeader>
            <DialogTitle>Invite people to your workspace</DialogTitle>
            <DialogDescription className="mt-1 text-sm leading-6">
              With free plan, you can add up to 10 users to each workspace.
            </DialogDescription>
            <div className="mt-4">
              <Label htmlFor="email-new-user" className="font-medium">
                Email
              </Label>
              <Input
                id="email-new-user"
                name="email-new-user"
                placeholder="Insert email..."
                className="mt-2"
              />
            </div>
            <div className="mt-4">
              <Label htmlFor="role-new-user" className="font-medium">
                Select role
              </Label>
              <Select>
                <SelectTrigger
                  id="role-new-user"
                  name="role-new-user"
                  className="mt-2"
                >
                  <SelectValue placeholder="Select role..." />
                </SelectTrigger>
                <SelectContent align="end">
                  {roles.map((role) => (
                    <SelectItem
                      key={role.value}
                      value={role.value}
                      disabled={role.value === "admin"}
                    >
                      {role.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </DialogHeader>
          <DialogFooter className="mt-6">
            <DialogClose asChild>
              <Button
                className="mt-2 w-full sm:mt-0 sm:w-fit"
                variant="secondary"
              >
                Go back
              </Button>
            </DialogClose>
            <DialogClose asChild>
              <Button type="submit" className="w-full sm:w-fit">
                Add user
              </Button>
            </DialogClose>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  )
}

================
File: src/components/Badge.tsx
================
// Tremor Raw Badge [v0.0.0]

import React from "react"
import { tv, type VariantProps } from "tailwind-variants"

import { cx } from "@/lib/utils"

const badgeVariants = tv({
  base: cx(
    "inline-flex items-center gap-x-1 whitespace-nowrap rounded px-1.5 py-0.5 text-xs font-semibold ring-1",
  ),
  variants: {
    variant: {
      default: [
        "bg-indigo-50 text-indigo-800 ring-indigo-500/30",
        "dark:bg-indigo-400/10 dark:text-indigo-400 dark:ring-indigo-400/30",
      ],
      neutral: [
        "bg-gray-50 text-gray-700 ring-gray-500/30",
        "dark:bg-gray-400/10 dark:text-gray-300 dark:ring-gray-400/20",
      ],
      success: [
        "bg-emerald-50 text-emerald-800 ring-emerald-600/30",
        "dark:bg-emerald-400/10 dark:text-emerald-400 dark:ring-emerald-400/20",
      ],
      error: [
        "bg-red-50 text-red-800 ring-red-600/20",
        "dark:bg-red-400/10 dark:text-red-400 dark:ring-red-400/20",
      ],
      warning: [
        "bg-yellow-50 text-yellow-800 ring-yellow-600/30",
        "dark:bg-yellow-400/10 dark:text-yellow-500 dark:ring-yellow-400/20",
      ],
    },
  },
  defaultVariants: {
    variant: "default",
  },
})

interface BadgeProps
  extends React.ComponentPropsWithoutRef<"span">,
    VariantProps<typeof badgeVariants> {}

const Badge = React.forwardRef<HTMLSpanElement, BadgeProps>(
  ({ className, variant, ...props }: BadgeProps, forwardedRef) => {
    return (
      <span
        ref={forwardedRef}
        className={cx(badgeVariants({ variant }), className)}
        {...props}
      />
    )
  },
)

Badge.displayName = "Badge"

export { Badge, badgeVariants, type BadgeProps }

================
File: src/components/Button.tsx
================
// Tremor Raw Button [v0.1.1]

import { Slot } from "@radix-ui/react-slot"
import { RiLoader2Fill } from "@remixicon/react"
import React from "react"
import { tv, type VariantProps } from "tailwind-variants"

import { cx, focusRing } from "@/lib/utils"

const buttonVariants = tv({
  base: [
    // base
    "relative inline-flex items-center justify-center whitespace-nowrap rounded-md border px-3 py-2 text-center text-sm font-medium shadow-sm transition-all duration-100 ease-in-out",
    // disabled
    "disabled:pointer-events-none disabled:shadow-none",
    // focus
    focusRing,
  ],
  variants: {
    variant: {
      primary: [
        // border
        "border-transparent",
        // text color
        "text-white dark:text-gray-900",
        // background color
        "bg-indigo-600 dark:bg-indigo-500",
        // hover color
        "hover:bg-indigo-500 dark:hover:bg-indigo-600",
        // disabled
        "disabled:bg-indigo-100 disabled:text-gray-400",
        "disabled:dark:bg-indigo-800 disabled:dark:text-indigo-400",
      ],
      secondary: [
        // border
        "border-gray-300 dark:border-gray-800",
        // text color
        "text-gray-900 dark:text-gray-50",
        // background color
        "bg-white dark:bg-gray-950",
        //hover color
        "hover:bg-gray-50 dark:hover:bg-gray-900/60",
        // disabled
        "disabled:text-gray-400",
        "disabled:dark:text-gray-600",
      ],
      light: [
        // base
        "shadow-none",
        // border
        "border-transparent",
        // text color
        "text-gray-900 dark:text-gray-50",
        // background color
        "bg-gray-200 dark:bg-gray-900",
        // hover color
        "hover:bg-gray-300/70 dark:hover:bg-gray-800/80",
        // disabled
        "disabled:bg-gray-100 disabled:text-gray-400",
        "disabled:dark:bg-gray-800 disabled:dark:text-gray-600",
      ],
      ghost: [
        // base
        "shadow-none",
        // border
        "border-transparent",
        // text color
        "text-gray-900 dark:text-gray-50",
        // hover color
        "bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800/80",
        // disabled
        "disabled:text-gray-400",
        "disabled:dark:text-gray-600",
      ],
      destructive: [
        // text color
        "text-white",
        // border
        "border-transparent",
        // background color
        "bg-red-600 dark:bg-red-700",
        // hover color
        "hover:bg-red-700 dark:hover:bg-red-600",
        // disabled
        "disabled:bg-red-300 disabled:text-white",
        "disabled:dark:bg-red-950 disabled:dark:text-red-400",
      ],
    },
  },
  defaultVariants: {
    variant: "primary",
  },
})

interface ButtonProps
  extends React.ComponentPropsWithoutRef<"button">,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
  isLoading?: boolean
  loadingText?: string
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  (
    {
      asChild,
      isLoading = false,
      loadingText,
      className,
      disabled,
      variant,
      children,
      ...props
    }: ButtonProps,
    forwardedRef,
  ) => {
    const Component = asChild ? Slot : "button"
    return (
      <Component
        ref={forwardedRef}
        className={cx(buttonVariants({ variant }), className)}
        disabled={disabled || isLoading}
        {...props}
      >
        {isLoading ? (
          <span className="pointer-events-none flex shrink-0 items-center justify-center gap-1.5">
            <RiLoader2Fill
              className="size-4 shrink-0 animate-spin"
              aria-hidden="true"
            />
            <span className="sr-only">
              {loadingText ? loadingText : "Loading"}
            </span>
            {loadingText ? loadingText : children}
          </span>
        ) : (
          children
        )}
      </Component>
    )
  },
)

Button.displayName = "Button"

export { Button, buttonVariants, type ButtonProps }

================
File: src/components/Calendar.tsx
================
// Tremor Raw Calendar [v0.0.4]

"use client"

import {
  RiArrowLeftDoubleLine,
  RiArrowLeftSLine,
  RiArrowRightDoubleLine,
  RiArrowRightSLine,
} from "@remixicon/react"
import { addYears, format, isSameMonth } from "date-fns"
import * as React from "react"
import {
  DayPicker,
  useDayPicker,
  useDayRender,
  useNavigation,
  type DayPickerRangeProps,
  type DayPickerSingleProps,
  type DayProps,
  type Matcher,
} from "react-day-picker"

import { cx, focusRing } from "@/lib/utils"

interface NavigationButtonProps
  extends React.HTMLAttributes<HTMLButtonElement> {
  onClick: () => void
  icon: React.ElementType
  disabled?: boolean
}

const NavigationButton = React.forwardRef<
  HTMLButtonElement,
  NavigationButtonProps
>(
  (
    { onClick, icon, disabled, ...props }: NavigationButtonProps,
    forwardedRef,
  ) => {
    const Icon = icon
    return (
      <button
        ref={forwardedRef}
        type="button"
        disabled={disabled}
        className={cx(
          "flex size-8 shrink-0 select-none items-center justify-center rounded border p-1 outline-none transition sm:size-[30px]",
          // text color
          "text-gray-600 hover:text-gray-800",
          "dark:text-gray-400 hover:dark:text-gray-200",
          // border color
          "border-gray-300 dark:border-gray-800",
          // background color
          "hover:bg-gray-50 active:bg-gray-100",
          "hover:dark:bg-gray-900 active:dark:bg-gray-800",
          // disabled
          "disabled:pointer-events-none",
          "disabled:border-gray-200 disabled:dark:border-gray-800",
          "disabled:text-gray-400 disabled:dark:text-gray-600",
          focusRing,
        )}
        onClick={onClick}
        {...props}
      >
        <Icon className="size-full shrink-0" />
      </button>
    )
  },
)

NavigationButton.displayName = "NavigationButton"

type OmitKeys<T, K extends keyof T> = {
  [P in keyof T as P extends K ? never : P]: T[P]
}

type KeysToOmit = "showWeekNumber" | "captionLayout" | "mode"

type SingleProps = OmitKeys<DayPickerSingleProps, KeysToOmit>
type RangeProps = OmitKeys<DayPickerRangeProps, KeysToOmit>

type CalendarProps =
  | ({
      mode: "single"
    } & SingleProps)
  | ({
      mode?: undefined
    } & SingleProps)
  | ({
      mode: "range"
    } & RangeProps)

const Calendar = ({
  mode = "single",
  weekStartsOn = 1,
  numberOfMonths = 1,
  enableYearNavigation = false,
  disableNavigation,
  locale,
  className,
  classNames,
  ...props
}: CalendarProps & { enableYearNavigation?: boolean }) => {
  return (
    <DayPicker
      mode={mode}
      weekStartsOn={weekStartsOn}
      numberOfMonths={numberOfMonths}
      locale={locale}
      showOutsideDays={numberOfMonths === 1}
      className={cx(className)}
      classNames={{
        months: "flex space-y-0",
        month: "space-y-4 p-3",
        nav: "gap-1 flex items-center rounded-full size-full justify-between p-4",
        table: "w-full border-collapse space-y-1",
        head_cell:
          "w-9 font-medium text-sm sm:text-xs text-center text-gray-400 dark:text-gray-600 pb-2",
        row: "w-full mt-0.5",
        cell: cx(
          "relative p-0 text-center focus-within:relative",
          "text-gray-900 dark:text-gray-50",
        ),
        day: cx(
          "size-9 rounded text-sm text-gray-900 focus:z-10 dark:text-gray-50",
          "hover:bg-gray-200 hover:dark:bg-gray-700",
          focusRing,
        ),
        day_today: "font-semibold",
        day_selected: cx(
          "rounded",
          "aria-selected:bg-indigo-600 aria-selected:text-gray-50",
          "dark:aria-selected:bg-indigo-500 dark:aria-selected:text-gray-50",
        ),
        day_disabled:
          "!text-gray-300 dark:!text-gray-700 line-through disabled:hover:bg-transparent",
        day_outside: "text-gray-400 dark:text-gray-600",
        day_range_middle: cx(
          "!rounded-none",
          "aria-selected:!bg-gray-100 aria-selected:!text-gray-900",
          "dark:aria-selected:!bg-gray-900 dark:aria-selected:!text-gray-50",
        ),
        day_range_start: "rounded-r-none !rounded-l",
        day_range_end: "rounded-l-none !rounded-r",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: () => (
          <RiArrowLeftSLine aria-hidden="true" className="size-4" />
        ),
        IconRight: () => (
          <RiArrowRightSLine aria-hidden="true" className="size-4" />
        ),
        Caption: ({ ...props }) => {
          const {
            goToMonth,
            nextMonth,
            previousMonth,
            currentMonth,
            displayMonths,
          } = useNavigation()
          const { numberOfMonths, fromDate, toDate } = useDayPicker()

          const displayIndex = displayMonths.findIndex((month) =>
            isSameMonth(props.displayMonth, month),
          )
          const isFirst = displayIndex === 0
          const isLast = displayIndex === displayMonths.length - 1

          const hideNextButton = numberOfMonths > 1 && (isFirst || !isLast)
          const hidePreviousButton = numberOfMonths > 1 && (isLast || !isFirst)

          const goToPreviousYear = () => {
            const targetMonth = addYears(currentMonth, -1)
            if (
              previousMonth &&
              (!fromDate || targetMonth.getTime() >= fromDate.getTime())
            ) {
              goToMonth(targetMonth)
            }
          }

          const goToNextYear = () => {
            const targetMonth = addYears(currentMonth, 1)
            if (
              nextMonth &&
              (!toDate || targetMonth.getTime() <= toDate.getTime())
            ) {
              goToMonth(targetMonth)
            }
          }

          return (
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-1">
                {enableYearNavigation && !hidePreviousButton && (
                  <NavigationButton
                    disabled={
                      disableNavigation ||
                      !previousMonth ||
                      (fromDate &&
                        addYears(currentMonth, -1).getTime() <
                          fromDate.getTime())
                    }
                    aria-label="Go to previous year"
                    onClick={goToPreviousYear}
                    icon={RiArrowLeftDoubleLine}
                  />
                )}
                {!hidePreviousButton && (
                  <NavigationButton
                    disabled={disableNavigation || !previousMonth}
                    aria-label="Go to previous month"
                    onClick={() => previousMonth && goToMonth(previousMonth)}
                    icon={RiArrowLeftSLine}
                  />
                )}
              </div>

              <div
                role="presentation"
                aria-live="polite"
                className="text-sm font-medium capitalize tabular-nums text-gray-900 dark:text-gray-50"
              >
                {format(props.displayMonth, "LLLL yyy", { locale })}
              </div>

              <div className="flex items-center gap-1">
                {!hideNextButton && (
                  <NavigationButton
                    disabled={disableNavigation || !nextMonth}
                    aria-label="Go to next month"
                    onClick={() => nextMonth && goToMonth(nextMonth)}
                    icon={RiArrowRightSLine}
                  />
                )}
                {enableYearNavigation && !hideNextButton && (
                  <NavigationButton
                    disabled={
                      disableNavigation ||
                      !nextMonth ||
                      (toDate &&
                        addYears(currentMonth, 1).getTime() > toDate.getTime())
                    }
                    aria-label="Go to next year"
                    onClick={goToNextYear}
                    icon={RiArrowRightDoubleLine}
                  />
                )}
              </div>
            </div>
          )
        },
        Day: ({ date, displayMonth }: DayProps) => {
          const buttonRef = React.useRef<HTMLButtonElement>(null)
          const { activeModifiers, buttonProps, divProps, isButton, isHidden } =
            useDayRender(date, displayMonth, buttonRef)

          const { selected, today, disabled, range_middle } = activeModifiers

          if (isHidden) {
            return <></>
          }

          if (!isButton) {
            return (
              <div
                {...divProps}
                className={cx(
                  "flex items-center justify-center",
                  divProps.className,
                )}
              />
            )
          }

          const {
            children: buttonChildren,
            className: buttonClassName,
            ...buttonPropsRest
          } = buttonProps

          return (
            <button
              ref={buttonRef}
              {...buttonPropsRest}
              type="button"
              className={cx("relative", buttonClassName)}
            >
              {buttonChildren}
              {today && (
                <span
                  className={cx(
                    "absolute inset-x-1/2 bottom-1.5 h-0.5 w-4 -translate-x-1/2 rounded-[2px]",
                    {
                      "bg-blue-500 dark:bg-blue-500": !selected,
                      "!bg-white dark:!bg-gray-950": selected,
                      "!bg-gray-400 dark:!bg-gray-600":
                        selected && range_middle,
                      "bg-gray-400 text-gray-400 dark:bg-gray-400 dark:text-gray-600":
                        disabled,
                    },
                  )}
                />
              )}
            </button>
          )
        },
      }}
      {...(props as SingleProps & RangeProps)}
    />
  )
}

Calendar.displayName = "Calendar"

export { Calendar, type Matcher }

================
File: src/components/Card.tsx
================
// Tremor Raw Card [v0.0.1]

import { Slot } from "@radix-ui/react-slot"
import React from "react"

import { cx } from "@/lib/utils"

interface CardProps extends React.ComponentPropsWithoutRef<"div"> {
  asChild?: boolean
}

const Card = React.forwardRef<HTMLDivElement, CardProps>(
  ({ className, asChild, ...props }, forwardedRef) => {
    const Component = asChild ? Slot : "div"
    return (
      <Component
        ref={forwardedRef}
        className={cx(
          // base
          "relative w-full rounded-lg border p-6 text-left shadow-sm",
          // background color
          "bg-white dark:bg-[#090E1A]",
          // border color
          "border-gray-200 dark:border-gray-900",
          className,
        )}
        {...props}
      />
    )
  },
)

Card.displayName = "Card"

export { Card, type CardProps }

================
File: src/components/Checkbox.tsx
================
// Tremor Raw Checkbox [v0.0.2]

import * as CheckboxPrimitives from "@radix-ui/react-checkbox"
import React from "react"

import { cx, focusRing } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitives.Root>
>(({ className, checked, ...props }, forwardedRef) => {
  return (
    <CheckboxPrimitives.Root
      ref={forwardedRef}
      {...props}
      checked={checked}
      className={cx(
        // base
        "relative inline-flex size-4 shrink-0 appearance-none items-center justify-center rounded shadow-sm outline-none ring-1 ring-inset transition duration-100 enabled:cursor-pointer",
        // text color
        "text-white dark:text-gray-50",
        // background color
        "bg-white dark:bg-gray-950",
        // ring color
        "ring-gray-300 dark:ring-gray-800",
        // disabled
        "data-[disabled]:bg-gray-100 data-[disabled]:text-gray-400 data-[disabled]:ring-gray-300",
        "data-[disabled]:dark:bg-gray-800 data-[disabled]:dark:text-gray-500 data-[disabled]:dark:ring-gray-700",
        // checked and enabled
        "enabled:data-[state=checked]:bg-indigo-600 enabled:data-[state=checked]:ring-0 enabled:data-[state=checked]:ring-transparent",
        // indeterminate
        "enabled:data-[state=indeterminate]:bg-indigo-600 enabled:data-[state=indeterminate]:ring-0 enabled:data-[state=indeterminate]:ring-transparent",
        // focus
        focusRing,
        className,
      )}
    >
      <CheckboxPrimitives.Indicator
        asChild
        className="flex size-full items-center justify-center"
      >
        {checked === "indeterminate" ? (
          <svg
            aria-hidden="true"
            width="16"
            height="16"
            viewBox="0 0 16 16"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <line
              stroke="currentColor"
              strokeLinecap="round"
              strokeWidth="2"
              x1="4"
              x2="12"
              y1="8"
              y2="8"
            ></line>
          </svg>
        ) : (
          <svg
            aria-hidden="true"
            width="16"
            height="16"
            viewBox="0 0 16 16"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M11.2 5.59998L6.79999 9.99998L4.79999 7.99998"
              stroke="currentColor"
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
            ></path>
          </svg>
        )}
      </CheckboxPrimitives.Indicator>
    </CheckboxPrimitives.Root>
  )
})

Checkbox.displayName = "Checkbox"

export { Checkbox }

================
File: src/components/CommandBar.tsx
================
"use client"

import * as Popover from "@radix-ui/react-popover"
import * as React from "react"

import { cx, focusRing } from "@/lib/utils"

const shortcutStyles = cx(
  "hidden h-6 select-none items-center justify-center rounded-md bg-gray-800 px-2 font-mono text-xs text-gray-400 ring-1 ring-inset ring-gray-700 transition sm:flex",
)

interface CommandBarProps extends React.PropsWithChildren {
  open?: boolean
  onOpenChange?: (open: boolean) => void
  defaultOpen?: boolean
  disableAutoFocus?: boolean
}

const CommandBar = ({
  open = false,
  onOpenChange,
  defaultOpen = false,
  disableAutoFocus = true,
  children,
}: CommandBarProps) => {
  return (
    <Popover.Root
      open={open}
      onOpenChange={onOpenChange}
      defaultOpen={defaultOpen}
    >
      <Popover.Anchor
        className={cx(
          "fixed inset-x-0 bottom-8 mx-auto flex w-fit items-center",
        )}
      />
      <Popover.Portal>
        <Popover.Content
          side="top"
          sideOffset={0}
          onOpenAutoFocus={(e) => {
            if (disableAutoFocus) {
              e.preventDefault()
            }
          }}
          className={cx(
            "z-50",
            "data-[state=closed]:animate-hide",
            "data-[side=top]:animate-slideUpAndFade",
          )}
        >
          {children}
        </Popover.Content>
      </Popover.Portal>
    </Popover.Root>
  )
}
CommandBar.displayName = "CommandBar"

const CommandBarValue = React.forwardRef<
  HTMLDivElement,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      className={cx(
        "px-3 py-2.5 text-sm tabular-nums text-gray-300",
        className,
      )}
      {...props}
    />
  )
})
CommandBarValue.displayName = "CommandBar.Value"

const CommandBarBar = React.forwardRef<
  HTMLDivElement,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      className={cx(
        "relative flex items-center rounded-lg bg-gray-900 px-1 shadow-lg shadow-black/30 dark:ring-1 dark:ring-white/10",
        className,
      )}
      {...props}
    />
  )
})
CommandBarBar.displayName = "CommandBarBar"

const CommandBarSeperator = React.forwardRef<
  HTMLDivElement,
  Omit<React.ComponentPropsWithoutRef<"div">, "children">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      className={cx("h-4 w-px bg-gray-700", className)}
      {...props}
    />
  )
})
CommandBarSeperator.displayName = "CommandBar.Seperator"

interface CommandProps
  extends Omit<
    React.ComponentPropsWithoutRef<"button">,
    "children" | "onClick"
  > {
  action: () => void | Promise<void>
  label: string
  shortcut: { shortcut: string; label?: string }
}

const CommandBarCommand = React.forwardRef<HTMLButtonElement, CommandProps>(
  (
    {
      className,
      type = "button",
      label,
      action,
      shortcut,
      disabled,
      ...props
    }: CommandProps,
    ref,
  ) => {
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (event.key === shortcut.shortcut) {
          event.preventDefault()
          event.stopPropagation()
          action()
        }
      }

      if (!disabled) {
        document.addEventListener("keydown", handleKeyDown)
      }

      return () => {
        document.removeEventListener("keydown", handleKeyDown)
      }
    }, [action, shortcut, disabled])

    return (
      <span
        className={cx(
          "flex items-center gap-x-2 rounded-lg bg-gray-900 p-1 text-base font-medium text-gray-50 outline-none transition focus:z-10 sm:text-sm",
          "sm:last-of-type:-mr-1",
          className,
        )}
      >
        <button
          ref={ref}
          type={type}
          onClick={action}
          disabled={disabled}
          className={cx(
            // base
            "flex items-center gap-x-2 rounded-md px-1 py-1 hover:bg-gray-800",
            // focus
            "focus-visible:bg-gray-800 focus-visible:hover:bg-gray-800",
            "disabled:text-gray-500",
            focusRing,
          )}
          {...props}
        >
          <span>{label}</span>
          <span className={shortcutStyles}>
            {shortcut.label
              ? shortcut.label.toUpperCase()
              : shortcut.shortcut.toUpperCase()}
          </span>
        </button>
      </span>
    )
  },
)
CommandBarCommand.displayName = "CommandBar.Command"

export {
  CommandBar,
  CommandBarBar,
  CommandBarCommand,
  CommandBarSeperator,
  CommandBarValue,
}

================
File: src/components/DatePicker.tsx
================
// Tremor Date Picker [v1.0.5]

"use client"

import { Time } from "@internationalized/date"
import * as PopoverPrimitives from "@radix-ui/react-popover"
import {
  AriaTimeFieldProps,
  TimeValue,
  useDateSegment,
  useTimeField,
} from "@react-aria/datepicker"
import {
  useTimeFieldState,
  type DateFieldState,
  type DateSegment,
} from "@react-stately/datepicker"
import { RiCalendar2Fill, RiSubtractFill } from "@remixicon/react"
import { format, type Locale } from "date-fns"
import { enUS } from "date-fns/locale"
import * as React from "react"
import { tv, VariantProps } from "tailwind-variants"

import { cx, focusInput, focusRing, hasErrorInput } from "@/lib/utils"

import { Button } from "./Button"
import { Calendar as CalendarPrimitive, type Matcher } from "./Calendar"

//#region TimeInput
// ============================================================================

const isBrowserLocaleClockType24h = () => {
  const language =
    typeof window !== "undefined" ? window.navigator.language : "en-US"

  const hr = new Intl.DateTimeFormat(language, {
    hour: "numeric",
  }).format()

  return Number.isInteger(Number(hr))
}

type TimeSegmentProps = {
  segment: DateSegment
  state: DateFieldState
}

const TimeSegment = ({ segment, state }: TimeSegmentProps) => {
  const ref = React.useRef<HTMLDivElement>(null)

  const { segmentProps } = useDateSegment(segment, state, ref)

  const isColon = segment.type === "literal" && segment.text === ":"
  const isSpace = segment.type === "literal" && segment.text === " "

  const isDecorator = isColon || isSpace

  return (
    <div
      {...segmentProps}
      ref={ref}
      className={cx(
        // base
        "relative block w-full appearance-none rounded-md border px-2.5 py-1.5 text-left uppercase tabular-nums shadow-sm outline-none transition sm:text-sm",
        // border color
        "border-gray-300 dark:border-gray-800",
        // text color
        "text-gray-900 dark:text-gray-50",
        // background color
        "bg-white dark:bg-gray-950",
        // focus
        focusInput,
        // invalid (optional)
        "invalid:border-red-500 invalid:ring-2 invalid:ring-red-200 group-aria-[invalid=true]/time-input:border-red-500 group-aria-[invalid=true]/time-input:ring-2 group-aria-[invalid=true]/time-input:ring-red-200 group-aria-[invalid=true]/time-input:dark:ring-red-400/20",
        {
          "!w-fit border-none bg-transparent px-0 text-gray-400 shadow-none":
            isDecorator,
          hidden: isSpace,
          "border-gray-300 bg-gray-100 text-gray-400 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-500":
            state.isDisabled,
          "!bg-transparent !text-gray-400": !segment.isEditable,
        },
      )}
    >
      <span
        aria-hidden="true"
        className={cx(
          "pointer-events-none block w-full text-left text-gray-700 sm:text-sm",
          {
            hidden: !segment.isPlaceholder,
            "h-0": !segment.isPlaceholder,
          },
        )}
      >
        {segment.placeholder}
      </span>
      {segment.isPlaceholder ? " " : segment.text}
    </div>
  )
}

type TimeInputProps = Omit<
  AriaTimeFieldProps<TimeValue>,
  "label" | "shouldForceLeadingZeros" | "description" | "errorMessage"
>

const TimeInput = React.forwardRef<HTMLDivElement, TimeInputProps>(
  ({ hourCycle, ...props }: TimeInputProps, ref) => {
    const innerRef = React.useRef<HTMLDivElement>(null)

    React.useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(
      ref,
      () => innerRef?.current,
    )

    const locale = window !== undefined ? window.navigator.language : "en-US"

    const state = useTimeFieldState({
      hourCycle: hourCycle,
      locale: locale,
      shouldForceLeadingZeros: true,
      autoFocus: true,
      ...props,
    })

    const { fieldProps } = useTimeField(
      {
        ...props,
        hourCycle: hourCycle,
        shouldForceLeadingZeros: true,
      },
      state,
      innerRef,
    )

    return (
      <div
        {...fieldProps}
        ref={innerRef}
        className="group/time-input inline-flex w-full gap-x-2"
      >
        {state.segments.map((segment, i) => (
          <TimeSegment key={i} segment={segment} state={state} />
        ))}
      </div>
    )
  },
)
TimeInput.displayName = "TimeInput"

//#region Trigger
// ============================================================================

const triggerStyles = tv({
  base: [
    // base
    "peer flex w-full cursor-pointer appearance-none items-center gap-x-2 truncate rounded-md border px-3 py-2 shadow-sm outline-none transition-all sm:text-sm",
    // background color
    "bg-white dark:bg-gray-950",
    // border color
    "border-gray-300 dark:border-gray-800",
    // text color
    "text-gray-900 dark:text-gray-50",
    // placeholder color
    "placeholder-gray-400 dark:placeholder-gray-500",
    // hover
    "hover:bg-gray-50 hover:dark:bg-gray-950/50",
    // disabled
    "disabled:pointer-events-none",
    "disabled:bg-gray-100 disabled:text-gray-400",
    "disabled:dark:border-gray-800 disabled:dark:bg-gray-800 disabled:dark:text-gray-500",
    // focus
    focusInput,
    // invalid (optional)
    // "aria-[invalid=true]:dark:ring-red-400/20 aria-[invalid=true]:ring-2 aria-[invalid=true]:ring-red-200 aria-[invalid=true]:border-red-500 invalid:ring-2 invalid:ring-red-200 invalid:border-red-500"
  ],
  variants: {
    hasError: {
      true: hasErrorInput,
    },
  },
})

interface TriggerProps
  extends React.ComponentProps<"button">,
    VariantProps<typeof triggerStyles> {
  placeholder?: string
}

const Trigger = React.forwardRef<HTMLButtonElement, TriggerProps>(
  (
    { className, children, placeholder, hasError, ...props }: TriggerProps,
    forwardedRef,
  ) => {
    return (
      <PopoverPrimitives.Trigger asChild>
        <button
          ref={forwardedRef}
          className={cx(triggerStyles({ hasError }), className)}
          {...props}
        >
          <RiCalendar2Fill className="size-5 shrink-0 text-gray-400 dark:text-gray-600" />
          <span className="flex-1 overflow-hidden text-ellipsis whitespace-nowrap text-left text-gray-900 dark:text-gray-50">
            {children ? (
              children
            ) : placeholder ? (
              <span className="text-gray-400 dark:text-gray-600">
                {placeholder}
              </span>
            ) : null}
          </span>
        </button>
      </PopoverPrimitives.Trigger>
    )
  },
)

Trigger.displayName = "DatePicker.Trigger"

//#region Popover
// ============================================================================

const CalendarPopover = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitives.Content>,
  React.ComponentProps<typeof PopoverPrimitives.Content>
>(({ align, className, children, ...props }, forwardedRef) => {
  return (
    <PopoverPrimitives.Portal>
      <PopoverPrimitives.Content
        ref={forwardedRef}
        sideOffset={10}
        side="bottom"
        align={align}
        avoidCollisions
        onOpenAutoFocus={(e) => e.preventDefault()}
        className={cx(
          // base
          "relative z-50 w-fit rounded-md border text-sm shadow-xl shadow-black/[2.5%]",
          // widths
          "min-w-[calc(var(--radix-select-trigger-width)-2px)] max-w-[95vw]",
          // border color
          "border-gray-200 dark:border-gray-800",
          // background color
          "bg-white dark:bg-gray-950",
          // transition
          "will-change-[transform,opacity]",
          "data-[state=closed]:animate-hide",
          "data-[state=open]:data-[side=bottom]:animate-slideDownAndFade data-[state=open]:data-[side=left]:animate-slideLeftAndFade data-[state=open]:data-[side=right]:animate-slideRightAndFade data-[state=open]:data-[side=top]:animate-slideUpAndFade",
          className,
        )}
        {...props}
      >
        {children}
      </PopoverPrimitives.Content>
    </PopoverPrimitives.Portal>
  )
})

CalendarPopover.displayName = "DatePicker.CalendarPopover"

//#region Preset
// ============================================================================

type DateRange = {
  from: Date | undefined
  to?: Date | undefined
}

interface Preset {
  label: string
}

interface DatePreset extends Preset {
  date: Date
}

interface DateRangePreset extends Preset {
  dateRange: DateRange
}

type PresetContainerProps<TPreset extends Preset, TValue> = {
  presets: TPreset[]
  onSelect: (value: TValue) => void
  currentValue?: TValue
}

const PresetContainer = <TPreset extends Preset, TValue>({
  // Available preset configurations
  presets,
  // Event handler when a preset is selected
  onSelect,
  // Currently selected preset
  currentValue,
}: PresetContainerProps<TPreset, TValue>) => {
  const isDateRangePresets = (preset: any): preset is DateRangePreset => {
    return "dateRange" in preset
  }
  const isDatePresets = (preset: any): preset is DatePreset => {
    return "date" in preset
  }

  const handleClick = (preset: TPreset) => {
    if (isDateRangePresets(preset)) {
      onSelect(preset.dateRange as TValue)
    } else if (isDatePresets(preset)) {
      onSelect(preset.date as TValue)
    }
  }

  const compareDates = (date1: Date, date2: Date) => {
    return (
      date1.getDate() === date2.getDate() &&
      date1.getMonth() === date2.getMonth() &&
      date1.getFullYear() === date2.getFullYear()
    )
  }

  const compareRanges = (range1: DateRange, range2: DateRange) => {
    const from1 = range1.from
    const from2 = range2.from

    let equalFrom = false

    if (from1 && from2) {
      const sameFrom = compareDates(from1, from2)

      if (sameFrom) {
        equalFrom = true
      }
    }

    const to1 = range1.to
    const to2 = range2.to

    let equalTo = false

    if (to1 && to2) {
      const sameTo = compareDates(to1, to2)

      if (sameTo) {
        equalTo = true
      }
    }

    return equalFrom && equalTo
  }

  const matchesCurrent = (preset: TPreset) => {
    if (isDateRangePresets(preset)) {
      const value = currentValue as DateRange | undefined

      return value && compareRanges(value, preset.dateRange)
    } else if (isDatePresets(preset)) {
      const value = currentValue as Date | undefined

      return value && compareDates(value, preset.date)
    }

    return false
  }

  return (
    <ul className="flex items-start gap-x-2 sm:flex-col">
      {presets.map((preset, index) => {
        return (
          <li key={index} className="sm:w-full sm:py-px">
            <button
              title={preset.label}
              className={cx(
                // base
                "relative w-full overflow-hidden text-ellipsis whitespace-nowrap rounded border px-2.5 py-1.5 text-left text-base shadow-sm outline-none transition-all sm:border-none sm:py-2 sm:text-sm sm:shadow-none",
                // text color
                "text-gray-700 dark:text-gray-300",
                // border color
                "border-gray-200 dark:border-gray-800",
                // focus
                focusRing,
                // background color
                "focus-visible:bg-gray-100 focus-visible:dark:bg-gray-900",
                "hover:bg-gray-100 hover:dark:bg-gray-900",
                {
                  "bg-gray-100 dark:bg-gray-900": matchesCurrent(preset),
                },
              )}
              onClick={() => handleClick(preset)}
              aria-label={`Select ${preset.label}`}
            >
              <span>{preset.label}</span>
            </button>
          </li>
        )
      })}
    </ul>
  )
}

PresetContainer.displayName = "DatePicker.PresetContainer"

//#region Date Picker Shared
// ============================================================================

const formatDate = (
  date: Date,
  locale: Locale,
  includeTime?: boolean,
): string => {
  const usesAmPm = !isBrowserLocaleClockType24h()
  let dateString: string

  if (includeTime) {
    dateString = usesAmPm
      ? format(date, "dd MMM, yyyy h:mm a", { locale })
      : format(date, "dd MMM, yyyy HH:mm", { locale })
  } else {
    dateString = format(date, "dd MMM, yyyy", { locale })
  }

  return dateString
}

type CalendarProps = {
  fromYear?: number
  toYear?: number
  fromMonth?: Date
  toMonth?: Date
  fromDay?: Date
  toDay?: Date
  fromDate?: Date
  toDate?: Date
  locale?: Locale
}

type Translations = {
  cancel?: string
  apply?: string
  start?: string
  end?: string
  range?: string
}

interface PickerProps extends CalendarProps {
  className?: string
  disabled?: boolean
  disabledDays?: Matcher | Matcher[] | undefined
  required?: boolean
  showTimePicker?: boolean
  placeholder?: string
  enableYearNavigation?: boolean
  disableNavigation?: boolean
  hasError?: boolean
  id?: string
  // Customize the date picker for different languages.
  translations?: Translations
  align?: "center" | "end" | "start"
  "aria-invalid"?: boolean
  "aria-label"?: string
  "aria-labelledby"?: string
  "aria-required"?: boolean
}

//#region Single Date Picker
// ============================================================================

interface SingleProps extends Omit<PickerProps, "translations"> {
  presets?: DatePreset[]
  defaultValue?: Date
  value?: Date
  onChange?: (date: Date | undefined) => void
  translations?: Omit<Translations, "range">
}

const SingleDatePicker = ({
  defaultValue,
  value,
  onChange,
  presets,
  disabled,
  disabledDays,
  disableNavigation,
  className,
  showTimePicker,
  placeholder = "Select date",
  hasError,
  translations,
  enableYearNavigation = false,
  locale = enUS,
  align = "center",
  ...props
}: SingleProps) => {
  const [open, setOpen] = React.useState(false)
  const [date, setDate] = React.useState<Date | undefined>(
    value ?? defaultValue ?? undefined,
  )
  const [month, setMonth] = React.useState<Date | undefined>(date)

  const [time, setTime] = React.useState<TimeValue | null>(
    value
      ? new Time(value.getHours(), value.getMinutes())
      : defaultValue
        ? new Time(defaultValue.getHours(), defaultValue.getMinutes())
        : new Time(0, 0),
  )

  const initialDate = React.useMemo(() => {
    return date
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [open])

  React.useEffect(() => {
    setDate(value ?? defaultValue ?? undefined)
  }, [value, defaultValue])

  React.useEffect(() => {
    if (date) {
      setMonth(date)
    }
  }, [date])

  React.useEffect(() => {
    if (!open) {
      setMonth(date)
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [open])

  const onCancel = () => {
    setDate(initialDate)
    setTime(
      initialDate
        ? new Time(initialDate.getHours(), initialDate.getMinutes())
        : new Time(0, 0),
    )
    setOpen(false)
  }

  const onOpenChange = (open: boolean) => {
    if (!open) {
      onCancel()
    }

    setOpen(open)
  }

  const onDateChange = (date: Date | undefined) => {
    const newDate = date
    if (showTimePicker) {
      if (newDate && !time) {
        setTime(new Time(0, 0))
      }
      if (newDate && time) {
        newDate.setHours(time.hour)
        newDate.setMinutes(time.minute)
      }
    }
    setDate(newDate)
  }

  const onTimeChange = (time: TimeValue | null) => {
    setTime(time)

    if (!date) {
      return
    }

    const newDate = new Date(date.getTime())

    if (!time) {
      newDate.setHours(0)
      newDate.setMinutes(0)
    } else {
      newDate.setHours(time.hour)
      newDate.setMinutes(time.minute)
    }

    setDate(newDate)
  }

  const formattedDate = React.useMemo(() => {
    if (!date) {
      return null
    }

    return formatDate(date, locale, showTimePicker)
  }, [date, locale, showTimePicker])

  const onApply = () => {
    setOpen(false)
    onChange?.(date)
  }

  React.useEffect(() => {
    setDate(value ?? defaultValue ?? undefined)
    setTime(
      value
        ? new Time(value.getHours(), value.getMinutes())
        : defaultValue
          ? new Time(defaultValue.getHours(), defaultValue.getMinutes())
          : new Time(0, 0),
    )
  }, [value, defaultValue])

  return (
    <PopoverPrimitives.Root
      tremor-id="tremor-raw"
      open={open}
      onOpenChange={onOpenChange}
    >
      <Trigger
        placeholder={placeholder}
        disabled={disabled}
        className={className}
        hasError={hasError}
        aria-required={props.required || props["aria-required"]}
        aria-invalid={props["aria-invalid"]}
        aria-label={props["aria-label"]}
        aria-labelledby={props["aria-labelledby"]}
      >
        {formattedDate}
      </Trigger>
      <CalendarPopover align={align}>
        <div className="flex">
          <div className="flex flex-col sm:flex-row sm:items-start">
            {presets && presets.length > 0 && (
              <div
                className={cx(
                  "relative flex h-14 w-full items-center sm:h-full sm:w-40",
                  "border-b border-gray-200 sm:border-b-0 sm:border-r dark:border-gray-800",
                  "overflow-auto",
                )}
              >
                <div className="absolute px-2 pr-2 sm:inset-0 sm:left-0 sm:py-2">
                  <PresetContainer
                    currentValue={date}
                    presets={presets}
                    onSelect={onDateChange}
                  />
                </div>
              </div>
            )}
            <div>
              <CalendarPrimitive
                mode="single"
                month={month}
                onMonthChange={setMonth}
                selected={date}
                onSelect={onDateChange}
                disabled={disabledDays}
                locale={locale}
                enableYearNavigation={enableYearNavigation}
                disableNavigation={disableNavigation}
                initialFocus
                {...props}
              />
              {showTimePicker && (
                <div className="border-t border-gray-200 p-3 dark:border-gray-800">
                  <TimeInput
                    aria-label="Time"
                    onChange={onTimeChange}
                    isDisabled={!date}
                    value={time}
                    isRequired={props.required}
                  />
                </div>
              )}
              <div className="flex items-center gap-x-2 border-t border-gray-200 p-3 dark:border-gray-800">
                <Button
                  variant="secondary"
                  className="h-8 w-full"
                  type="button"
                  onClick={onCancel}
                >
                  {translations?.cancel ?? "Cancel"}
                </Button>
                <Button
                  variant="primary"
                  className="h-8 w-full"
                  type="button"
                  onClick={onApply}
                >
                  {translations?.apply ?? "Apply"}
                </Button>
              </div>
            </div>
          </div>
        </div>
      </CalendarPopover>
    </PopoverPrimitives.Root>
  )
}

//#region Range Date Picker
// ============================================================================

interface RangeProps extends PickerProps {
  presets?: DateRangePreset[]
  defaultValue?: DateRange
  value?: DateRange
  onChange?: (dateRange: DateRange | undefined) => void
}

const RangeDatePicker = ({
  defaultValue,
  value,
  onChange,
  presets,
  disabled,
  disableNavigation,
  disabledDays,
  enableYearNavigation = false,
  locale = enUS,
  showTimePicker,
  placeholder = "Select date range",
  hasError,
  translations,
  align = "center",
  className,
  ...props
}: RangeProps) => {
  const [open, setOpen] = React.useState(false)
  const [range, setRange] = React.useState<DateRange | undefined>(
    value ?? defaultValue ?? undefined,
  )
  const [month, setMonth] = React.useState<Date | undefined>(range?.from)

  const [startTime, setStartTime] = React.useState<TimeValue | null>(
    value?.from
      ? new Time(value.from.getHours(), value.from.getMinutes())
      : defaultValue?.from
        ? new Time(defaultValue.from.getHours(), defaultValue.from.getMinutes())
        : new Time(0, 0),
  )
  const [endTime, setEndTime] = React.useState<TimeValue | null>(
    value?.to
      ? new Time(value.to.getHours(), value.to.getMinutes())
      : defaultValue?.to
        ? new Time(defaultValue.to.getHours(), defaultValue.to.getMinutes())
        : new Time(0, 0),
  )

  const initialRange = React.useMemo(() => {
    return range
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [open])

  React.useEffect(() => {
    setRange(value ?? defaultValue ?? undefined)
  }, [value, defaultValue])

  React.useEffect(() => {
    if (range) {
      setMonth(range.from)
    }
  }, [range])

  React.useEffect(() => {
    if (!open) {
      setMonth(range?.from)
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [open])

  const onRangeChange = (range: DateRange | undefined) => {
    const newRange = range
    if (showTimePicker) {
      if (newRange?.from && !startTime) {
        setStartTime(new Time(0, 0))
      }

      if (newRange?.to && !endTime) {
        setEndTime(new Time(0, 0))
      }

      if (newRange?.from && startTime) {
        newRange.from.setHours(startTime.hour)
        newRange.from.setMinutes(startTime.minute)
      }

      if (newRange?.to && endTime) {
        newRange.to.setHours(endTime.hour)
        newRange.to.setMinutes(endTime.minute)
      }
    }

    setRange(newRange)
  }

  const onCancel = () => {
    setRange(initialRange)
    setStartTime(
      initialRange?.from
        ? new Time(initialRange.from.getHours(), initialRange.from.getMinutes())
        : new Time(0, 0),
    )
    setEndTime(
      initialRange?.to
        ? new Time(initialRange.to.getHours(), initialRange.to.getMinutes())
        : new Time(0, 0),
    )
    setOpen(false)
  }

  const onOpenChange = (open: boolean) => {
    if (!open) {
      onCancel()
    }

    setOpen(open)
  }

  const onTimeChange = (time: TimeValue | null, pos: "start" | "end") => {
    switch (pos) {
      case "start":
        setStartTime(time)
        break
      case "end":
        setEndTime(time)
        break
    }

    if (!range) {
      return
    }

    if (pos === "start") {
      if (!range.from) {
        return
      }

      const newDate = new Date(range.from.getTime())

      if (!time) {
        newDate.setHours(0)
        newDate.setMinutes(0)
      } else {
        newDate.setHours(time.hour)
        newDate.setMinutes(time.minute)
      }

      setRange({
        ...range,
        from: newDate,
      })
    }

    if (pos === "end") {
      if (!range.to) {
        return
      }

      const newDate = new Date(range.to.getTime())

      if (!time) {
        newDate.setHours(0)
        newDate.setMinutes(0)
      } else {
        newDate.setHours(time.hour)
        newDate.setMinutes(time.minute)
      }

      setRange({
        ...range,
        to: newDate,
      })
    }
  }

  React.useEffect(() => {
    setRange(value ?? defaultValue ?? undefined)

    setStartTime(
      value?.from
        ? new Time(value.from.getHours(), value.from.getMinutes())
        : defaultValue?.from
          ? new Time(
              defaultValue.from.getHours(),
              defaultValue.from.getMinutes(),
            )
          : new Time(0, 0),
    )
    setEndTime(
      value?.to
        ? new Time(value.to.getHours(), value.to.getMinutes())
        : defaultValue?.to
          ? new Time(defaultValue.to.getHours(), defaultValue.to.getMinutes())
          : new Time(0, 0),
    )
  }, [value, defaultValue])

  const displayRange = React.useMemo(() => {
    if (!range) {
      return null
    }

    return `${range.from ? formatDate(range.from, locale, showTimePicker) : ""} - ${
      range.to ? formatDate(range.to, locale, showTimePicker) : ""
    }`
  }, [range, locale, showTimePicker])

  const onApply = () => {
    setOpen(false)
    onChange?.(range)
  }

  return (
    <PopoverPrimitives.Root
      tremor-id="tremor-raw"
      open={open}
      onOpenChange={onOpenChange}
    >
      <Trigger
        placeholder={placeholder}
        disabled={disabled}
        className={className}
        hasError={hasError}
        aria-required={props.required || props["aria-required"]}
        aria-invalid={props["aria-invalid"]}
        aria-label={props["aria-label"]}
        aria-labelledby={props["aria-labelledby"]}
      >
        {displayRange}
      </Trigger>
      <CalendarPopover align={align}>
        <div className="flex">
          <div className="flex flex-col overflow-x-auto sm:flex-row sm:items-start">
            {presets && presets.length > 0 && (
              <div
                className={cx(
                  "relative flex h-16 w-full items-center sm:h-full sm:w-40",
                  "border-b border-gray-200 sm:border-b-0 sm:border-r dark:border-gray-800",
                  "overflow-auto",
                )}
              >
                <div className="absolute px-3 sm:inset-0 sm:left-0 sm:p-2">
                  <PresetContainer
                    currentValue={range}
                    presets={presets}
                    onSelect={onRangeChange}
                  />
                </div>
              </div>
            )}
            <div className="overflow-x-auto">
              <CalendarPrimitive
                mode="range"
                selected={range}
                onSelect={onRangeChange}
                month={month}
                onMonthChange={setMonth}
                numberOfMonths={2}
                disabled={disabledDays}
                disableNavigation={disableNavigation}
                enableYearNavigation={enableYearNavigation}
                locale={locale}
                initialFocus
                classNames={{
                  months:
                    "flex flex-row divide-x divide-gray-200 dark:divide-gray-800 overflow-x-auto",
                }}
                {...props}
              />
              {showTimePicker && (
                <div className="flex items-center justify-evenly gap-x-3 border-t border-gray-200 p-3 dark:border-gray-800">
                  <div className="flex flex-1 items-center gap-x-2">
                    <span className="dark:text-gray-30 text-gray-700">
                      {translations?.start ?? "Start"}:
                    </span>
                    <TimeInput
                      value={startTime}
                      onChange={(v) => onTimeChange(v, "start")}
                      aria-label="Start date time"
                      isDisabled={!range?.from}
                      isRequired={props.required}
                    />
                  </div>
                  <RiSubtractFill className="size-4 shrink-0 text-gray-400" />
                  <div className="flex flex-1 items-center gap-x-2">
                    <span className="dark:text-gray-30 text-gray-700">
                      {translations?.end ?? "End"}:
                    </span>
                    <TimeInput
                      value={endTime}
                      onChange={(v) => onTimeChange(v, "end")}
                      aria-label="End date time"
                      isDisabled={!range?.to}
                      isRequired={props.required}
                    />
                  </div>
                </div>
              )}
              <div className="border-t border-gray-200 p-3 sm:flex sm:items-center sm:justify-between dark:border-gray-800">
                <p className="tabular-nums text-gray-900 dark:text-gray-50">
                  <span className="text-gray-700 dark:text-gray-300">
                    {translations?.range ?? "Range"}:
                  </span>{" "}
                  <span className="font-medium">{displayRange}</span>
                </p>
                <div className="mt-2 flex items-center gap-x-2 sm:mt-0">
                  <Button
                    variant="secondary"
                    className="h-8 w-full sm:w-fit"
                    type="button"
                    onClick={onCancel}
                  >
                    {translations?.cancel ?? "Cancel"}
                  </Button>
                  <Button
                    variant="primary"
                    className="h-8 w-full sm:w-fit"
                    type="button"
                    onClick={onApply}
                  >
                    {translations?.apply ?? "Apply"}
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </CalendarPopover>
    </PopoverPrimitives.Root>
  )
}

//#region Preset Validation
// ============================================================================

const validatePresets = (
  presets: DateRangePreset[] | DatePreset[],
  rules: PickerProps,
) => {
  const { toYear, fromYear, fromMonth, toMonth, fromDay, toDay } = rules

  if (presets && presets.length > 0) {
    const fromYearToUse = fromYear
    const toYearToUse = toYear

    presets.forEach((preset) => {
      if ("date" in preset) {
        const presetYear = preset.date.getFullYear()

        if (fromYear && presetYear < fromYear) {
          throw new Error(
            `Preset ${preset.label} is before fromYear ${fromYearToUse}.`,
          )
        }

        if (toYear && presetYear > toYear) {
          throw new Error(
            `Preset ${preset.label} is after toYear ${toYearToUse}.`,
          )
        }

        if (fromMonth) {
          const presetMonth = preset.date.getMonth()

          if (presetMonth < fromMonth.getMonth()) {
            throw new Error(
              `Preset ${preset.label} is before fromMonth ${fromMonth}.`,
            )
          }
        }

        if (toMonth) {
          const presetMonth = preset.date.getMonth()

          if (presetMonth > toMonth.getMonth()) {
            throw new Error(
              `Preset ${preset.label} is after toMonth ${toMonth}.`,
            )
          }
        }

        if (fromDay) {
          const presetDay = preset.date.getDate()

          if (presetDay < fromDay.getDate()) {
            throw new Error(
              `Preset ${preset.label} is before fromDay ${fromDay}.`,
            )
          }
        }

        if (toDay) {
          const presetDay = preset.date.getDate()

          if (presetDay > toDay.getDate()) {
            throw new Error(
              `Preset ${preset.label} is after toDay ${format(
                toDay,
                "MMM dd, yyyy",
              )}.`,
            )
          }
        }
      }

      if ("dateRange" in preset) {
        const presetFromYear = preset.dateRange.from?.getFullYear()
        const presetToYear = preset.dateRange.to?.getFullYear()

        if (presetFromYear && fromYear && presetFromYear < fromYear) {
          throw new Error(
            `Preset ${preset.label}'s 'from' is before fromYear ${fromYearToUse}.`,
          )
        }

        if (presetToYear && toYear && presetToYear > toYear) {
          throw new Error(
            `Preset ${preset.label}'s 'to' is after toYear ${toYearToUse}.`,
          )
        }

        if (fromMonth) {
          const presetMonth = preset.dateRange.from?.getMonth()

          if (presetMonth && presetMonth < fromMonth.getMonth()) {
            throw new Error(
              `Preset ${preset.label}'s 'from' is before fromMonth ${format(
                fromMonth,
                "MMM, yyyy",
              )}.`,
            )
          }
        }

        if (toMonth) {
          const presetMonth = preset.dateRange.to?.getMonth()

          if (presetMonth && presetMonth > toMonth.getMonth()) {
            throw new Error(
              `Preset ${preset.label}'s 'to' is after toMonth ${format(
                toMonth,
                "MMM, yyyy",
              )}.`,
            )
          }
        }

        if (fromDay) {
          const presetDay = preset.dateRange.from?.getDate()

          if (presetDay && presetDay < fromDay.getDate()) {
            throw new Error(
              `Preset ${
                preset.dateRange.from
              }'s 'from' is before fromDay ${format(fromDay, "MMM dd, yyyy")}.`,
            )
          }
        }

        if (toDay) {
          const presetDay = preset.dateRange.to?.getDate()

          if (presetDay && presetDay > toDay.getDate()) {
            throw new Error(
              `Preset ${preset.label}'s 'to' is after toDay ${format(
                toDay,
                "MMM dd, yyyy",
              )}.`,
            )
          }
        }
      }
    })
  }
}

//#region Types & Exports
// ============================================================================

type SingleDatePickerProps = {
  presets?: DatePreset[]
  defaultValue?: Date
  value?: Date
  onChange?: (date: Date | undefined) => void
} & PickerProps

const DatePicker = ({ presets, ...props }: SingleDatePickerProps) => {
  if (presets) {
    validatePresets(presets, props)
  }

  return <SingleDatePicker presets={presets} {...(props as SingleProps)} />
}

DatePicker.displayName = "DatePicker"

type RangeDatePickerProps = {
  presets?: DateRangePreset[]
  defaultValue?: DateRange
  value?: DateRange
  onChange?: (dateRange: DateRange | undefined) => void
} & PickerProps

const DateRangePicker = ({ presets, ...props }: RangeDatePickerProps) => {
  if (presets) {
    validatePresets(presets, props)
  }

  return <RangeDatePicker presets={presets} {...(props as RangeProps)} />
}

DateRangePicker.displayName = "DateRangePicker"

export {
  DatePicker,
  DateRangePicker,
  type DatePreset, type DateRange, type DateRangePreset
}

================
File: src/components/Dialog.tsx
================
// Tremor Raw Dialog [v0.0.0]

import * as DialogPrimitives from "@radix-ui/react-dialog"
import React from "react"

import { cx, focusRing } from "@/lib/utils"

const Dialog = (
  props: React.ComponentPropsWithoutRef<typeof DialogPrimitives.Root>,
) => {
  return <DialogPrimitives.Root {...props} />
}
Dialog.displayName = "Dialog"

const DialogTrigger = DialogPrimitives.Trigger

DialogTrigger.displayName = "DialogTrigger"

const DialogClose = DialogPrimitives.Close

DialogClose.displayName = "DialogClose"

const DialogPortal = DialogPrimitives.Portal

DialogPortal.displayName = "DialogPortal"

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitives.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitives.Overlay>
>(({ className, ...props }, forwardedRef) => {
  return (
    <DialogPrimitives.Overlay
      ref={forwardedRef}
      className={cx(
        // base
        "fixed inset-0 z-50 overflow-y-auto",
        // background color
        "bg-black/70",
        // transition
        "data-[state=open]:animate-dialogOverlayShow",
        className,
      )}
      {...props}
    />
  )
})

DialogOverlay.displayName = "DialogOverlay"

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitives.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitives.Content>
>(({ className, ...props }, forwardedRef) => {
  return (
    <DialogPortal>
      <DialogOverlay>
        <DialogPrimitives.Content
          ref={forwardedRef}
          className={cx(
            // base
            "fixed left-1/2 top-1/2 z-50 w-[95vw] max-w-lg -translate-x-1/2 -translate-y-1/2 overflow-y-auto rounded-md border p-6 shadow-lg",
            // border color
            "border-gray-200 dark:border-gray-900",
            // background color
            "bg-white dark:bg-[#090E1A]",
            // transition
            "data-[state=open]:animate-dialogContentShow",
            focusRing,
            className,
          )}
          {...props}
        />
      </DialogOverlay>
    </DialogPortal>
  )
})

DialogContent.displayName = "DialogContent"

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => {
  return <div className={cx("flex flex-col gap-y-1", className)} {...props} />
}

DialogHeader.displayName = "DialogHeader"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitives.Title>
>(({ className, ...props }, forwardedRef) => (
  <DialogPrimitives.Title
    ref={forwardedRef}
    className={cx(
      // base
      "text-lg font-semibold",
      // text color
      "text-gray-900 dark:text-gray-50",
      className,
    )}
    {...props}
  />
))

DialogTitle.displayName = "DialogTitle"

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitives.Description>
>(({ className, ...props }, forwardedRef) => {
  return (
    <DialogPrimitives.Description
      ref={forwardedRef}
      className={cx("text-gray-500 dark:text-gray-500", className)}
      {...props}
    />
  )
})

DialogDescription.displayName = "DialogDescription"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => {
  return (
    <div
      className={cx(
        "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
        className,
      )}
      {...props}
    />
  )
}

DialogFooter.displayName = "DialogFooter"

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
}

================
File: src/components/Divider.tsx
================
// Tremor Raw Divider [v0.0.1]

import React from "react"

import { cx } from "@/lib/utils"

interface DividerProps extends React.ComponentPropsWithoutRef<"div"> {}

const Divider = React.forwardRef<HTMLDivElement, DividerProps>(
  ({ className, children, ...props }, forwardedRef) => (
    <div
      ref={forwardedRef}
      className={cx(
        // base
        "mx-auto my-6 flex w-full items-center justify-between gap-3 text-sm",
        // text color
        "text-gray-500 dark:text-gray-500",
        className,
      )}
      {...props}
    >
      {children ? (
        <>
          <div
            className={cx(
              // base
              "h-[1px] w-full",
              // background color
              "bg-gray-200 dark:bg-gray-800",
            )}
          />
          <div className="whitespace-nowrap text-inherit">{children}</div>
          <div
            className={cx(
              // base
              "h-[1px] w-full",
              // background color
              "bg-gray-200 dark:bg-gray-800",
            )}
          />
        </>
      ) : (
        <div
          className={cx(
            // base
            "h-[1px] w-full",
            // background color
            "bg-gray-200 dark:bg-gray-800",
          )}
        />
      )}
    </div>
  ),
)

Divider.displayName = "Divider"

export { Divider }

================
File: src/components/Drawer.tsx
================
// Tremor Raw Drawer [v0.0.0]

import * as DrawerPrimitives from "@radix-ui/react-dialog"
import { RiCloseLine } from "@remixicon/react"
import * as React from "react"

import { cx, focusRing } from "@/lib/utils"

import { Button } from "./Button"

const Drawer = (
  props: React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Root>,
) => {
  return <DrawerPrimitives.Root {...props} />
}
Drawer.displayName = "Drawer"

const DrawerTrigger = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitives.Trigger>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Trigger>
>(({ className, ...props }, ref) => {
  return (
    <DrawerPrimitives.Trigger ref={ref} className={cx(className)} {...props} />
  )
})
DrawerTrigger.displayName = "Drawer.Trigger"

const DrawerClose = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Close>
>(({ className, ...props }, ref) => {
  return (
    <DrawerPrimitives.Close ref={ref} className={cx(className)} {...props} />
  )
})
DrawerClose.displayName = "Drawer.Close"

const DrawerPortal = DrawerPrimitives.Portal

DrawerPortal.displayName = "DrawerPortal"

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitives.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Overlay>
>(({ className, ...props }, forwardedRef) => {
  return (
    <DrawerPrimitives.Overlay
      ref={forwardedRef}
      className={cx(
        // base
        "fixed inset-0 z-50 overflow-y-auto",
        // background color
        "bg-black/30",
        // transition
        "data-[state=closed]:animate-hide data-[state=open]:animate-dialogOverlayShow",
        className,
      )}
      {...props}
      style={{
        animationDuration: "400ms",
        animationFillMode: "backwards",
      }}
    />
  )
})

DrawerOverlay.displayName = "DrawerOverlay"

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitives.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Content>
>(({ className, ...props }, forwardedRef) => {
  return (
    <DrawerPortal>
      <DrawerOverlay>
        <DrawerPrimitives.Content
          ref={forwardedRef}
          className={cx(
            // base
            "fixed inset-y-2 mx-auto flex w-[95vw] flex-1 flex-col overflow-y-auto rounded-md border p-4 shadow-lg focus:outline-none max-sm:inset-x-2 sm:inset-y-2 sm:right-2 sm:max-w-lg sm:p-6",
            // border color
            "border-gray-200 dark:border-gray-900",
            // background color
            "bg-white dark:bg-[#090E1A]",
            // transition
            "data-[state=closed]:animate-drawerSlideRightAndFade data-[state=open]:animate-drawerSlideLeftAndFade",
            focusRing,
            className,
          )}
          {...props}
        />
      </DrawerOverlay>
    </DrawerPortal>
  )
})

DrawerContent.displayName = "DrawerContent"

const DrawerHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentPropsWithoutRef<"div">
>(({ children, className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      className="flex items-start justify-between gap-x-4 border-b border-gray-200 pb-4 dark:border-gray-900"
      {...props}
    >
      <div className={cx("mt-1 flex flex-col gap-y-1", className)}>
        {children}
      </div>
      <DrawerPrimitives.Close asChild>
        <Button
          variant="ghost"
          className="aspect-square p-1 hover:bg-gray-100 hover:dark:bg-gray-400/10"
        >
          <RiCloseLine className="size-6" aria-hidden="true" />
        </Button>
      </DrawerPrimitives.Close>
    </div>
  )
})

DrawerHeader.displayName = "Drawer.Header"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Title>
>(({ className, ...props }, forwardedRef) => (
  <DrawerPrimitives.Title
    ref={forwardedRef}
    className={cx(
      // base
      "text-base font-semibold",
      // text color
      "text-gray-900 dark:text-gray-50",
      className,
    )}
    {...props}
  />
))

DrawerTitle.displayName = "DrawerTitle"

const DrawerBody = React.forwardRef<
  HTMLDivElement,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => {
  return <div ref={ref} className={cx("flex-1 py-4", className)} {...props} />
})

DrawerBody.displayName = "Drawer.Body"

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Description>
>(({ className, ...props }, forwardedRef) => {
  return (
    <DrawerPrimitives.Description
      ref={forwardedRef}
      className={cx("text-gray-500 dark:text-gray-500", className)}
      {...props}
    />
  )
})

DrawerDescription.displayName = "DrawerDescription"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => {
  return (
    <div
      className={cx(
        "flex flex-col-reverse border-t border-gray-200 pt-4 sm:flex-row sm:justify-end sm:space-x-2 dark:border-gray-900",
        className,
      )}
      {...props}
    />
  )
}

DrawerFooter.displayName = "DrawerFooter"

export {
  Drawer,
  DrawerBody,
  DrawerClose,
  DrawerContent,
  DrawerDescription,
  DrawerFooter,
  DrawerHeader,
  DrawerTitle,
  DrawerTrigger,
}

================
File: src/components/Dropdown.tsx
================
// Tremor Raw Dropdown Menu [v0.0.0]

"use client"

import * as DropdownMenuPrimitives from "@radix-ui/react-dropdown-menu"
import {
  RiArrowRightSLine,
  RiCheckboxBlankCircleLine,
  RiCheckLine,
  RiRadioButtonFill,
} from "@remixicon/react"
import * as React from "react"

import { cx } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitives.Root
DropdownMenu.displayName = "DropdownMenu"

const DropdownMenuTrigger = DropdownMenuPrimitives.Trigger
DropdownMenuTrigger.displayName = "DropdownMenuTrigger"

const DropdownMenuGroup = DropdownMenuPrimitives.Group
DropdownMenuGroup.displayName = "DropdownMenuGroup"

const DropdownMenuSubMenu = DropdownMenuPrimitives.Sub
DropdownMenuSubMenu.displayName = "DropdownMenuSubMenu"

const DropdownMenuRadioGroup = DropdownMenuPrimitives.RadioGroup
DropdownMenuRadioGroup.displayName = "DropdownMenuRadioGroup"

const DropdownMenuSubMenuTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitives.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.SubTrigger>
>(({ className, children, ...props }, forwardedRef) => (
  <DropdownMenuPrimitives.SubTrigger
    ref={forwardedRef}
    className={cx(
      // base
      "relative flex cursor-default select-none items-center rounded py-1.5 pl-2 pr-1 outline-none transition-colors data-[state=checked]:font-semibold sm:text-sm",
      // text color
      "text-gray-900 dark:text-gray-50",
      // disabled
      "data-[disabled]:pointer-events-none data-[disabled]:text-gray-400 data-[disabled]:hover:bg-none dark:data-[disabled]:text-gray-600",
      // focus
      "focus-visible:bg-gray-100 data-[state=open]:bg-gray-100 focus-visible:dark:bg-gray-900 data-[state=open]:dark:bg-gray-900",
      // hover
      "hover:bg-gray-100 hover:dark:bg-gray-900",
      //
      className,
    )}
    {...props}
  >
    {children}
    <RiArrowRightSLine
      className="ml-auto size-4 shrink-0 text-gray-500"
      aria-hidden="true"
    />
  </DropdownMenuPrimitives.SubTrigger>
))
DropdownMenuSubMenuTrigger.displayName = "DropdownMenuSubMenuTrigger"

const DropdownMenuSubMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitives.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.SubContent>
>(({ className, collisionPadding = 8, ...props }, forwardedRef) => (
  <DropdownMenuPrimitives.Portal>
    <DropdownMenuPrimitives.SubContent
      ref={forwardedRef}
      collisionPadding={collisionPadding}
      className={cx(
        // base
        "relative z-50 overflow-hidden rounded-md border p-1 shadow-xl shadow-black/[2.5%]",
        // widths
        "min-w-32",
        // heights
        "max-h-[var(--radix-popper-available-height)]",
        // background color
        "bg-white dark:bg-gray-950",
        // text color
        "text-gray-900 dark:text-gray-50",
        // border color
        "border-gray-200 dark:border-gray-800",
        // transition
        "will-change-[transform,opacity]",
        // "data-[state=open]:animate-slideDownAndFade",
        "data-[state=closed]:animate-hide",
        "data-[side=bottom]:animate-slideDownAndFade data-[side=left]:animate-slideLeftAndFade data-[side=right]:animate-slideRightAndFade data-[side=top]:animate-slideUpAndFade",
        className,
      )}
      {...props}
    />
  </DropdownMenuPrimitives.Portal>
))
DropdownMenuSubMenuContent.displayName = "DropdownMenuSubMenuContent"

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitives.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.Content>
>(
  (
    {
      className,
      sideOffset = 8,
      collisionPadding = 8,
      align = "center",
      loop = true,
      ...props
    },
    forwardedRef,
  ) => (
    <DropdownMenuPrimitives.Portal>
      <DropdownMenuPrimitives.Content
        ref={forwardedRef}
        className={cx(
          // base
          "relative z-50 overflow-hidden rounded-md border p-1 shadow-xl shadow-black/[2.5%]",
          // widths
          "min-w-[calc(var(--radix-dropdown-menu-trigger-width))]",
          // heights
          "max-h-[var(--radix-popper-available-height)]",
          // background color
          "bg-white dark:bg-gray-950",
          // text color
          "text-gray-900 dark:text-gray-50",
          // border color
          "border-gray-200 dark:border-gray-800",
          // transition
          "will-change-[transform,opacity]",
          "data-[state=closed]:animate-hide",
          "data-[side=bottom]:animate-slideDownAndFade data-[side=left]:animate-slideLeftAndFade data-[side=right]:animate-slideRightAndFade data-[side=top]:animate-slideUpAndFade",
          className,
        )}
        sideOffset={sideOffset}
        align={align}
        collisionPadding={collisionPadding}
        loop={loop}
        {...props}
      />
    </DropdownMenuPrimitives.Portal>
  ),
)
DropdownMenuContent.displayName = "DropdownMenuContent"

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitives.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.Item> & {
    shortcut?: string
    hint?: string
  }
>(({ className, shortcut, hint, children, ...props }, forwardedRef) => (
  <DropdownMenuPrimitives.Item
    ref={forwardedRef}
    className={cx(
      // base
      "group/DropdownMenuItem relative flex cursor-pointer select-none items-center rounded py-1.5 pl-2 pr-1 outline-none transition-colors data-[state=checked]:font-semibold sm:text-sm",
      // text color
      "text-gray-900 dark:text-gray-50",
      // disabled
      "data-[disabled]:pointer-events-none data-[disabled]:text-gray-400 data-[disabled]:hover:bg-none dark:data-[disabled]:text-gray-600",
      // focus
      "focus-visible:bg-gray-100 focus-visible:dark:bg-gray-900",
      // hover
      "hover:bg-gray-100 hover:dark:bg-gray-900",
      className,
    )}
    {...props}
  >
    {children}
    {hint && (
      <span
        className={cx("ml-auto pl-2 text-sm text-gray-400 dark:text-gray-600")}
      >
        {hint}
      </span>
    )}
    {shortcut && (
      <span
        className={cx("ml-auto pl-2 text-sm text-gray-400 dark:text-gray-600")}
      >
        {shortcut}
      </span>
    )}
  </DropdownMenuPrimitives.Item>
))
DropdownMenuItem.displayName = "DropdownMenuItem"

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitives.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.CheckboxItem> & {
    shortcut?: string
    hint?: string
  }
>(
  (
    { className, hint, shortcut, children, checked, ...props },
    forwardedRef,
  ) => (
    <DropdownMenuPrimitives.CheckboxItem
      ref={forwardedRef}
      className={cx(
        // base
        "relative flex cursor-pointer select-none items-center gap-x-2 rounded py-1.5 pl-8 pr-1 outline-none transition-colors data-[state=checked]:font-semibold sm:text-sm",
        // text color
        "text-gray-900 dark:text-gray-50",
        // disabled
        "data-[disabled]:pointer-events-none data-[disabled]:text-gray-400 data-[disabled]:hover:bg-none dark:data-[disabled]:text-gray-600",
        // focus
        "focus-visible:bg-gray-100 focus-visible:dark:bg-gray-900",
        // hover
        "hover:bg-gray-100 hover:dark:bg-gray-900",
        className,
      )}
      checked={checked}
      {...props}
    >
      <span className="absolute left-2 flex size-4 items-center justify-center">
        <DropdownMenuPrimitives.ItemIndicator>
          <RiCheckLine
            aria-hidden="true"
            className="size-full shrink-0 text-gray-800 dark:text-gray-200"
          />
        </DropdownMenuPrimitives.ItemIndicator>
      </span>
      {children}
      {hint && (
        <span
          className={cx(
            "ml-auto text-sm font-normal text-gray-400 dark:text-gray-600",
          )}
        >
          {hint}
        </span>
      )}
      {shortcut && (
        <span
          className={cx(
            "ml-auto text-sm font-normal tracking-widest text-gray-400 dark:border-gray-800 dark:text-gray-600",
          )}
        >
          {shortcut}
        </span>
      )}
    </DropdownMenuPrimitives.CheckboxItem>
  ),
)
DropdownMenuCheckboxItem.displayName = "DropdownMenuCheckboxItem"

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitives.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.RadioItem> & {
    shortcut?: string
    hint?: string
    iconType?: "check" | "radio"
  }
>(
  (
    { className, hint, shortcut, children, iconType = "radio", ...props },
    forwardedRef,
  ) => (
    <DropdownMenuPrimitives.RadioItem
      ref={forwardedRef}
      className={cx(
        // base
        "group/DropdownMenuRadioItem relative flex cursor-pointer select-none items-center gap-x-2 rounded py-1.5 pl-8 pr-1 outline-none transition-colors data-[state=checked]:font-semibold sm:text-sm",
        // text color
        "text-gray-900 dark:text-gray-50",
        // disabled
        "data-[disabled]:pointer-events-none data-[disabled]:text-gray-400 data-[disabled]:hover:bg-none dark:data-[disabled]:text-gray-600",
        // focus
        "focus-visible:bg-gray-100 focus-visible:dark:bg-gray-900",
        // hover
        "hover:bg-gray-100 hover:dark:bg-gray-900",
        className,
      )}
      {...props}
    >
      {iconType === "radio" ? (
        <span className="absolute left-2 flex size-4 items-center justify-center">
          <RiRadioButtonFill
            aria-hidden="true"
            className="size-full shrink-0 text-blue-500 group-data-[state=checked]/DropdownMenuRadioItem:flex group-data-[state=unchecked]/DropdownMenuRadioItem:hidden dark:text-blue-500"
          />
          <RiCheckboxBlankCircleLine
            aria-hidden="true"
            className="size-full shrink-0 text-gray-300 group-data-[state=unchecked]/DropdownMenuRadioItem:flex group-data-[state=checked]/DropdownMenuRadioItem:hidden dark:text-gray-700"
          />
        </span>
      ) : iconType === "check" ? (
        <span className="absolute left-2 flex size-4 items-center justify-center">
          <RiCheckLine
            aria-hidden="true"
            className="size-full shrink-0 text-gray-800 group-data-[state=checked]/DropdownMenuRadioItem:flex group-data-[state=unchecked]/DropdownMenuRadioItem:hidden dark:text-gray-200"
          />
        </span>
      ) : null}
      {children}
      {hint && (
        <span
          className={cx(
            "ml-auto text-sm font-normal text-gray-400 dark:text-gray-600",
          )}
        >
          {hint}
        </span>
      )}
      {shortcut && (
        <span
          className={cx(
            "ml-auto text-sm font-normal tracking-widest text-gray-400 dark:border-gray-800 dark:text-gray-600",
          )}
        >
          {shortcut}
        </span>
      )}
    </DropdownMenuPrimitives.RadioItem>
  ),
)
DropdownMenuRadioItem.displayName = "DropdownMenuRadioItem"

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitives.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.Label>
>(({ className, ...props }, forwardedRef) => (
  <DropdownMenuPrimitives.Label
    ref={forwardedRef}
    className={cx(
      // base
      "px-2 py-2 text-xs font-medium tracking-wide",
      // text color
      "text-gray-500 dark:text-gray-500",
      className,
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = "DropdownMenuLabel"

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitives.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.Separator>
>(({ className, ...props }, forwardedRef) => (
  <DropdownMenuPrimitives.Separator
    ref={forwardedRef}
    className={cx(
      "-mx-1 my-1 h-px border-t border-gray-200 dark:border-gray-800",
      className,
    )}
    {...props}
  />
))
DropdownMenuSeparator.displayName = "DropdownMenuSeparator"

const DropdownMenuIconWrapper = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <div
      className={cx(
        // text color
        "text-gray-600 dark:text-gray-400",
        // disabled
        "group-data-[disabled]/DropdownMenuItem:text-gray-400 group-data-[disabled]/DropdownMenuItem:dark:text-gray-700",
        className,
      )}
      {...props}
    />
  )
}
DropdownMenuIconWrapper.displayName = "DropdownMenuIconWrapper"

export {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuIconWrapper,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuSubMenu,
  DropdownMenuSubMenuContent,
  DropdownMenuSubMenuTrigger,
  DropdownMenuTrigger,
}

================
File: src/components/Input.tsx
================
// Tremor Raw Input [v1.0.3]

import { RiEyeFill, RiEyeOffFill, RiSearchLine } from "@remixicon/react"
import React from "react"
import { tv, type VariantProps } from "tailwind-variants"

import { cx, focusInput, focusRing, hasErrorInput } from "@/lib/utils"

const inputStyles = tv({
  base: [
    // base
    "relative block w-full appearance-none truncate rounded-md border px-2.5 py-2 shadow-sm outline-none transition sm:text-sm",
    // border color
    "border-gray-300 dark:border-gray-800",
    // text color
    "text-gray-900 dark:text-gray-50",
    // placeholder color
    "placeholder-gray-400 dark:placeholder-gray-500",
    // background color
    "bg-white dark:bg-gray-950",
    // disabled
    "disabled:border-gray-300 disabled:bg-gray-100 disabled:text-gray-400",
    "disabled:dark:border-gray-700 disabled:dark:bg-gray-800 disabled:dark:text-gray-500",
    // file
    [
      "file:-my-2 file:-ml-2.5 file:cursor-pointer file:rounded-l-[5px] file:rounded-r-none file:border-0 file:px-3 file:py-2 file:outline-none focus:outline-none disabled:pointer-events-none file:disabled:pointer-events-none",
      "file:border-solid file:border-gray-300 file:bg-gray-50 file:text-gray-500 file:hover:bg-gray-100 file:dark:border-gray-800 file:dark:bg-gray-950 file:hover:dark:bg-gray-900/20 file:disabled:dark:border-gray-700",
      "file:[border-inline-end-width:1px] file:[margin-inline-end:0.75rem]",
      "file:disabled:bg-gray-100 file:disabled:text-gray-500 file:disabled:dark:bg-gray-800",
    ],
    // focus
    focusInput,
    // invalid (optional)
    // "aria-[invalid=true]:dark:ring-red-400/20 aria-[invalid=true]:ring-2 aria-[invalid=true]:ring-red-200 aria-[invalid=true]:border-red-500 invalid:ring-2 invalid:ring-red-200 invalid:border-red-500"
    // remove search cancel button (optional)
    "[&::--webkit-search-cancel-button]:hidden [&::-webkit-search-cancel-button]:hidden [&::-webkit-search-decoration]:hidden",
  ],
  variants: {
    hasError: {
      true: hasErrorInput,
    },
    // number input
    enableStepper: {
      false:
        "[appearance:textfield] [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-outer-spin-button]:appearance-none",
    },
  },
})

interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement>,
    VariantProps<typeof inputStyles> {
  inputClassName?: string
}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  (
    {
      className,
      inputClassName,
      hasError,
      enableStepper = true,
      type,
      ...props
    }: InputProps,
    forwardedRef,
  ) => {
    const [typeState, setTypeState] = React.useState(type)

    const isPassword = type === "password"
    const isSearch = type === "search"

    return (
      <div className={cx("relative w-full", className)}>
        <input
          ref={forwardedRef}
          type={isPassword ? typeState : type}
          className={cx(
            inputStyles({ hasError, enableStepper }),
            {
              "pl-8": isSearch,
              "pr-10": isPassword,
            },
            inputClassName,
          )}
          {...props}
        />
        {isSearch && (
          <div
            className={cx(
              // base
              "pointer-events-none absolute bottom-0 left-2 flex h-full items-center justify-center",
              // text color
              "text-gray-400 dark:text-gray-600",
            )}
          >
            <RiSearchLine
              className="size-[1.125rem] shrink-0"
              aria-hidden="true"
            />
          </div>
        )}
        {isPassword && (
          <div
            className={cx(
              "absolute bottom-0 right-0 flex h-full items-center justify-center px-3",
            )}
          >
            <button
              aria-label="Change password visibility"
              className={cx(
                // base
                "h-fit w-fit rounded-sm outline-none transition-all",
                // text
                "text-gray-400 dark:text-gray-600",
                // hover
                "hover:text-gray-500 hover:dark:text-gray-500",
                focusRing,
              )}
              type="button"
              onClick={() => {
                setTypeState(typeState === "password" ? "text" : "password")
              }}
            >
              <span className="sr-only">
                {typeState === "password" ? "Show password" : "Hide password"}
              </span>
              {typeState === "password" ? (
                <RiEyeFill aria-hidden="true" className="size-5 shrink-0" />
              ) : (
                <RiEyeOffFill aria-hidden="true" className="size-5 shrink-0" />
              )}
            </button>
          </div>
        )}
      </div>
    )
  },
)

Input.displayName = "Input"

export { Input, inputStyles, type InputProps }

================
File: src/components/Label.tsx
================
// Tremor Raw Label [v0.0.0]

import * as LabelPrimitives from "@radix-ui/react-label"
import * as React from "react"

import { cx } from "@/lib/utils"

interface CheckboxProps
  extends React.ComponentPropsWithoutRef<typeof LabelPrimitives.Root> {
  disabled?: boolean
}

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitives.Root>,
  CheckboxProps
>(({ className, disabled, ...props }, forwardedRef) => (
  <LabelPrimitives.Root
    ref={forwardedRef}
    className={cx(
      // base
      "text-sm leading-none",
      // text color
      "text-gray-900 dark:text-gray-50",
      // disabled
      {
        "text-gray-400 dark:text-gray-600": disabled,
      },
      className,
    )}
    aria-disabled={disabled}
    {...props}
  />
))
Label.displayName = "Label"

export { Label }

================
File: src/components/LineChart.tsx
================
// Tremor Raw LineChart [v0.0.0]

"use client"

import { RiArrowLeftSLine, RiArrowRightSLine } from "@remixicon/react"
import React from "react"
import {
  CartesianGrid,
  Dot,
  Label,
  Line,
  Legend as RechartsLegend,
  LineChart as RechartsLineChart,
  ResponsiveContainer,
  Tooltip,
  XAxis,
  YAxis,
} from "recharts"
import { AxisDomain } from "recharts/types/util/types"

import {
  AvailableChartColors,
  AvailableChartColorsKeys,
  constructCategoryColors,
  getColorClassName,
  getYAxisDomain,
  hasOnlyOneValueForKey,
} from "@/lib/chartUtils"
import { useOnWindowResize } from "@/lib/useOnWindowResize"
import { cx, percentageFormatter } from "@/lib/utils"
import { Badge } from "./Badge"
import { getBadgeType } from "./ui/overview/DashboardChartCard"

//#region Legend

interface LegendItemProps {
  name: string
  color: AvailableChartColorsKeys
  onClick?: (name: string, color: AvailableChartColorsKeys) => void
  activeLegend?: string
}

const LegendItem = ({
  name,
  color,
  onClick,
  activeLegend,
}: LegendItemProps) => {
  const hasOnValueChange = !!onClick
  return (
    <li
      className={cx(
        // base
        "group inline-flex flex-nowrap items-center gap-1.5 whitespace-nowrap rounded px-2 py-1 transition",
        hasOnValueChange
          ? "bg-transpaent cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800"
          : "cursor-default",
      )}
      onClick={(e) => {
        e.stopPropagation()
        onClick?.(name, color)
      }}
    >
      <span
        className={cx(
          "h-[3px] w-3.5 shrink-0 rounded-full",
          getColorClassName(color, "bg"),
          activeLegend && activeLegend !== name ? "opacity-40" : "opacity-100",
        )}
        aria-hidden="true"
      />
      <p
        className={cx(
          // base
          "truncate whitespace-nowrap text-xs",
          // text color
          "text-gray-700 dark:text-gray-300",
          hasOnValueChange &&
            "group-hover:text-gray-900 dark:group-hover:text-gray-50",
          activeLegend && activeLegend !== name ? "opacity-40" : "opacity-100",
        )}
      >
        {name}
      </p>
    </li>
  )
}

interface ScrollButtonProps {
  icon: React.ElementType
  onClick?: () => void
  disabled?: boolean
}

const ScrollButton = ({ icon, onClick, disabled }: ScrollButtonProps) => {
  const Icon = icon
  const [isPressed, setIsPressed] = React.useState(false)
  const intervalRef = React.useRef<NodeJS.Timeout | null>(null)

  React.useEffect(() => {
    if (isPressed) {
      intervalRef.current = setInterval(() => {
        onClick?.()
      }, 300)
    } else {
      clearInterval(intervalRef.current as NodeJS.Timeout)
    }
    return () => clearInterval(intervalRef.current as NodeJS.Timeout)
  }, [isPressed, onClick])

  React.useEffect(() => {
    if (disabled) {
      clearInterval(intervalRef.current as NodeJS.Timeout)
      setIsPressed(false)
    }
  }, [disabled])

  return (
    <button
      type="button"
      className={cx(
        // base
        "group inline-flex size-5 items-center truncate rounded transition",
        disabled
          ? "cursor-not-allowed text-gray-400 dark:text-gray-600"
          : "cursor-pointer text-gray-700 hover:bg-gray-100 hover:text-gray-900 dark:text-gray-300 dark:hover:bg-gray-800 dark:hover:text-gray-50",
      )}
      disabled={disabled}
      onClick={(e) => {
        e.stopPropagation()
        onClick?.()
      }}
      onMouseDown={(e) => {
        e.stopPropagation()
        setIsPressed(true)
      }}
      onMouseUp={(e) => {
        e.stopPropagation()
        setIsPressed(false)
      }}
    >
      <Icon className="size-full" aria-hidden="true" />
    </button>
  )
}

interface LegendProps extends React.OlHTMLAttributes<HTMLOListElement> {
  categories: string[]
  colors?: AvailableChartColorsKeys[]
  onClickLegendItem?: (category: string, color: string) => void
  activeLegend?: string
  enableLegendSlider?: boolean
}

type HasScrollProps = {
  left: boolean
  right: boolean
}

const Legend = React.forwardRef<HTMLOListElement, LegendProps>((props, ref) => {
  const {
    categories,
    colors = AvailableChartColors,
    className,
    onClickLegendItem,
    activeLegend,
    enableLegendSlider = false,
    ...other
  } = props
  const scrollableRef = React.useRef<HTMLInputElement>(null)
  const [hasScroll, setHasScroll] = React.useState<HasScrollProps | null>(null)
  const [isKeyDowned, setIsKeyDowned] = React.useState<string | null>(null)
  const intervalRef = React.useRef<NodeJS.Timeout | null>(null)

  const checkScroll = React.useCallback(() => {
    const scrollable = scrollableRef?.current
    if (!scrollable) return

    const hasLeftScroll = scrollable.scrollLeft > 0
    const hasRightScroll =
      scrollable.scrollWidth - scrollable.clientWidth > scrollable.scrollLeft

    setHasScroll({ left: hasLeftScroll, right: hasRightScroll })
  }, [setHasScroll])

  const scrollToTest = React.useCallback(
    (direction: "left" | "right") => {
      const element = scrollableRef?.current
      const width = element?.clientWidth ?? 0

      if (element && enableLegendSlider) {
        element.scrollTo({
          left:
            direction === "left"
              ? element.scrollLeft - width
              : element.scrollLeft + width,
          behavior: "smooth",
        })
        setTimeout(() => {
          checkScroll()
        }, 400)
      }
    },
    [enableLegendSlider, checkScroll],
  )

  React.useEffect(() => {
    const keyDownHandler = (key: string) => {
      if (key === "ArrowLeft") {
        scrollToTest("left")
      } else if (key === "ArrowRight") {
        scrollToTest("right")
      }
    }
    if (isKeyDowned) {
      keyDownHandler(isKeyDowned)
      intervalRef.current = setInterval(() => {
        keyDownHandler(isKeyDowned)
      }, 300)
    } else {
      clearInterval(intervalRef.current as NodeJS.Timeout)
    }
    return () => clearInterval(intervalRef.current as NodeJS.Timeout)
  }, [isKeyDowned, scrollToTest])

  const keyDown = (e: KeyboardEvent) => {
    e.stopPropagation()
    if (e.key === "ArrowLeft" || e.key === "ArrowRight") {
      e.preventDefault()
      setIsKeyDowned(e.key)
    }
  }
  const keyUp = (e: KeyboardEvent) => {
    e.stopPropagation()
    setIsKeyDowned(null)
  }

  React.useEffect(() => {
    const scrollable = scrollableRef?.current
    if (enableLegendSlider) {
      checkScroll()
      scrollable?.addEventListener("keydown", keyDown)
      scrollable?.addEventListener("keyup", keyUp)
    }

    return () => {
      scrollable?.removeEventListener("keydown", keyDown)
      scrollable?.removeEventListener("keyup", keyUp)
    }
  }, [checkScroll, enableLegendSlider])

  return (
    <ol
      ref={ref}
      className={cx("relative overflow-hidden", className)}
      {...other}
    >
      <div
        ref={scrollableRef}
        tabIndex={0}
        className={cx(
          "flex h-full",
          enableLegendSlider
            ? hasScroll?.right || hasScroll?.left
              ? "snap-mandatory items-center overflow-auto pl-4 pr-12 [scrollbar-width:none] [&::-webkit-scrollbar]:hidden"
              : ""
            : "flex-wrap",
        )}
      >
        {categories.map((category, index) => (
          <LegendItem
            key={`item-${index}`}
            name={category}
            color={colors[index] as AvailableChartColorsKeys}
            onClick={onClickLegendItem}
            activeLegend={activeLegend}
          />
        ))}
      </div>
      {enableLegendSlider && (hasScroll?.right || hasScroll?.left) ? (
        <>
          <div
            className={cx(
              // base
              "absolute bottom-0 right-0 top-0 flex h-full items-center justify-center pr-1",
              // background color
              "bg-white dark:bg-gray-950",
            )}
          >
            <ScrollButton
              icon={RiArrowLeftSLine}
              onClick={() => {
                setIsKeyDowned(null)
                scrollToTest("left")
              }}
              disabled={!hasScroll?.left}
            />
            <ScrollButton
              icon={RiArrowRightSLine}
              onClick={() => {
                setIsKeyDowned(null)
                scrollToTest("right")
              }}
              disabled={!hasScroll?.right}
            />
          </div>
        </>
      ) : null}
    </ol>
  )
})

Legend.displayName = "Legend"

const ChartLegend = (
  { payload }: any,
  categoryColors: Map<string, AvailableChartColorsKeys>,
  setLegendHeight: React.Dispatch<React.SetStateAction<number>>,
  activeLegend: string | undefined,
  onClick?: (category: string, color: string) => void,
  enableLegendSlider?: boolean,
) => {
  const legendRef = React.useRef<HTMLDivElement>(null)

  useOnWindowResize(() => {
    const calculateHeight = (height: number | undefined) =>
      height ? Number(height) + 15 : 60
    setLegendHeight(calculateHeight(legendRef.current?.clientHeight))
  })

  const filteredPayload = payload.filter((item: any) => item.type !== "none")

  return (
    <div ref={legendRef} className="flex items-center justify-end">
      <Legend
        categories={filteredPayload.map((entry: any) => entry.value)}
        colors={filteredPayload.map((entry: any) =>
          categoryColors.get(entry.value),
        )}
        onClickLegendItem={onClick}
        activeLegend={activeLegend}
        enableLegendSlider={enableLegendSlider}
      />
    </div>
  )
}

//#region Tooltip

interface ChartTooltipRowProps {
  value: string
  name: string
  color: string
}

const ChartTooltipRow = ({ value, name, color }: ChartTooltipRowProps) => (
  <div className="flex items-center justify-between space-x-8">
    <div className="flex items-center space-x-2">
      <span
        aria-hidden="true"
        className={cx("h-[3px] w-3.5 shrink-0 rounded-full", color)}
      />
      <p
        className={cx(
          // commmon
          "whitespace-nowrap text-right",
          // text color
          "text-gray-700 dark:text-gray-300",
        )}
      >
        {name}
      </p>
    </div>
    <p
      className={cx(
        // base
        "whitespace-nowrap text-right font-medium tabular-nums",
        // text color
        "text-gray-900 dark:text-gray-50",
      )}
    >
      {value}
    </p>
  </div>
)

interface ChartTooltipProps {
  active: boolean | undefined
  payload: any
  label: string
  categoryColors: Map<string, string>
  valueFormatter: (value: number) => string
}

const OverviewChartTooltip = ({
  active,
  payload,
  categoryColors,
  valueFormatter,
}: ChartTooltipProps) => {
  if (active && payload) {
    const filteredPayload = payload.filter((item: any) => item.type !== "none")

    if (!active || !payload) return null

    const title = payload[0].payload.title
    const evolution = payload[0].payload.evolution
    if (!title) return null

    return (
      <div
        className={cx(
          // base
          "rounded-md border text-sm shadow-md",
          // border color
          "border-gray-200 dark:border-gray-800",
          // background color
          "bg-white dark:bg-gray-950",
        )}
      >
        <div className="flex items-start justify-between gap-2 border-b border-inherit p-2">
          <p
            className={cx(
              // base
              "font-medium",
              // text color
              "text-gray-900 dark:text-gray-50",
            )}
          >
            {title}
          </p>
          {evolution !== undefined && (
            <Badge variant={getBadgeType(evolution)}>
              {percentageFormatter(evolution)}
            </Badge>
          )}
        </div>
        <div className={cx("space-y-1 p-2")}>
          {filteredPayload.map((payload: any, index: number) => {
            const payloadData = payload.payload
            return (
              <ChartTooltipRow
                key={`id-${index}`}
                value={valueFormatter(payload.value)}
                name={
                  index === 0
                    ? payloadData.formattedDate
                    : payloadData.previousFormattedDate
                }
                color={getColorClassName(
                  categoryColors.get(payload.name) as AvailableChartColorsKeys,
                  "bg",
                )}
              />
            )
          })}
        </div>
      </div>
    )
  }
  return null
}

//#region LineChart

interface ActiveDot {
  index?: number
  dataKey?: string
}

type BaseEventProps = {
  eventType: "dot" | "category"
  categoryClicked: string
  [key: string]: number | string
}

type LineChartEventProps = BaseEventProps | null | undefined

interface LineChartProps extends React.HTMLAttributes<HTMLDivElement> {
  data: Record<string, any>[]
  index: string
  categories: string[]
  colors?: AvailableChartColorsKeys[]
  valueFormatter?: (value: number) => string
  startEndOnly?: boolean
  showXAxis?: boolean
  showYAxis?: boolean
  showGridLines?: boolean
  yAxisWidth?: number
  intervalType?: "preserveStartEnd" | "equidistantPreserveStart"
  showTooltip?: boolean
  showLegend?: boolean
  autoMinValue?: boolean
  minValue?: number
  maxValue?: number
  allowDecimals?: boolean
  onValueChange?: (value: LineChartEventProps) => void
  enableLegendSlider?: boolean
  tickGap?: number
  connectNulls?: boolean
  xAxisLabel?: string
  yAxisLabel?: string
}

const LineChart = React.forwardRef<HTMLDivElement, LineChartProps>(
  (props, ref) => {
    const {
      data = [],
      categories = [],
      index,
      colors = AvailableChartColors,
      valueFormatter = (value: number) => value.toString(),
      startEndOnly = false,
      showXAxis = true,
      showYAxis = true,
      showGridLines = true,
      yAxisWidth = 56,
      intervalType = "equidistantPreserveStart",
      showTooltip = true,
      showLegend = true,
      autoMinValue = false,
      minValue,
      maxValue,
      allowDecimals = true,
      connectNulls = false,
      className,
      onValueChange,
      enableLegendSlider = false,
      tickGap = 5,
      xAxisLabel,
      yAxisLabel,
      ...other
    } = props
    const paddingValue = !showXAxis && !showYAxis ? 0 : 20
    const [legendHeight, setLegendHeight] = React.useState(60)
    const [activeDot, setActiveDot] = React.useState<ActiveDot | undefined>(
      undefined,
    )
    const [activeLegend, setActiveLegend] = React.useState<string | undefined>(
      undefined,
    )
    const categoryColors = constructCategoryColors(categories, colors)

    const yAxisDomain = getYAxisDomain(autoMinValue, minValue, maxValue)
    const hasOnValueChange = !!onValueChange

    function onDotClick(itemData: any, event: React.MouseEvent) {
      event.stopPropagation()

      if (!hasOnValueChange) return
      if (
        (itemData.index === activeDot?.index &&
          itemData.dataKey === activeDot?.dataKey) ||
        (hasOnlyOneValueForKey(data, itemData.dataKey) &&
          activeLegend &&
          activeLegend === itemData.dataKey)
      ) {
        setActiveLegend(undefined)
        setActiveDot(undefined)
        onValueChange?.(null)
      } else {
        setActiveLegend(itemData.dataKey)
        setActiveDot({
          index: itemData.index,
          dataKey: itemData.dataKey,
        })
        onValueChange?.({
          eventType: "dot",
          categoryClicked: itemData.dataKey,
          ...itemData.payload,
        })
      }
    }

    function onCategoryClick(dataKey: string) {
      if (!hasOnValueChange) return
      if (
        (dataKey === activeLegend && !activeDot) ||
        (hasOnlyOneValueForKey(data, dataKey) &&
          activeDot &&
          activeDot.dataKey === dataKey)
      ) {
        setActiveLegend(undefined)
        onValueChange?.(null)
      } else {
        setActiveLegend(dataKey)
        onValueChange?.({
          eventType: "category",
          categoryClicked: dataKey,
        })
      }
      setActiveDot(undefined)
    }

    return (
      <div ref={ref} className={cx("h-80 w-full", className)} {...other}>
        <ResponsiveContainer>
          <RechartsLineChart
            data={data}
            onClick={
              hasOnValueChange && (activeLegend || activeDot)
                ? () => {
                    setActiveDot(undefined)
                    setActiveLegend(undefined)
                    onValueChange?.(null)
                  }
                : undefined
            }
            margin={{
              bottom: xAxisLabel ? 30 : undefined,
              left: yAxisLabel ? 20 : undefined,
              right: yAxisLabel ? 5 : undefined,
              top: 0,
            }}
          >
            {showGridLines ? (
              <CartesianGrid
                className={cx("stroke-gray-200 stroke-1 dark:stroke-gray-800")}
                horizontal={true}
                vertical={false}
              />
            ) : null}
            <XAxis
              padding={{ left: paddingValue, right: paddingValue }}
              hide={!showXAxis}
              dataKey={index}
              interval={startEndOnly ? "preserveStartEnd" : intervalType}
              tick={{ transform: "translate(0, 6)" }}
              ticks={
                startEndOnly
                  ? [data[0][index], data[data.length - 1][index]]
                  : undefined
              }
              fill=""
              stroke=""
              className={cx(
                // base
                "text-xs",
                // text fill
                "fill-gray-500 dark:fill-gray-500",
              )}
              tickLine={false}
              axisLine={false}
              minTickGap={tickGap}
            >
              {xAxisLabel && (
                <Label
                  position="insideBottom"
                  offset={-20}
                  className="fill-gray-800 text-sm font-medium dark:fill-gray-200"
                >
                  {xAxisLabel}
                </Label>
              )}
            </XAxis>
            <YAxis
              width={yAxisWidth}
              hide={!showYAxis}
              axisLine={false}
              tickLine={false}
              type="number"
              domain={yAxisDomain as AxisDomain}
              tick={{ transform: "translate(-3, 0)" }}
              fill=""
              stroke=""
              className={cx(
                // base
                "text-xs",
                // text fill
                "fill-gray-500 dark:fill-gray-500",
              )}
              tickFormatter={valueFormatter}
              allowDecimals={allowDecimals}
            >
              {yAxisLabel && (
                <Label
                  position="insideLeft"
                  style={{ textAnchor: "middle" }}
                  angle={-90}
                  offset={-15}
                  className="fill-gray-800 text-sm font-medium dark:fill-gray-200"
                >
                  {yAxisLabel}
                </Label>
              )}
            </YAxis>
            <Tooltip
              wrapperStyle={{ outline: "none" }}
              isAnimationActive={true}
              animationDuration={100}
              cursor={{ stroke: "#d1d5db", strokeWidth: 1 }}
              offset={20}
              position={{ y: 0 }}
              content={
                showTooltip ? (
                  ({ active, payload, label }) => (
                    <OverviewChartTooltip
                      active={active}
                      payload={payload}
                      label={label}
                      valueFormatter={valueFormatter}
                      categoryColors={categoryColors}
                    />
                  )
                ) : (
                  <></>
                )
              }
            />
            {showLegend ? (
              <RechartsLegend
                verticalAlign="top"
                height={legendHeight}
                content={({ payload }) =>
                  ChartLegend(
                    { payload },
                    categoryColors,
                    setLegendHeight,
                    activeLegend,
                    hasOnValueChange
                      ? (clickedLegendItem: string) =>
                          onCategoryClick(clickedLegendItem)
                      : undefined,
                    enableLegendSlider,
                  )
                }
              />
            ) : null}
            {categories.map((category) => (
              <Line
                className={cx(
                  getColorClassName(
                    categoryColors.get(category) as AvailableChartColorsKeys,
                    "stroke",
                  ),
                )}
                strokeOpacity={
                  activeDot || (activeLegend && activeLegend !== category)
                    ? 0.3
                    : 1
                }
                activeDot={(props: any) => {
                  const {
                    cx: cxCoord,
                    cy: cyCoord,
                    stroke,
                    strokeLinecap,
                    strokeLinejoin,
                    strokeWidth,
                    dataKey,
                  } = props
                  return (
                    <Dot
                      className={cx(
                        "stroke-white dark:stroke-gray-950",
                        onValueChange ? "cursor-pointer" : "",
                        getColorClassName(
                          categoryColors.get(
                            dataKey,
                          ) as AvailableChartColorsKeys,
                          "fill",
                        ),
                      )}
                      cx={cxCoord}
                      cy={cyCoord}
                      r={5}
                      fill=""
                      stroke={stroke}
                      strokeLinecap={strokeLinecap}
                      strokeLinejoin={strokeLinejoin}
                      strokeWidth={strokeWidth}
                      onClick={(_, event) => onDotClick(props, event)}
                    />
                  )
                }}
                dot={(props: any) => {
                  const {
                    stroke,
                    strokeLinecap,
                    strokeLinejoin,
                    strokeWidth,
                    cx: cxCoord,
                    cy: cyCoord,
                    dataKey,
                    index,
                  } = props

                  if (
                    (hasOnlyOneValueForKey(data, category) &&
                      !(
                        activeDot ||
                        (activeLegend && activeLegend !== category)
                      )) ||
                    (activeDot?.index === index &&
                      activeDot?.dataKey === category)
                  ) {
                    return (
                      <Dot
                        key={index}
                        cx={cxCoord}
                        cy={cyCoord}
                        r={5}
                        stroke={stroke}
                        fill=""
                        strokeLinecap={strokeLinecap}
                        strokeLinejoin={strokeLinejoin}
                        strokeWidth={strokeWidth}
                        className={cx(
                          "stroke-white dark:stroke-gray-950",
                          onValueChange ? "cursor-pointer" : "",
                          getColorClassName(
                            categoryColors.get(
                              dataKey,
                            ) as AvailableChartColorsKeys,
                            "fill",
                          ),
                        )}
                      />
                    )
                  }
                  return <React.Fragment key={index}></React.Fragment>
                }}
                key={category}
                name={category}
                type="linear"
                dataKey={category}
                stroke=""
                strokeWidth={2}
                strokeLinejoin="round"
                strokeLinecap="round"
                isAnimationActive={false}
                connectNulls={connectNulls}
              />
            ))}
            {/* hidden lines to increase clickable target area */}
            {onValueChange
              ? categories.map((category) => (
                  <Line
                    className={cx("cursor-pointer")}
                    strokeOpacity={0}
                    key={category}
                    name={category}
                    type="linear"
                    dataKey={category}
                    stroke="transparent"
                    fill="transparent"
                    legendType="none"
                    tooltipType="none"
                    strokeWidth={12}
                    connectNulls={connectNulls}
                    onClick={(props: any, event) => {
                      event.stopPropagation()
                      const { name } = props
                      onCategoryClick(name)
                    }}
                  />
                ))
              : null}
          </RechartsLineChart>
        </ResponsiveContainer>
      </div>
    )
  },
)

LineChart.displayName = "LineChart"

export { LineChart, type LineChartEventProps }

================
File: src/components/Popover.tsx
================
// Tremor Raw Popover [v0.0.0]

import * as PopoverPrimitives from "@radix-ui/react-popover"
import * as React from "react"

import { cx } from "@/lib/utils"

const Popover = (
  props: React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Root>,
) => {
  return <PopoverPrimitives.Root {...props} />
}

Popover.displayName = "Popover"

const PopoverTrigger = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitives.Trigger>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Trigger>
>((props, forwardedRef) => {
  return <PopoverPrimitives.Trigger ref={forwardedRef} {...props} />
})

PopoverTrigger.displayName = "PopoverTrigger"

const PopoverAnchor = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitives.Anchor>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Anchor>
>((props, forwardedRef) => {
  return <PopoverPrimitives.Anchor ref={forwardedRef} {...props} />
})

PopoverAnchor.displayName = "PopoverAnchor"

const PopoverClose = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Close>
>((props, forwardedRef) => {
  return <PopoverPrimitives.Close ref={forwardedRef} {...props} />
})

PopoverClose.displayName = "PopoverClose"

interface ContentProps
  extends React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Content> {}

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitives.Content>,
  ContentProps
>(
  (
    {
      className,
      sideOffset = 10,
      side = "bottom",
      align = "center",
      collisionPadding,
      avoidCollisions,
      ...props
    }: ContentProps,
    forwardedRef,
  ) => {
    return (
      <PopoverPrimitives.Portal>
        <PopoverPrimitives.Content
          ref={forwardedRef}
          sideOffset={sideOffset}
          side={side}
          align={align}
          collisionPadding={collisionPadding}
          avoidCollisions
          className={cx(
            // base
            "max-h-[var(--radix-popper-available-height)] min-w-60 overflow-hidden rounded-md border p-2.5 text-sm shadow-md",
            // border color
            "border-gray-200 dark:border-gray-800",
            // text color
            "text-gray-900 dark:text-gray-50",
            // background color
            "bg-white dark:bg-gray-950",
            // transition
            "will-change-[transform,opacity]",
            "data-[state=closed]:animate-hide",
            "data-[state=open]:data-[side=bottom]:animate-slideDownAndFade data-[state=open]:data-[side=left]:animate-slideLeftAndFade data-[state=open]:data-[side=right]:animate-slideRightAndFade data-[state=open]:data-[side=top]:animate-slideUpAndFade",

            className,
          )}
          // https://github.com/radix-ui/primitives/issues/1159
          onWheel={(event) => {
            event.stopPropagation()
            const isScrollingDown = event.deltaY > 0
            if (isScrollingDown) {
              event.currentTarget.dispatchEvent(
                new KeyboardEvent("keydown", { key: "ArrowDown" }),
              )
            } else {
              event.currentTarget.dispatchEvent(
                new KeyboardEvent("keydown", { key: "ArrowUp" }),
              )
            }
          }}
          {...props}
        />
      </PopoverPrimitives.Portal>
    )
  },
)
PopoverContent.displayName = "PopoverContent"

export { Popover, PopoverAnchor, PopoverClose, PopoverContent, PopoverTrigger }

================
File: src/components/ProgressBar.tsx
================
// Tremor Raw ProgressBar [v0.0.1]

import React from "react"
import { tv, type VariantProps } from "tailwind-variants"

import { cx } from "@/lib/utils"

const progressBarVariants = tv({
  slots: {
    background: "",
    bar: "",
  },
  variants: {
    variant: {
      default: {
        background: "bg-indigo-100 dark:bg-indigo-500/30",
        bar: "bg-indigo-600 dark:bg-indigo-500",
      },
      neutral: {
        background: "bg-gray-200 dark:bg-gray-500/40",
        bar: "bg-gray-500 dark:bg-gray-500",
      },
      warning: {
        background: "bg-yellow-200 dark:bg-yellow-500/30",
        bar: "bg-yellow-500 dark:bg-yellow-500",
      },
      error: {
        background: "bg-red-200 dark:bg-red-500/30",
        bar: "bg-red-500 dark:bg-red-500",
      },
      success: {
        background: "bg-emerald-200 dark:bg-emerald-500/30",
        bar: "bg-emerald-500 dark:bg-emerald-500",
      },
    },
  },
  defaultVariants: {
    variant: "default",
  },
})

interface ProgressBarProps
  extends React.HTMLProps<HTMLDivElement>,
    VariantProps<typeof progressBarVariants> {
  value?: number
  max?: number
  showAnimation?: boolean
  label?: string
}

const ProgressBar = React.forwardRef<HTMLDivElement, ProgressBarProps>(
  (
    {
      value = 0,
      max = 100,
      label,
      showAnimation = false,
      variant,
      className,
      ...props
    }: ProgressBarProps,
    forwardedRef,
  ) => {
    const safeValue = Math.min(max, Math.max(value, 0))
    const { background, bar } = progressBarVariants({ variant })
    return (
      <div
        ref={forwardedRef}
        className={cx("flex w-full items-center", className)}
        {...props}
      >
        <div
          className={cx(
            "relative flex h-2 w-full items-center rounded-full",
            background(),
          )}
          aria-label="progress bar"
          aria-valuenow={value}
          aria-valuemax={max}
        >
          <div
            className={cx(
              "h-full flex-col rounded-full",
              bar(),
              showAnimation &&
                "transform-gpu transition-all duration-300 ease-in-out",
            )}
            style={{
              width: max ? `${(safeValue / max) * 100}%` : `${safeValue}%`,
            }}
          />
        </div>
        {label ? (
          <span
            className={cx(
              // base
              "ml-2 whitespace-nowrap text-sm font-medium leading-none",
              // text color
              "text-gray-900 dark:text-gray-50",
            )}
          >
            {label}
          </span>
        ) : null}
      </div>
    )
  },
)

ProgressBar.displayName = "ProgressBar"

export { ProgressBar, progressBarVariants, type ProgressBarProps }

================
File: src/components/ProgressCircle.tsx
================
// Tremor Raw ProgressCircle [v0.0.1]

import React from "react"
import { tv, VariantProps } from "tailwind-variants"

import { cx } from "@/lib/utils"

const progressCircleVariants = tv({
  slots: {
    background: "",
    circle: "",
  },
  variants: {
    variant: {
      default: {
        background: "stroke-indigo-200 dark:stroke-indigo-500/30",
        circle: "stroke-indigo-600 dark:stroke-indigo-500",
      },
      neutral: {
        background: "stroke-gray-200 dark:stroke-gray-500/40",
        circle: "stroke-gray-500 dark:stroke-gray-500",
      },
      warning: {
        background: "stroke-yellow-200 dark:stroke-yellow-500/30",
        circle: "stroke-yellow-500 dark:stroke-yellow-500",
      },
      error: {
        background: "stroke-red-200 dark:stroke-red-500/30",
        circle: "stroke-red-500 dark:stroke-red-500",
      },
      success: {
        background: "stroke-emerald-200 dark:stroke-emerald-500/30",
        circle: "stroke-emerald-500 dark:stroke-emerald-500",
      },
    },
  },
  defaultVariants: {
    variant: "default",
  },
})

interface ProgressCircleProps
  extends Omit<React.SVGProps<SVGSVGElement>, "value">,
    VariantProps<typeof progressCircleVariants> {
  value?: number
  max?: number
  showAnimation?: boolean
  radius?: number
  strokeWidth?: number
  children?: React.ReactNode
}

const ProgressCircle = React.forwardRef<SVGSVGElement, ProgressCircleProps>(
  (
    {
      value = 0,
      max = 100,
      radius = 32,
      strokeWidth = 6,
      showAnimation = true,
      variant,
      className,
      children,
      ...props
    }: ProgressCircleProps,
    forwardedRef,
  ) => {
    const safeValue = Math.min(max, Math.max(value, 0))
    const normalizedRadius = radius - strokeWidth / 2
    const circumference = normalizedRadius * 2 * Math.PI
    const offset = circumference - (safeValue / max) * circumference

    const { background, circle } = progressCircleVariants({ variant })
    return (
      <>
        <div className={cx("relative")}>
          <svg
            ref={forwardedRef}
            width={radius * 2}
            height={radius * 2}
            viewBox={`0 0 ${radius * 2} ${radius * 2}`}
            className={cx("-rotate-90 transform", className)}
            role="progress circle"
            aria-label="progress bar"
            aria-valuenow={value}
            aria-valuemin={0}
            aria-valuemax={max}
            data-max={max}
            data-value={safeValue ?? null}
            {...props}
          >
            <circle
              r={normalizedRadius}
              cx={radius}
              cy={radius}
              strokeWidth={strokeWidth}
              fill="transparent"
              stroke=""
              strokeLinecap="round"
              className={cx("transition-colors ease-linear", background())}
            />
            {safeValue >= 0 ? (
              <circle
                r={normalizedRadius}
                cx={radius}
                cy={radius}
                strokeWidth={strokeWidth}
                strokeDasharray={`${circumference} ${circumference}`}
                strokeDashoffset={offset}
                fill="transparent"
                stroke=""
                strokeLinecap="round"
                className={cx(
                  "transition-colors ease-linear",
                  circle(),
                  showAnimation &&
                    "transform-gpu transition-all duration-300 ease-in-out",
                )}
              />
            ) : null}
          </svg>
          <div
            className={cx("absolute inset-0 flex items-center justify-center")}
          >
            {children}
          </div>
        </div>
      </>
    )
  },
)

ProgressCircle.displayName = "ProgressCircle"

export { ProgressCircle, type ProgressCircleProps }

================
File: src/components/RadioCard.tsx
================
// Tremor Raw Radio Card [v0.0.0]

import * as RadioGroupPrimitives from "@radix-ui/react-radio-group"
import * as React from "react"

import { cx, focusInput, focusRing } from "@/lib/utils"

const RadioCardGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitives.Root>
>(({ className, ...props }, forwardedRef) => {
  return (
    <RadioGroupPrimitives.Root
      ref={forwardedRef}
      className={cx("grid gap-2", className)}
      {...props}
    />
  )
})
RadioCardGroup.displayName = "RadioCardGroup"

const RadioCardGroupIndicator = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitives.Indicator>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitives.Indicator>
>(({ className, ...props }, forwardedRef) => {
  return (
    <div
      className={cx(
        // base
        "relative flex size-4 shrink-0 appearance-none items-center justify-center rounded-full border shadow-sm outline-none",
        // border color
        "border-gray-300 dark:border-gray-800",
        // background color
        "bg-white dark:bg-gray-950",
        // checked
        "group-data-[state=checked]:border-0 group-data-[state=checked]:border-transparent group-data-[state=checked]:bg-indigo-600",
        // disabled
        "group-data-[disabled]:border",
        "group-data-[disabled]:border-gray-300 group-data-[disabled]:bg-gray-100 group-data-[disabled]:text-gray-400",
        "group-data-[disabled]:dark:border-gray-700 group-data-[disabled]:dark:bg-gray-800",
        // focus
        focusRing,
        className,
      )}
    >
      <RadioGroupPrimitives.Indicator
        ref={forwardedRef}
        className="flex items-center justify-center"
        {...props}
      >
        <div
          className={cx(
            // base
            "size size-1.5 shrink-0 rounded-full",
            // indicator
            "bg-white",
            // disabled
            "group-data-[disabled]:bg-gray-400 group-data-[disabled]:dark:bg-gray-500",
          )}
        />
      </RadioGroupPrimitives.Indicator>
    </div>
  )
})
RadioCardGroupIndicator.displayName = "RadioCardGroupIndicator"

const RadioCardItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitives.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitives.Item>
>(({ className, children, ...props }, forwardedRef) => {
  return (
    <RadioGroupPrimitives.Item
      ref={forwardedRef}
      className={cx(
        // base
        "group relative w-full rounded-md border p-4 text-left shadow-sm transition-all focus:outline-none",
        // background color
        "bg-white dark:bg-gray-950",
        // border color
        "border-gray-200 dark:border-gray-800",
        "data-[state=checked]:border-indigo-600 data-[state=checked]:dark:border-indigo-600",
        focusInput,
        className,
      )}
      {...props}
    >
      {children}
    </RadioGroupPrimitives.Item>
  )
})
RadioCardItem.displayName = "RadioCardItem"

export { RadioCardGroup, RadioCardGroupIndicator, RadioCardItem }

================
File: src/components/Searchbar.tsx
================
// Tremor Raw Input [v1.0.0]

import { RiSearchLine } from "@remixicon/react"
import * as React from "react"
import { tv, type VariantProps } from "tailwind-variants"

import { cx, focusInput, hasErrorInput } from "@/lib/utils"

const inputStyles = tv({
  base: [
    // base
    "relative block w-full appearance-none rounded-md border px-2.5 py-1.5 outline-none transition sm:text-sm",
    // border color (border only used in dark mode for better aesthetics in filterbar)
    "border-transparent dark:border-gray-800",
    // text color
    "text-gray-900 dark:text-gray-50",
    // placeholder color
    "placeholder-gray-400 dark:placeholder-gray-500",
    // background color
    "bg-gray-100 dark:bg-gray-950",
    // disabled
    "disabled:border-gray-300 disabled:bg-gray-100 disabled:text-gray-400",
    "disabled:dark:border-gray-700 disabled:dark:bg-gray-800 disabled:dark:text-gray-500",
    // focus
    focusInput,
    // invalid (optional)
    // "aria-[invalid=true]:dark:ring-red-400/20 aria-[invalid=true]:ring-2 aria-[invalid=true]:ring-red-200 aria-[invalid=true]:border-red-500 invalid:ring-2 invalid:ring-red-200 invalid:border-red-500"
    // remove search cancel button (optional)
    "[&::--webkit-search-cancel-button]:hidden [&::-webkit-search-cancel-button]:hidden [&::-webkit-search-decoration]:hidden",
  ],
  variants: {
    hasError: {
      true: hasErrorInput,
    },
    // number input
    enableStepper: {
      true: "[appearance:textfield] [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-outer-spin-button]:appearance-none",
    },
  },
})

interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement>,
    VariantProps<typeof inputStyles> {
  inputClassName?: string
}

const Searchbar = React.forwardRef<HTMLInputElement, InputProps>(
  (
    {
      className,
      inputClassName,
      hasError,
      enableStepper,
      type = "search",
      ...props
    }: InputProps,
    forwardedRef,
  ) => {
    return (
      <div className={cx("relative w-full", className)}>
        <input
          ref={forwardedRef}
          type={type}
          className={cx(
            inputStyles({ hasError, enableStepper }),
            "pl-8",
            inputClassName,
          )}
          {...props}
        />
        <div
          className={cx(
            // base
            "pointer-events-none absolute bottom-0 left-2 flex h-full items-center justify-center",
            // text color
            "text-gray-400 dark:text-gray-600",
          )}
        >
          <RiSearchLine
            className="size-[1.125rem] shrink-0"
            aria-hidden="true"
          />
        </div>
      </div>
    )
  },
)

Searchbar.displayName = "Searchbar"

export { Searchbar }

================
File: src/components/Select.tsx
================
// Custom Select [v0.0.0]

import * as SelectPrimitives from "@radix-ui/react-select"
import { RiArrowDownSLine, RiArrowUpSLine, RiCheckLine } from "@remixicon/react"
import { format } from "date-fns"
import React from "react"

import { cx, focusInput, hasErrorInput } from "@/lib/utils"
import { DateRange } from "react-day-picker"

const Select = SelectPrimitives.Root
Select.displayName = "Select"

const SelectGroup = SelectPrimitives.Group
SelectGroup.displayName = "SelectGroup"

const SelectValue = SelectPrimitives.Value
SelectValue.displayName = "SelectValue"

const selectTriggerStyles = [
  cx(
    // base
    "group/trigger flex w-full select-none items-center justify-between gap-2 truncate rounded-md border px-3 py-2 shadow-sm outline-none transition sm:text-sm",
    // border color
    "border-gray-300 dark:border-gray-800",
    // text color
    "text-gray-900 dark:text-gray-50",
    // placeholder
    "data-[placeholder]:text-gray-500 data-[placeholder]:dark:text-gray-500",
    // background color
    "bg-white dark:bg-gray-950",
    // hover
    "hover:bg-gray-50 hover:dark:bg-gray-950/50",
    // disabled
    "data-[disabled]:bg-gray-100 data-[disabled]:text-gray-400",
    "data-[disabled]:dark:border-gray-700 data-[disabled]:dark:bg-gray-800 data-[disabled]:dark:text-gray-500",
    focusInput,
    // invalid (optional)
    // "aria-[invalid=true]:dark:ring-red-400/20 aria-[invalid=true]:ring-2 aria-[invalid=true]:ring-red-200 aria-[invalid=true]:border-red-500 invalid:ring-2 invalid:ring-red-200 invalid:border-red-500"
  ),
]

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitives.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitives.Trigger> & {
    hasError?: boolean
  }
>(({ className, hasError, children, ...props }, forwardedRef) => {
  return (
    <SelectPrimitives.Trigger
      ref={forwardedRef}
      className={cx(
        selectTriggerStyles,
        hasError ? hasErrorInput : "",
        className,
      )}
      {...props}
    >
      <span className="truncate">{children}</span>
      <SelectPrimitives.Icon asChild>
        <RiArrowDownSLine
          className={cx(
            // base
            "-mr-1 size-5 shrink-0",
            // text color
            "text-gray-400 dark:text-gray-600",
            // disabled
            "group-data-[disabled]/trigger:text-gray-300 group-data-[disabled]/trigger:dark:text-gray-600",
          )}
        />
      </SelectPrimitives.Icon>
    </SelectPrimitives.Trigger>
  )
})

SelectTrigger.displayName = "SelectTrigger"

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitives.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitives.ScrollUpButton>
>(({ className, ...props }, forwardedRef) => (
  <SelectPrimitives.ScrollUpButton
    ref={forwardedRef}
    className={cx(
      "flex cursor-default items-center justify-center py-1",
      className,
    )}
    {...props}
  >
    <RiArrowUpSLine className="size-3 shrink-0" aria-hidden="true" />
  </SelectPrimitives.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitives.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitives.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitives.ScrollDownButton>
>(({ className, ...props }, forwardedRef) => (
  <SelectPrimitives.ScrollDownButton
    ref={forwardedRef}
    className={cx(
      "flex cursor-default items-center justify-center py-1",
      className,
    )}
    {...props}
  >
    <RiArrowDownSLine className="size-3 shrink-0" aria-hidden="true" />
  </SelectPrimitives.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitives.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitives.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitives.Content>
>(
  (
    {
      className,
      position = "popper",
      children,
      sideOffset = 8,
      collisionPadding = 10,
      ...props
    },
    forwardedRef,
  ) => (
    <SelectPrimitives.Portal>
      <SelectPrimitives.Content
        ref={forwardedRef}
        className={cx(
          // base
          "relative z-50 overflow-hidden rounded-md border shadow-xl shadow-black/[2.5%]",
          // widths
          "min-w-[calc(var(--radix-select-trigger-width)-2px)] max-w-[95vw]",
          // heights
          "max-h-[--radix-select-content-available-height]",
          // background color
          "bg-white dark:bg-gray-950",
          // text color
          "text-gray-900 dark:text-gray-50",
          // border color
          "border-gray-200 dark:border-gray-800",
          // transition
          "will-change-[transform,opacity]",
          // "data-[state=open]:animate-slideDownAndFade",
          "data-[state=closed]:animate-hide",
          "data-[side=bottom]:animate-slideDownAndFade data-[side=left]:animate-slideLeftAndFade data-[side=right]:animate-slideRightAndFade data-[side=top]:animate-slideUpAndFade",
          className,
        )}
        sideOffset={sideOffset}
        position={position}
        collisionPadding={collisionPadding}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitives.Viewport
          className={cx(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[calc(var(--radix-select-trigger-width))]",
          )}
        >
          {children}
        </SelectPrimitives.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitives.Content>
    </SelectPrimitives.Portal>
  ),
)

SelectContent.displayName = "SelectContent"

const SelectGroupLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitives.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitives.Label>
>(({ className, ...props }, forwardedRef) => (
  <SelectPrimitives.Label
    ref={forwardedRef}
    className={cx(
      // base
      "px-3 py-2 text-xs font-medium tracking-wide",
      // text color
      "text-gray-500 dark:text-gray-500",
      className,
    )}
    {...props}
  />
))

SelectGroupLabel.displayName = "SelectGroupLabel"

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitives.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitives.Item>
>(({ className, children, ...props }, forwardedRef) => {
  return (
    <SelectPrimitives.Item
      ref={forwardedRef}
      className={cx(
        // base
        "grid cursor-pointer grid-cols-[1fr_20px] gap-x-2 rounded px-3 py-2 outline-none transition-colors data-[state=checked]:font-semibold sm:text-sm",
        // text color
        "text-gray-900 dark:text-gray-50",
        // disabled
        "data-[disabled]:pointer-events-none data-[disabled]:text-gray-400 data-[disabled]:hover:bg-none dark:data-[disabled]:text-gray-600",
        // focus
        "focus-visible:bg-gray-100 focus-visible:dark:bg-gray-900",
        // hover
        "hover:bg-gray-100 hover:dark:bg-gray-900",
        className,
      )}
      {...props}
    >
      <SelectPrimitives.ItemText className="flex-1 truncate">
        {children}
      </SelectPrimitives.ItemText>
      <SelectPrimitives.ItemIndicator>
        <RiCheckLine
          className="size-5 shrink-0 text-gray-800 dark:text-gray-200"
          aria-hidden="true"
        />
      </SelectPrimitives.ItemIndicator>
    </SelectPrimitives.Item>
  )
})

SelectItem.displayName = "SelectItem"

const SelectItemPeriod = React.forwardRef<
  React.ElementRef<typeof SelectPrimitives.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitives.Item> & {
    period?: DateRange | undefined
  }
>(({ className, children, period, ...props }, forwardedRef) => {
  return (
    <SelectPrimitives.Item
      ref={forwardedRef}
      className={cx(
        // base
        "relative flex cursor-pointer items-center rounded py-2 pl-8 pr-3 outline-none transition-colors data-[state=checked]:font-semibold sm:text-sm",
        // text color
        "text-gray-900 dark:text-gray-50",
        // disabled
        "data-[disabled]:pointer-events-none data-[disabled]:text-gray-400 data-[disabled]:hover:bg-none dark:data-[disabled]:text-gray-600",
        // focus
        "focus-visible:bg-gray-100 focus-visible:dark:bg-gray-900",
        // hover
        "hover:bg-gray-100 hover:dark:bg-gray-900",
        className,
      )}
      {...props}
    >
      <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
        <SelectPrimitives.ItemIndicator>
          <RiCheckLine
            className="size-5 shrink-0 text-gray-800 dark:text-gray-200"
            aria-hidden="true"
          />
        </SelectPrimitives.ItemIndicator>
      </span>
      <div className="flex w-full items-center">
        {/* adapt width accordingly if you use longer names for periods */}
        <span className="w-40 sm:w-32">
          <SelectPrimitives.ItemText>{children}</SelectPrimitives.ItemText>
        </span>
        <span>
          {period?.from && period?.to && (
            <span className="whitespace-nowrap font-normal text-gray-400">
              {format(period.from, "MMM d, yyyy")} –{" "}
              {format(period.to, "MMM d, yyyy")}
            </span>
          )}
        </span>
      </div>
    </SelectPrimitives.Item>
  )
})

SelectItemPeriod.displayName = "SelectItemPeriod"

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitives.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitives.Separator>
>(({ className, ...props }, forwardedRef) => (
  <SelectPrimitives.Separator
    ref={forwardedRef}
    className={cx(
      // base
      "-mx-1 my-1 h-px",
      // background color
      "bg-gray-300 dark:bg-gray-700",
      className,
    )}
    {...props}
  />
))

SelectSeparator.displayName = "SelectSeparator"

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectGroupLabel,
  SelectItem,
  SelectItemPeriod,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}

================
File: src/components/Switch.tsx
================
// Tremor Raw Switch [v0.0.0]

import * as SwitchPrimitives from "@radix-ui/react-switch"
import React from "react"
import { tv, VariantProps } from "tailwind-variants"

import { cx, focusRing } from "@/lib/utils"

const switchVariants = tv({
  slots: {
    root: [
      // base
      "group relative isolate inline-flex shrink-0 cursor-pointer items-center rounded-full p-0.5 shadow-inner outline-none ring-1 ring-inset transition-all",
      "bg-gray-200 dark:bg-gray-950",
      // ring color
      "ring-black/5 dark:ring-gray-800",
      // checked
      "data-[state=checked]:bg-indigo-600 data-[state=checked]:dark:bg-indigo-600",
      // disabled
      "data-[disabled]:cursor-default",
      // disabled checked
      "data-[disabled]:data-[state=checked]:bg-indigo-200",
      "data-[disabled]:data-[state=checked]:ring-gray-300",
      // disabled checked dark
      "data-[disabled]:data-[state=checked]:dark:ring-gray-900",
      "data-[disabled]:data-[state=checked]:dark:bg-indigo-900",
      // disabled unchecked
      "data-[disabled]:data-[state=unchecked]:ring-gray-300",
      "data-[disabled]:data-[state=unchecked]:bg-gray-100",
      // disabled unchecked dark
      "data-[disabled]:data-[state=unchecked]:dark:ring-gray-700",
      "data-[disabled]:data-[state=unchecked]:dark:bg-gray-800",
      focusRing,
    ],
    thumb: [
      // base
      "pointer-events-none relative inline-block transform appearance-none rounded-full border-none shadow-lg outline-none transition-all duration-150 ease-in-out focus:border-none focus:outline-none focus:outline-transparent",
      // background color
      "bg-white dark:bg-gray-50",
      // disabled
      "group-data-[disabled]:shadow-none",
      "group-data-[disabled]:bg-gray-50 group-data-[disabled]:dark:bg-gray-500",
    ],
  },
  variants: {
    size: {
      default: {
        root: "h-5 w-9",
        thumb:
          "h-4 w-4 data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0",
      },
      small: {
        root: "h-4 w-7",
        thumb:
          "h-3 w-3 data-[state=checked]:translate-x-3 data-[state=unchecked]:translate-x-0",
      },
    },
  },
  defaultVariants: {
    size: "default",
  },
})

interface SwitchProps
  extends Omit<
      React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>,
      "asChild"
    >,
    VariantProps<typeof switchVariants> {}

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  SwitchProps
>(({ className, size, ...props }: SwitchProps, forwardedRef) => {
  const { root, thumb } = switchVariants({ size })
  return (
    <SwitchPrimitives.Root
      ref={forwardedRef}
      className={cx(root(), className)}
      {...props}
    >
      <SwitchPrimitives.Thumb className={cx(thumb())} />
    </SwitchPrimitives.Root>
  )
})

Switch.displayName = "Switch"

export { Switch }

================
File: src/components/Table.tsx
================
// Tremor Raw Table [v0.0.2]

import React from "react"

import { cx } from "@/lib/utils"

const TableRoot = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, children, ...props }, forwardedRef) => (
  <div
    ref={forwardedRef}
    // Activate if table is used in a float environment
    // className="flow-root"
  >
    <div
      // make table scrollable on mobile
      className={cx("w-full overflow-auto whitespace-nowrap", className)}
      {...props}
    >
      {children}
    </div>
  </div>
))

TableRoot.displayName = "TableRoot"

const Table = React.forwardRef<
  HTMLTableElement,
  React.TableHTMLAttributes<HTMLTableElement>
>(({ className, ...props }, forwardedRef) => (
  <table
    ref={forwardedRef}
    className={cx(
      // base
      "w-full caption-bottom border-b",
      // border color
      "border-gray-200 dark:border-gray-800",
      className,
    )}
    {...props}
  />
))

Table.displayName = "Table"

const TableHead = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, forwardedRef) => (
  <thead ref={forwardedRef} className={cx(className)} {...props} />
))

TableHead.displayName = "TableHead"

const TableHeaderCell = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, forwardedRef) => (
  <th
    ref={forwardedRef}
    className={cx(
      // base
      "border-b px-4 py-3.5 text-left text-sm font-semibold",
      // text color
      "text-gray-900 dark:text-gray-50",
      // border color
      "border-gray-200 dark:border-gray-800",
      className,
    )}
    {...props}
  />
))

TableHeaderCell.displayName = "TableHeaderCell"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, forwardedRef) => (
  <tbody
    ref={forwardedRef}
    className={cx(
      // base
      "divide-y",
      // divide color
      "divide-gray-200 dark:divide-gray-800",
      className,
    )}
    {...props}
  />
))

TableBody.displayName = "TableBody"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, forwardedRef) => (
  <tr
    ref={forwardedRef}
    className={cx(
      "[&_td:last-child]:pr-4 [&_th:last-child]:pr-4",
      "[&_td:first-child]:pl-4 [&_th:first-child]:pl-4",
      className,
    )}
    {...props}
  />
))

TableRow.displayName = "TableRow"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, forwardedRef) => (
  <td
    ref={forwardedRef}
    className={cx(
      // base
      "p-4 text-sm",
      // text color
      "text-gray-600 dark:text-gray-400",
      className,
    )}
    {...props}
  />
))

TableCell.displayName = "TableCell"

const TableFoot = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, forwardedRef) => {
  return (
    <tfoot
      ref={forwardedRef}
      className={cx(
        // base
        "border-t text-left font-medium",
        // text color
        "text-gray-900 dark:text-gray-50",
        // border color
        "border-gray-200 dark:border-gray-800",
        className,
      )}
      {...props}
    />
  )
})

TableFoot.displayName = "TableFoot"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, forwardedRef) => (
  <caption
    ref={forwardedRef}
    className={cx(
      // base
      "mt-3 px-3 text-center text-sm",
      // text color
      "text-gray-500 dark:text-gray-500",
      className,
    )}
    {...props}
  />
))

TableCaption.displayName = "TableCaption"

export {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableFoot,
  TableHead,
  TableHeaderCell,
  TableRoot,
  TableRow,
}

================
File: src/components/TabNavigation.tsx
================
// Tremor Raw TabNavigation [v0.0.1]

import * as NavigationMenuPrimitives from "@radix-ui/react-navigation-menu"
import React from "react"

import { cx, focusRing } from "@/lib/utils"

function getSubtree(
  options: { asChild: boolean | undefined; children: React.ReactNode },
  content: React.ReactNode | ((children: React.ReactNode) => React.ReactNode),
) {
  const { asChild, children } = options
  if (!asChild)
    return typeof content === "function" ? content(children) : content

  const firstChild = React.Children.only(children) as React.ReactElement
  return React.cloneElement(firstChild, {
    children:
      typeof content === "function"
        ? content(firstChild.props.children)
        : content,
  })
}

const TabNavigation = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitives.Root>,
  Omit<
    React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitives.Root>,
    "orientation" | "defaultValue" | "dir"
  >
>(({ className, children, ...props }, forwardedRef) => (
  <NavigationMenuPrimitives.Root ref={forwardedRef} {...props} asChild={false}>
    <NavigationMenuPrimitives.List
      className={cx(
        // base
        "flex items-center justify-start whitespace-nowrap border-b [scrollbar-width:none] [&::-webkit-scrollbar]:hidden",
        // border color
        "border-gray-200 dark:border-gray-800",
        className,
      )}
    >
      {children}
    </NavigationMenuPrimitives.List>
  </NavigationMenuPrimitives.Root>
))

TabNavigation.displayName = "TabNavigation"

const TabNavigationLink = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitives.Link>,
  Omit<
    React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitives.Link>,
    "onSelect"
  > & { disabled?: boolean }
>(({ asChild, disabled, className, children, ...props }, forwardedRef) => (
  <NavigationMenuPrimitives.Item className="flex" aria-disabled={disabled}>
    <NavigationMenuPrimitives.Link
      aria-disabled={disabled}
      className={cx(
        "group relative flex shrink-0 select-none items-center justify-center",
        disabled ? "pointer-events-none" : "",
      )}
      ref={forwardedRef}
      onSelect={() => {}}
      asChild={asChild}
      {...props}
    >
      {getSubtree({ asChild, children }, (children) => (
        <span
          className={cx(
            // base
            "-mb-px flex items-center justify-center whitespace-nowrap border-b-2 border-transparent px-3 pb-2 text-sm font-medium transition-all",
            // text color
            "text-gray-500 dark:text-gray-500",
            // hover
            "group-hover:text-gray-700 group-hover:dark:text-gray-400",
            // border hover
            "group-hover:border-gray-300 group-hover:dark:border-gray-400",
            // selected
            "group-data-[active]:border-indigo-600 group-data-[active]:text-indigo-600",
            "group-data-[active]:dark:border-indigo-500 group-data-[active]:dark:text-indigo-500",
            // disabled
            disabled
              ? "pointer-events-none text-gray-300 dark:text-gray-700"
              : "",
            focusRing,
            className,
          )}
        >
          {children}
        </span>
      ))}
    </NavigationMenuPrimitives.Link>
  </NavigationMenuPrimitives.Item>
))

TabNavigationLink.displayName = "TabNavigationLink"

export { TabNavigation, TabNavigationLink }

================
File: src/components/Tooltip.tsx
================
// Tremor Raw Tooltip [v0.0.1]

"use client"

import * as TooltipPrimitives from "@radix-ui/react-tooltip"
import React from "react"

import { cx } from "@/lib/utils"

interface TooltipProps
  extends Omit<TooltipPrimitives.TooltipContentProps, "content" | "onClick">,
    Pick<
      TooltipPrimitives.TooltipProps,
      "open" | "defaultOpen" | "onOpenChange" | "delayDuration"
    > {
  content: React.ReactNode
  onClick?: React.MouseEventHandler<HTMLButtonElement>
  side?: "bottom" | "left" | "top" | "right"
  showArrow?: boolean
  triggerAsChild?: boolean
}

const Tooltip = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitives.Content>,
  TooltipProps
>(
  (
    {
      children,
      className,
      content,
      delayDuration,
      defaultOpen,
      open,
      onClick,
      onOpenChange,
      showArrow = true,
      side,
      sideOffset = 10,
      triggerAsChild = false,
      ...props
    }: TooltipProps,
    forwardedRef,
  ) => {
    return (
      <TooltipPrimitives.Provider delayDuration={150}>
        <TooltipPrimitives.Root
          open={open}
          defaultOpen={defaultOpen}
          onOpenChange={onOpenChange}
          delayDuration={delayDuration}
        >
          <TooltipPrimitives.Trigger onClick={onClick} asChild={triggerAsChild}>
            {children}
          </TooltipPrimitives.Trigger>
          <TooltipPrimitives.Portal>
            <TooltipPrimitives.Content
              ref={forwardedRef}
              side={side}
              sideOffset={sideOffset}
              align="center"
              className={cx(
                // base
                "max-w-60 select-none rounded-md px-2.5 py-1.5 text-sm leading-5 shadow-md",
                // text color
                "text-gray-50 dark:text-gray-900",
                // background color
                "bg-gray-900 dark:bg-gray-50",
                // transition
                "will-change-[transform,opacity]",
                "data-[side=bottom]:animate-slideDownAndFade data-[side=left]:animate-slideLeftAndFade data-[side=right]:animate-slideRightAndFade data-[side=top]:animate-slideUpAndFade data-[state=closed]:animate-hide",
                className,
              )}
              {...props}
            >
              {content}
              {showArrow ? (
                <TooltipPrimitives.Arrow
                  className="border-none fill-gray-900 dark:fill-gray-50"
                  width={12}
                  height={7}
                  aria-hidden="true"
                />
              ) : null}
            </TooltipPrimitives.Content>
          </TooltipPrimitives.Portal>
        </TooltipPrimitives.Root>
      </TooltipPrimitives.Provider>
    )
  },
)

Tooltip.displayName = "Tooltip"

export { Tooltip, type TooltipProps }

================
File: src/data/air-quality-data.ts
================
import { addHours, format, subDays } from "date-fns"
import { AirQualityData } from "./schema"

// Generate sample air quality data for the last 30 days
export const airQualityData: AirQualityData[] = Array.from({ length: 30 }).map((_, index) => {
    const date = subDays(new Date(), 30 - index)

    // Base values
    const baseCO2 = 450
    const baseTemp = 21
    const baseHumidity = 40
    const basePM2_5 = 8
    const basePM10 = 15
    const baseVOC = 120
    const basePressure = 1013

    // Add some random variation to simulate real data
    // Time of day variation (higher CO2 during day, lower at night)
    const hourOfDay = date.getHours()
    const isDaytime = hourOfDay >= 8 && hourOfDay <= 20
    const dayFactor = isDaytime ? 1.2 : 0.8

    // Weekly variation (higher on weekdays, lower on weekends)
    const dayOfWeek = date.getDay()
    const isWeekday = dayOfWeek >= 1 && dayOfWeek <= 5
    const weekdayFactor = isWeekday ? 1.1 : 0.9

    // Random variation
    const randomFactor = () => 0.8 + Math.random() * 0.4 // 0.8-1.2 variation

    return {
        date: format(date, "yyyy-MM-dd"),
        CO2: Math.round(baseCO2 * dayFactor * weekdayFactor * randomFactor()),
        Temperature: +(baseTemp * randomFactor()).toFixed(1),
        Humidity: Math.round(baseHumidity * randomFactor()),
        PM2_5: +(basePM2_5 * randomFactor()).toFixed(1),
        PM10: +(basePM10 * randomFactor()).toFixed(1),
        VOC: Math.round(baseVOC * randomFactor()),
        Pressure: Math.round(basePressure * randomFactor()),
    }
})

// Generate hourly data for the heatmap (24 hours x 7 days)
export const hourlyData = Array.from({ length: 7 }).map((_, dayIndex) => {
    const day = subDays(new Date(), 6 - dayIndex)

    return Array.from({ length: 24 }).map((_, hourIndex) => {
        const datetime = addHours(day, hourIndex)
        const hourFactor = hourIndex >= 8 && hourIndex <= 18 ? 1.3 : 0.8 // Higher during working hours
        const randomValue = Math.random() * 0.4 // Random variation

        let co2Value = 450 // Base CO2 value

        // Add peaks during specific times (e.g., lunch, dinner)
        if (hourIndex === 12 || hourIndex === 18) {
            co2Value += 200
        }

        // Apply factors
        co2Value = Math.round(co2Value * hourFactor * (0.8 + randomValue))

        return {
            day: format(day, "EEE"),
            hour: hourIndex,
            value: co2Value,
            datetime,
        }
    })
})

// Generate today's hourly data for real-time charts
export const todaysHourlyData = Array.from({ length: 24 }).map((_, hourIndex) => {
    const now = new Date()
    const hour = now.getHours()
    const isPast = hourIndex <= hour

    let datetime
    if (isPast) {
        datetime = addHours(now, hourIndex - hour)
    } else {
        // Future hours are from yesterday
        datetime = addHours(subDays(now, 1), 24 + hourIndex - hour)
    }

    // Working hours have higher values
    const isWorkHour = hourIndex >= 8 && hourIndex <= 18
    const hourFactor = isWorkHour ? 1.3 : 0.8

    // Lunch and dinner spikes
    const isMealTime = hourIndex === 12 || hourIndex === 18
    const mealFactor = isMealTime ? 1.4 : 1

    // Random variation
    const randomFactor = 0.9 + Math.random() * 0.2

    const baseValue = isPast ? (400 + hourIndex * 2) : null // Only show values for past hours

    return {
        hour: format(datetime, "HH:mm"),
        CO2: baseValue ? Math.round(baseValue * hourFactor * mealFactor * randomFactor) : null,
        Temperature: baseValue ? +(21 + (hourIndex / 10) * randomFactor).toFixed(1) : null,
        Humidity: baseValue ? Math.round(40 * randomFactor) : null,
    }
})

================
File: src/data/data.ts
================
import { Usage } from "./schema"

export const roles: { value: string; label: string }[] = [
  {
    value: "admin",
    label: "Admin",
  },
  {
    value: "member",
    label: "Member",
  },
  {
    value: "viewer",
    label: "Viewer",
  },
  {
    value: "contributor",
    label: "Contributor",
  },
]

export const statuses: { value: string; label: string; variant: string }[] = [
  {
    value: "live",
    label: "Live",
    variant: "success",
  },
  {
    value: "inactive",
    label: "Inactive",
    variant: "neutral",
  },
  {
    value: "archived",
    label: "Archived",
    variant: "warning",
  },
]

export const regions: { value: string; label: string }[] = [
  {
    value: "US-West 1",
    label: "US-West 1",
  },
  {
    value: "US-West 2",
    label: "US-West 2",
  },
  {
    value: "US-East 1",
    label: "US-East 1",
  },
  {
    value: "US-East 2",
    label: "US-East 2",
  },
  {
    value: "EU-West 1",
    label: "EU-West 1",
  },
  {
    value: "EU-North 1",
    label: "EU-North 1",
  },
  {
    value: "EU-Central 1",
    label: "EU-Central 1",
  },
]

export const conditions: { value: string; label: string }[] = [
  {
    value: "is-equal-to",
    label: "is equal to",
  },
  {
    value: "is-between",
    label: "is between",
  },
  {
    value: "is-greater-than",
    label: "is greater than",
  },
  {
    value: "is-less-than",
    label: "is less than",
  },
]

export const users: {
  name: string
  initials: string
  email: string
  role: string
}[] = [
  {
    name: "Emma Stone",
    initials: "ES",
    email: "a.stone@gmail.com",
    role: "viewer",
  },
  {
    name: "Alissia McCalister",
    initials: "AM",
    email: "a.stone@gmail.com",
    role: "viewer",
  },
  {
    name: "Emily Luisa Bernacle",
    initials: "EB",
    email: "e.luis.bernacle@gmail.com",
    role: "member",
  },
  {
    name: "Aaron Wave",
    initials: "AW",
    email: "a.flow@acme.com",
    role: "contributor",
  },
  {
    name: "Thomas Palstein",
    initials: "TP",
    email: "t.palstein@acme.com",
    role: "viewer",
  },
  {
    name: "Sarah Johnson",
    initials: "SJ",
    email: "s.johnson@gmail.com",
    role: "admin",
  },
  {
    name: "Megan Katherina Brown",
    initials: "MB",
    email: "m.lovelybrown@gmail.com",
    role: "contributor",
  },
]

export const invitedUsers: {
  initials: string
  email: string
  role: string
  expires: number
}[] = [
  {
    initials: "LP",
    email: "lydia.posh@gmail.com",
    role: "viewer",
    expires: 12,
  },
  {
    initials: "AW",
    email: "awidburg@bluewin.ch",
    role: "viewer",
    expires: 8,
  },
]

export const usage: Usage[] = [
  {
    owner: "John Doe",
    status: "live",
    costs: 5422.35,
    region: "US-West 1",
    stability: 99,
    lastEdited: "23/09/2023 13:00",
  },
  {
    owner: "Jane Smith",
    status: "live",
    costs: 6087.11,
    region: "US-East 2",
    stability: 91,
    lastEdited: "22/09/2023 10:45",
  },
  {
    owner: "Alejandro Garcia",
    status: "live",
    costs: 7234.56,
    region: "EU-West 1",
    stability: 12,
    lastEdited: "17/05/2021 08:32",
  },
  {
    owner: "Wei Zhang",
    status: "inactive",
    costs: 0,
    region: "US-West 2",
    stability: 0,
    lastEdited: "10/11/2022 15:24",
  },
  {
    owner: "Maria Rossi",
    status: "live",
    costs: 8190.77,
    region: "US-East 1",
    stability: 8,
    lastEdited: "05/06/2023 12:16",
  },
  {
    owner: "Nina Müller",
    status: "archived",
    costs: 7609.32,
    region: "EU-North 1",
    stability: 20,
    lastEdited: "23/01/2022 11:11",
  },
  {
    owner: "Liam O'Sullivan",
    status: "live",
    costs: 5204.98,
    region: "US-West 1",
    stability: 18,
    lastEdited: "14/03/2023 14:45",
  },
  {
    owner: "Amir Fleischlin",
    status: "inactive",
    costs: 0,
    region: "EU-Central 1",
    stability: 0,
    lastEdited: "12/02/2023 09:12",
  },
  {
    owner: "Yuki Tanaka",
    status: "live",
    costs: 9874.56,
    region: "US-East 1",
    stability: 6,
    lastEdited: "19/08/2022 16:03",
  },
  {
    owner: "Fatima Al-Farsi",
    status: "live",
    costs: 5486.99,
    region: "EU-West 1",
    stability: 12,
    lastEdited: "29/11/2021 17:25",
  },
  {
    owner: "Olga Ivanova",
    status: "live",
    costs: 6120.45,
    region: "US-West 2",
    stability: 9,
    lastEdited: "07/12/2023 07:14",
  },
  {
    owner: "Pierre Dubois",
    status: "live",
    costs: 4834.11,
    region: "EU-Central 1",
    stability: 15,
    lastEdited: "28/04/2023 10:45",
  },
  {
    owner: "Sara Johansson",
    status: "live",
    costs: 5302.22,
    region: "US-East 2",
    stability: 97,
    lastEdited: "03/10/2022 08:33",
  },
  {
    owner: "Ahmed Hassan",
    status: "live",
    costs: 6221.54,
    region: "US-West 1",
    stability: 11,
    lastEdited: "22/07/2022 14:16",
  },
  {
    owner: "Emily Brown",
    status: "archived",
    costs: 6129.99,
    region: "EU-North 1",
    stability: 22,
    lastEdited: "18/01/2022 12:45",
  },
  {
    owner: "Carlos Sanchez",
    status: "live",
    costs: 4850.33,
    region: "US-East 1",
    stability: 13,
    lastEdited: "05/06/2021 18:33",
  },
  {
    owner: "Hannah Kim",
    status: "live",
    costs: 7902.11,
    region: "EU-West 1",
    stability: 91,
    lastEdited: "11/05/2023 11:00",
  },
  {
    owner: "David Johnson",
    status: "live",
    costs: 6789.77,
    region: "US-West 2",
    stability: 10,
    lastEdited: "19/09/2023 17:17",
  },
  {
    owner: "Linda Anderson",
    status: "live",
    costs: 7434.22,
    region: "US-East 2",
    stability: 9,
    lastEdited: "27/03/2023 14:28",
  },
  {
    owner: "Michael Lee",
    status: "archived",
    costs: 7290.01,
    region: "EU-Central 1",
    stability: 12,
    lastEdited: "23/11/2022 15:13",
  },
  {
    owner: "Sophia Lopez",
    status: "live",
    costs: 8921.34,
    region: "EU-North 1",
    stability: 16,
    lastEdited: "08/05/2023 08:56",
  },
  {
    owner: "Robert White",
    status: "live",
    costs: 6834.23,
    region: "US-West 1",
    stability: 8,
    lastEdited: "29/04/2022 19:27",
  },
  {
    owner: "Mia Wang",
    status: "inactive",
    costs: 0,
    region: "US-West 2",
    stability: 14,
    lastEdited: "30/12/2023 13:01",
  },
  {
    owner: "James Taylor",
    status: "live",
    costs: 4321.56,
    region: "EU-West 1",
    stability: 5,
    lastEdited: "18/06/2021 10:49",
  },
  {
    owner: "Victoria Martinez",
    status: "archived",
    costs: 5120.33,
    region: "US-East 1",
    stability: 19,
    lastEdited: "24/02/2022 14:02",
  },
  {
    owner: "William Harris",
    status: "live",
    costs: 9211.42,
    region: "EU-North 1",
    stability: 11,
    lastEdited: "22/07/2021 12:33",
  },
  {
    owner: "Isabella Clark",
    status: "inactive",
    costs: 0,
    region: "US-East 2",
    stability: 6,
    lastEdited: "13/09/2022 16:22",
  },
  {
    owner: "Alexander Young",
    status: "live",
    costs: 4534.88,
    region: "US-West 1",
    stability: 17,
    lastEdited: "09/10/2023 17:44",
  },
  {
    owner: "Grace Patel",
    status: "live",
    costs: 8245.99,
    region: "EU-Central 1",
    stability: 9,
    lastEdited: "29/07/2022 11:56",
  },
  {
    owner: "Daniel Wilson",
    status: "archived",
    costs: 7890.77,
    region: "EU-West 1",
    stability: 14,
    lastEdited: "10/11/2021 15:08",
  },
  {
    owner: "Charlotte Thompson",
    status: "live",
    costs: 8911.44,
    region: "US-East 1",
    stability: 10,
    lastEdited: "06/08/2021 09:17",
  },
  {
    owner: "Olivia Anderson",
    status: "inactive",
    costs: 0,
    region: "EU-West 1",
    stability: 12,
    lastEdited: "25/05/2022 10:05",
  },
  {
    owner: "Henry Brown",
    status: "live",
    costs: 5500.12,
    region: "US-West 2",
    stability: 15,
    lastEdited: "07/01/2023 08:33",
  },
  {
    owner: "Ethan Davis",
    status: "live",
    costs: 7200.98,
    region: "EU-Central 1",
    stability: 8,
    lastEdited: "21/09/2023 13:00",
  },
  {
    owner: "Amelia Wilson",
    status: "live",
    costs: 8321.56,
    region: "US-East 2",
    stability: 18,
    lastEdited: "12/06/2021 11:45",
  },
  {
    owner: "Lucas Martin",
    status: "live",
    costs: 4534.99,
    region: "US-West 1",
    stability: 11,
    lastEdited: "30/03/2022 14:14",
  },
  {
    owner: "Mason Clark",
    status: "live",
    costs: 6890.11,
    region: "EU-North 1",
    stability: 7,
    lastEdited: "14/05/2023 12:36",
  },
  {
    owner: "Emma Robinson",
    status: "live",
    costs: 7990.01,
    region: "US-East 1",
    stability: 13,
    lastEdited: "18/10/2022 09:25",
  },
  {
    owner: "Benjamin Lewis",
    status: "archived",
    costs: 5412.23,
    region: "EU-Central 1",
    stability: 20,
    lastEdited: "22/02/2022 15:55",
  },
  {
    owner: "Ava Walker",
    status: "live",
    costs: 7123.98,
    region: "US-West 2",
    stability: 9,
    lastEdited: "27/08/2023 18:33",
  },
  {
    owner: "Elijah Young",
    status: "live",
    costs: 6445.33,
    region: "EU-West 1",
    stability: 8,
    lastEdited: "02/07/2021 17:14",
  },
  {
    owner: "Sophia Hall",
    status: "inactive",
    costs: 0,
    region: "US-East 1",
    stability: 10,
    lastEdited: "15/04/2023 10:45",
  },
  {
    owner: "Matthew Harris",
    status: "live",
    costs: 7634.67,
    region: "EU-North 1",
    stability: 11,
    lastEdited: "06/09/2023 11:23",
  },
  {
    owner: "Aiden Thompson",
    status: "archived",
    costs: 4900.88,
    region: "US-West 1",
    stability: 14,
    lastEdited: "20/10/2021 16:05",
  },
  {
    owner: "Chloe Martinez",
    status: "live",
    costs: 5234.44,
    region: "US-East 2",
    stability: 17,
    lastEdited: "11/11/2023 08:55",
  },
  {
    owner: "Oliver Davis",
    status: "inactive",
    costs: 0,
    region: "EU-West 1",
    stability: 12,
    lastEdited: "18/08/2022 14:34",
  },
  {
    owner: "Emily Clark",
    status: "live",
    costs: 7688.55,
    region: "EU-Central 1",
    stability: 9,
    lastEdited: "22/04/2023 12:11",
  },
  {
    owner: "Jack Lewis",
    status: "archived",
    costs: 6344.89,
    region: "US-West 2",
    stability: 19,
    lastEdited: "10/02/2021 11:45",
  },
  {
    owner: "Lily Walker",
    status: "live",
    costs: 5003.78,
    region: "EU-West 1",
    stability: 8,
    lastEdited: "23/07/2022 14:33",
  },
  {
    owner: "Jackson Martinez",
    status: "inactive",
    costs: 0,
    region: "US-East 1",
    stability: 7,
    lastEdited: "07/05/2023 09:27",
  },
  {
    owner: "Avery Hall",
    status: "live",
    costs: 8432.45,
    region: "EU-Central 1",
    stability: 11,
    lastEdited: "16/03/2022 15:44",
  },
  {
    owner: "Logan Harris",
    status: "archived",
    costs: 7120.39,
    region: "EU-North 1",
    stability: 21,
    lastEdited: "01/01/2022 16:18",
  },
]

================
File: src/data/generateData.js
================
const fs = require("fs")
const path = require("path")

function generateRandomData(
  previousValue,
  min,
  max,
  variance,
  isWeekend,
  weekendReduction,
  momentum,
) {
  let drift = (Math.random() - 0.5) * 2 * variance
  drift += momentum // Apply momentum

  let randomValue = previousValue * (1 + drift)

  // Ensure the value stays within the specified min and max bounds with stronger correction
  if (randomValue < min) {
    randomValue = min + (min - randomValue) * 0.2 // Apply stronger correction if below min
  } else if (randomValue > max) {
    randomValue = max - (randomValue - max) * 0.2 // Apply stronger correction if above max
  }

  if (isWeekend && weekendReduction) {
    const reductionFactor = 1 - (Math.random() * 0.15 + 0.1) // Reduce by 10-25%
    randomValue *= reductionFactor
  }

  // Calculate new momentum based on the current drift
  momentum = drift * 0.5 // Adjust momentum scaling factor as needed

  return {
    value: Math.round(randomValue),
    momentum,
  }
}

function generateData(startDate, endDate, categories) {
  const overviews = []
  let currentDate = new Date(startDate)
  const endDateObj = new Date(endDate)

  // Initialize previous values with average values for each category
  const previousValues = {}
  const momenta = {} // Track momentum for each category
  categories.forEach((category) => {
    previousValues[category.name] = (category.min + category.max) / 2 // Initialize with mid-point value
    momenta[category.name] = 0 // Initialize momentum
  })

  while (currentDate <= endDateObj) {
    const isWeekend = currentDate.getDay() === 0 || currentDate.getDay() === 6 // 0 = Sunday, 6 = Saturday
    const dataEntry = {
      date: currentDate.toISOString().split("T")[0] + "T00:00:00",
    }

    categories.forEach((category) => {
      const result = generateRandomData(
        previousValues[category.name],
        category.min,
        category.max,
        category.variance,
        isWeekend,
        category.weekendReduction,
        momenta[category.name],
      )
      dataEntry[category.name] = result.value
      previousValues[category.name] = result.value
      momenta[category.name] = result.momentum
    })

    overviews.push(dataEntry)
    currentDate.setDate(currentDate.getDate() + 1)
  }

  return overviews
}

const categories = [
  {
    name: "Rows written",
    min: 2500,
    max: 3700,
    variance: 0.01,
    weekendReduction: false,
  },
  {
    name: "Rows read",
    min: 18000,
    max: 28000,
    variance: 0.03,
    weekendReduction: false,
  },
  {
    name: "Queries",
    min: 478,
    max: 612,
    variance: 0.01,
    weekendReduction: true,
  },
  {
    name: "Payments completed",
    min: 80,
    max: 125,
    variance: 0.5,
    weekendReduction: true,
  },
  {
    name: "Sign ups",
    min: 60,
    max: 80,
    variance: 0.5,
    weekendReduction: true,
  },
  {
    name: "Logins",
    min: 844,
    max: 2048,
    variance: 0.2,
    weekendReduction: false,
  },
  {
    name: "Sign outs",
    min: 900,
    max: 1200,
    variance: 0.1,
    weekendReduction: false,
  },
  {
    name: "Support calls",
    min: 2,
    max: 19,
    variance: 0.5,
    weekendReduction: true,
  },
]

const startDate = "2023-01-01"
const endDate = "2024-05-17"

const overviews = generateData(startDate, endDate, categories)

const dataString = `import { OverviewData } from "./schema";

export const overviews: OverviewData[] = ${JSON.stringify(overviews, null, 2)};
`

const outputPath = path.join(__dirname, "overview-data.ts")

fs.writeFile(outputPath, dataString, (err) => {
  if (err) throw err
  console.log(`Data has been written to ${outputPath}`)
})

================
File: src/data/overview-data.ts
================
import { OverviewData } from "./schema"

export const overviews: OverviewData[] = [
  {
    date: "2023-01-01T00:00:00",
    "Rows written": 3093,
    "Rows read": 22633,
    Queries: 448,
    "Payments completed": 71,
    "Sign ups": 60,
    Logins: 1664,
    "Sign outs": 1133,
    "Support calls": 5,
  },
  {
    date: "2023-01-02T00:00:00",
    "Rows written": 3061,
    "Rows read": 22587,
    Queries: 484,
    "Payments completed": 88,
    "Sign ups": 79,
    Logins: 1642,
    "Sign outs": 1104,
    "Support calls": 5,
  },
  {
    date: "2023-01-03T00:00:00",
    "Rows written": 3062,
    "Rows read": 22079,
    Queries: 487,
    "Payments completed": 100,
    "Sign ups": 75,
    Logins: 1525,
    "Sign outs": 1083,
    "Support calls": 6,
  },
  {
    date: "2023-01-04T00:00:00",
    "Rows written": 3076,
    "Rows read": 21412,
    Queries: 487,
    "Payments completed": 122,
    "Sign ups": 61,
    Logins: 1211,
    "Sign outs": 1017,
    "Support calls": 7,
  },
  {
    date: "2023-01-05T00:00:00",
    "Rows written": 3066,
    "Rows read": 20679,
    Queries: 484,
    "Payments completed": 107,
    "Sign ups": 64,
    Logins: 991,
    "Sign outs": 1070,
    "Support calls": 5,
  },
  {
    date: "2023-01-06T00:00:00",
    "Rows written": 3043,
    "Rows read": 20048,
    Queries: 479,
    "Payments completed": 124,
    "Sign ups": 64,
    Logins: 855,
    "Sign outs": 1115,
    "Support calls": 3,
  },
  {
    date: "2023-01-07T00:00:00",
    "Rows written": 3026,
    "Rows read": 19335,
    Queries: 369,
    "Payments completed": 105,
    "Sign ups": 55,
    Logins: 875,
    "Sign outs": 1184,
    "Support calls": 3,
  },
  {
    date: "2023-01-08T00:00:00",
    "Rows written": 3031,
    "Rows read": 19548,
    Queries: 420,
    "Payments completed": 68,
    "Sign ups": 47,
    Logins: 867,
    "Sign outs": 1191,
    "Support calls": 3,
  },
  {
    date: "2023-01-09T00:00:00",
    "Rows written": 3030,
    "Rows read": 19431,
    Queries: 489,
    "Payments completed": 87,
    "Sign ups": 66,
    Logins: 853,
    "Sign outs": 1156,
    "Support calls": 3,
  },
  {
    date: "2023-01-10T00:00:00",
    "Rows written": 3024,
    "Rows read": 18802,
    Queries: 493,
    "Payments completed": 90,
    "Sign ups": 76,
    Logins: 976,
    "Sign outs": 1169,
    "Support calls": 2,
  },
  {
    date: "2023-01-11T00:00:00",
    "Rows written": 3028,
    "Rows read": 18816,
    Queries: 499,
    "Payments completed": 89,
    "Sign ups": 72,
    Logins: 1191,
    "Sign outs": 1170,
    "Support calls": 2,
  },
  {
    date: "2023-01-12T00:00:00",
    "Rows written": 3049,
    "Rows read": 19225,
    Queries: 500,
    "Payments completed": 91,
    "Sign ups": 76,
    Logins: 1235,
    "Sign outs": 1129,
    "Support calls": 3,
  },
  {
    date: "2023-01-13T00:00:00",
    "Rows written": 3066,
    "Rows read": 19467,
    Queries: 505,
    "Payments completed": 123,
    "Sign ups": 64,
    Logins: 1060,
    "Sign outs": 1196,
    "Support calls": 5,
  },
  {
    date: "2023-01-14T00:00:00",
    "Rows written": 3049,
    "Rows read": 19950,
    Queries: 418,
    "Payments completed": 87,
    "Sign ups": 61,
    Logins: 915,
    "Sign outs": 1174,
    "Support calls": 6,
  },
  {
    date: "2023-01-15T00:00:00",
    "Rows written": 3018,
    "Rows read": 19814,
    Queries: 422,
    "Payments completed": 103,
    "Sign ups": 46,
    Logins: 1026,
    "Sign outs": 1155,
    "Support calls": 6,
  },
  {
    date: "2023-01-16T00:00:00",
    "Rows written": 2976,
    "Rows read": 19962,
    Queries: 490,
    "Payments completed": 118,
    "Sign ups": 62,
    Logins: 1199,
    "Sign outs": 1060,
    "Support calls": 7,
  },
  {
    date: "2023-01-17T00:00:00",
    "Rows written": 2939,
    "Rows read": 19931,
    Queries: 484,
    "Payments completed": 96,
    "Sign ups": 61,
    Logins: 1344,
    "Sign outs": 1076,
    "Support calls": 7,
  },
  {
    date: "2023-01-18T00:00:00",
    "Rows written": 2931,
    "Rows read": 19650,
    Queries: 480,
    "Payments completed": 124,
    "Sign ups": 64,
    Logins: 1203,
    "Sign outs": 1100,
    "Support calls": 7,
  },
  {
    date: "2023-01-19T00:00:00",
    "Rows written": 2935,
    "Rows read": 19592,
    Queries: 479,
    "Payments completed": 112,
    "Sign ups": 67,
    Logins: 1351,
    "Sign outs": 1046,
    "Support calls": 5,
  },
  {
    date: "2023-01-20T00:00:00",
    "Rows written": 2962,
    "Rows read": 19214,
    Queries: 478,
    "Payments completed": 121,
    "Sign ups": 80,
    Logins: 1379,
    "Sign outs": 945,
    "Support calls": 3,
  },
  {
    date: "2023-01-21T00:00:00",
    "Rows written": 2965,
    "Rows read": 19460,
    Queries: 385,
    "Payments completed": 88,
    "Sign ups": 60,
    Logins: 1460,
    "Sign outs": 912,
    "Support calls": 2,
  },
  {
    date: "2023-01-22T00:00:00",
    "Rows written": 2969,
    "Rows read": 19151,
    Queries: 373,
    "Payments completed": 77,
    "Sign ups": 70,
    Logins: 1704,
    "Sign outs": 904,
    "Support calls": 2,
  },
  {
    date: "2023-01-23T00:00:00",
    "Rows written": 2945,
    "Rows read": 19301,
    Queries: 499,
    "Payments completed": 85,
    "Sign ups": 62,
    Logins: 1951,
    "Sign outs": 916,
    "Support calls": 2,
  },
  {
    date: "2023-01-24T00:00:00",
    "Rows written": 2933,
    "Rows read": 19614,
    Queries: 501,
    "Payments completed": 80,
    "Sign ups": 61,
    Logins: 1768,
    "Sign outs": 914,
    "Support calls": 2,
  },
  {
    date: "2023-01-25T00:00:00",
    "Rows written": 2910,
    "Rows read": 19470,
    Queries: 497,
    "Payments completed": 100,
    "Sign ups": 66,
    Logins: 1811,
    "Sign outs": 924,
    "Support calls": 2,
  },
  {
    date: "2023-01-26T00:00:00",
    "Rows written": 2904,
    "Rows read": 19632,
    Queries: 492,
    "Payments completed": 82,
    "Sign ups": 68,
    Logins: 2048,
    "Sign outs": 914,
    "Support calls": 2,
  },
  {
    date: "2023-01-27T00:00:00",
    "Rows written": 2905,
    "Rows read": 19706,
    Queries: 488,
    "Payments completed": 87,
    "Sign ups": 60,
    Logins: 1853,
    "Sign outs": 958,
    "Support calls": 2,
  },
  {
    date: "2023-01-28T00:00:00",
    "Rows written": 2881,
    "Rows read": 20284,
    Queries: 422,
    "Payments completed": 77,
    "Sign ups": 63,
    Logins: 1693,
    "Sign outs": 1000,
    "Support calls": 2,
  },
  {
    date: "2023-01-29T00:00:00",
    "Rows written": 2851,
    "Rows read": 20142,
    Queries: 418,
    "Payments completed": 74,
    "Sign ups": 54,
    Logins: 1637,
    "Sign outs": 1048,
    "Support calls": 2,
  },
  {
    date: "2023-01-30T00:00:00",
    "Rows written": 2859,
    "Rows read": 19518,
    Queries: 490,
    "Payments completed": 89,
    "Sign ups": 79,
    Logins: 1847,
    "Sign outs": 1077,
    "Support calls": 3,
  },
  {
    date: "2023-01-31T00:00:00",
    "Rows written": 2855,
    "Rows read": 19639,
    Queries: 491,
    "Payments completed": 94,
    "Sign ups": 67,
    Logins: 1972,
    "Sign outs": 1036,
    "Support calls": 4,
  },
  {
    date: "2023-02-01T00:00:00",
    "Rows written": 2839,
    "Rows read": 19806,
    Queries: 494,
    "Payments completed": 82,
    "Sign ups": 60,
    Logins: 1818,
    "Sign outs": 938,
    "Support calls": 3,
  },
  {
    date: "2023-02-02T00:00:00",
    "Rows written": 2840,
    "Rows read": 19498,
    Queries: 494,
    "Payments completed": 86,
    "Sign ups": 60,
    Logins: 1437,
    "Sign outs": 937,
    "Support calls": 3,
  },
  {
    date: "2023-02-03T00:00:00",
    "Rows written": 2861,
    "Rows read": 18849,
    Queries: 489,
    "Payments completed": 81,
    "Sign ups": 65,
    Logins: 1420,
    "Sign outs": 1025,
    "Support calls": 4,
  },
  {
    date: "2023-02-04T00:00:00",
    "Rows written": 2892,
    "Rows read": 19077,
    Queries: 379,
    "Payments completed": 66,
    "Sign ups": 56,
    Logins: 1622,
    "Sign outs": 1124,
    "Support calls": 3,
  },
  {
    date: "2023-02-05T00:00:00",
    "Rows written": 2892,
    "Rows read": 19313,
    Queries: 398,
    "Payments completed": 69,
    "Sign ups": 52,
    Logins: 1847,
    "Sign outs": 1150,
    "Support calls": 3,
  },
  {
    date: "2023-02-06T00:00:00",
    "Rows written": 2870,
    "Rows read": 18922,
    Queries: 494,
    "Payments completed": 89,
    "Sign ups": 61,
    Logins: 2020,
    "Sign outs": 1199,
    "Support calls": 4,
  },
  {
    date: "2023-02-07T00:00:00",
    "Rows written": 2849,
    "Rows read": 18994,
    Queries: 491,
    "Payments completed": 80,
    "Sign ups": 65,
    Logins: 2035,
    "Sign outs": 1198,
    "Support calls": 5,
  },
  {
    date: "2023-02-08T00:00:00",
    "Rows written": 2826,
    "Rows read": 18675,
    Queries: 493,
    "Payments completed": 85,
    "Sign ups": 61,
    Logins: 2044,
    "Sign outs": 1180,
    "Support calls": 5,
  },
  {
    date: "2023-02-09T00:00:00",
    "Rows written": 2810,
    "Rows read": 18103,
    Queries: 493,
    "Payments completed": 90,
    "Sign ups": 61,
    Logins: 1899,
    "Sign outs": 1198,
    "Support calls": 4,
  },
  {
    date: "2023-02-10T00:00:00",
    "Rows written": 2779,
    "Rows read": 18138,
    Queries: 498,
    "Payments completed": 87,
    "Sign ups": 62,
    Logins: 1478,
    "Sign outs": 1196,
    "Support calls": 4,
  },
  {
    date: "2023-02-11T00:00:00",
    "Rows written": 2739,
    "Rows read": 18141,
    Queries: 414,
    "Payments completed": 71,
    "Sign ups": 63,
    Logins: 1158,
    "Sign outs": 1194,
    "Support calls": 5,
  },
  {
    date: "2023-02-12T00:00:00",
    "Rows written": 2717,
    "Rows read": 18061,
    Queries: 431,
    "Payments completed": 68,
    "Sign ups": 60,
    Logins: 850,
    "Sign outs": 1197,
    "Support calls": 4,
  },
  {
    date: "2023-02-13T00:00:00",
    "Rows written": 2698,
    "Rows read": 18111,
    Queries: 487,
    "Payments completed": 81,
    "Sign ups": 70,
    Logins: 871,
    "Sign outs": 1109,
    "Support calls": 5,
  },
  {
    date: "2023-02-14T00:00:00",
    "Rows written": 2685,
    "Rows read": 18265,
    Queries: 485,
    "Payments completed": 106,
    "Sign ups": 63,
    Logins: 849,
    "Sign outs": 958,
    "Support calls": 6,
  },
  {
    date: "2023-02-15T00:00:00",
    "Rows written": 2676,
    "Rows read": 18603,
    Queries: 488,
    "Payments completed": 86,
    "Sign ups": 79,
    Logins: 874,
    "Sign outs": 910,
    "Support calls": 7,
  },
  {
    date: "2023-02-16T00:00:00",
    "Rows written": 2681,
    "Rows read": 18967,
    Queries: 488,
    "Payments completed": 81,
    "Sign ups": 76,
    Logins: 862,
    "Sign outs": 928,
    "Support calls": 10,
  },
  {
    date: "2023-02-17T00:00:00",
    "Rows written": 2699,
    "Rows read": 19166,
    Queries: 484,
    "Payments completed": 85,
    "Sign ups": 62,
    Logins: 864,
    "Sign outs": 904,
    "Support calls": 13,
  },
  {
    date: "2023-02-18T00:00:00",
    "Rows written": 2710,
    "Rows read": 18711,
    Queries: 430,
    "Payments completed": 66,
    "Sign ups": 52,
    Logins: 918,
    "Sign outs": 952,
    "Support calls": 16,
  },
  {
    date: "2023-02-19T00:00:00",
    "Rows written": 2694,
    "Rows read": 18862,
    Queries: 398,
    "Payments completed": 69,
    "Sign ups": 60,
    Logins: 968,
    "Sign outs": 911,
    "Support calls": 15,
  },
  {
    date: "2023-02-20T00:00:00",
    "Rows written": 2679,
    "Rows read": 18473,
    Queries: 494,
    "Payments completed": 80,
    "Sign ups": 73,
    Logins: 1142,
    "Sign outs": 906,
    "Support calls": 16,
  },
  {
    date: "2023-02-21T00:00:00",
    "Rows written": 2684,
    "Rows read": 18663,
    Queries: 497,
    "Payments completed": 93,
    "Sign ups": 61,
    Logins: 1360,
    "Sign outs": 911,
    "Support calls": 16,
  },
  {
    date: "2023-02-22T00:00:00",
    "Rows written": 2678,
    "Rows read": 18562,
    Queries: 498,
    "Payments completed": 83,
    "Sign ups": 72,
    Logins: 1691,
    "Sign outs": 901,
    "Support calls": 18,
  },
  {
    date: "2023-02-23T00:00:00",
    "Rows written": 2669,
    "Rows read": 18132,
    Queries: 499,
    "Payments completed": 105,
    "Sign ups": 62,
    Logins: 1862,
    "Sign outs": 916,
    "Support calls": 10,
  },
  {
    date: "2023-02-24T00:00:00",
    "Rows written": 2674,
    "Rows read": 18392,
    Queries: 499,
    "Payments completed": 117,
    "Sign ups": 66,
    Logins: 2003,
    "Sign outs": 906,
    "Support calls": 8,
  },
  {
    date: "2023-02-25T00:00:00",
    "Rows written": 2667,
    "Rows read": 19037,
    Queries: 386,
    "Payments completed": 94,
    "Sign ups": 67,
    Logins: 2006,
    "Sign outs": 914,
    "Support calls": 7,
  },
  {
    date: "2023-02-26T00:00:00",
    "Rows written": 2689,
    "Rows read": 19828,
    Queries: 385,
    "Payments completed": 105,
    "Sign ups": 62,
    Logins: 2007,
    "Sign outs": 956,
    "Support calls": 4,
  },
  {
    date: "2023-02-27T00:00:00",
    "Rows written": 2680,
    "Rows read": 20667,
    Queries: 497,
    "Payments completed": 115,
    "Sign ups": 62,
    Logins: 1742,
    "Sign outs": 903,
    "Support calls": 4,
  },
  {
    date: "2023-02-28T00:00:00",
    "Rows written": 2686,
    "Rows read": 20929,
    Queries: 494,
    "Payments completed": 84,
    "Sign ups": 66,
    Logins: 1910,
    "Sign outs": 920,
    "Support calls": 3,
  },
  {
    date: "2023-03-01T00:00:00",
    "Rows written": 2694,
    "Rows read": 20639,
    Queries: 495,
    "Payments completed": 85,
    "Sign ups": 63,
    Logins: 1766,
    "Sign outs": 916,
    "Support calls": 3,
  },
  {
    date: "2023-03-02T00:00:00",
    "Rows written": 2687,
    "Rows read": 19941,
    Queries: 495,
    "Payments completed": 82,
    "Sign ups": 65,
    Logins: 1674,
    "Sign outs": 924,
    "Support calls": 2,
  },
  {
    date: "2023-03-03T00:00:00",
    "Rows written": 2708,
    "Rows read": 19420,
    Queries: 491,
    "Payments completed": 102,
    "Sign ups": 66,
    Logins: 1785,
    "Sign outs": 912,
    "Support calls": 2,
  },
  {
    date: "2023-03-04T00:00:00",
    "Rows written": 2741,
    "Rows read": 18773,
    Queries: 415,
    "Payments completed": 78,
    "Sign ups": 52,
    Logins: 1732,
    "Sign outs": 903,
    "Support calls": 2,
  },
  {
    date: "2023-03-05T00:00:00",
    "Rows written": 2783,
    "Rows read": 18993,
    Queries: 402,
    "Payments completed": 64,
    "Sign ups": 47,
    Logins: 1813,
    "Sign outs": 912,
    "Support calls": 2,
  },
  {
    date: "2023-03-06T00:00:00",
    "Rows written": 2819,
    "Rows read": 18895,
    Queries: 493,
    "Payments completed": 80,
    "Sign ups": 67,
    Logins: 1938,
    "Sign outs": 932,
    "Support calls": 2,
  },
  {
    date: "2023-03-07T00:00:00",
    "Rows written": 2856,
    "Rows read": 19163,
    Queries: 488,
    "Payments completed": 118,
    "Sign ups": 75,
    Logins: 1798,
    "Sign outs": 904,
    "Support calls": 2,
  },
  {
    date: "2023-03-08T00:00:00",
    "Rows written": 2870,
    "Rows read": 19383,
    Queries: 483,
    "Payments completed": 123,
    "Sign ups": 75,
    Logins: 1866,
    "Sign outs": 901,
    "Support calls": 3,
  },
  {
    date: "2023-03-09T00:00:00",
    "Rows written": 2855,
    "Rows read": 19523,
    Queries: 483,
    "Payments completed": 118,
    "Sign ups": 61,
    Logins: 1640,
    "Sign outs": 910,
    "Support calls": 5,
  },
  {
    date: "2023-03-10T00:00:00",
    "Rows written": 2819,
    "Rows read": 19186,
    Queries: 480,
    "Payments completed": 124,
    "Sign ups": 65,
    Logins: 1274,
    "Sign outs": 903,
    "Support calls": 4,
  },
  {
    date: "2023-03-11T00:00:00",
    "Rows written": 2785,
    "Rows read": 18841,
    Queries: 415,
    "Payments completed": 97,
    "Sign ups": 52,
    Logins: 895,
    "Sign outs": 913,
    "Support calls": 4,
  },
  {
    date: "2023-03-12T00:00:00",
    "Rows written": 2787,
    "Rows read": 18357,
    Queries: 390,
    "Payments completed": 71,
    "Sign ups": 50,
    Logins: 861,
    "Sign outs": 906,
    "Support calls": 3,
  },
  {
    date: "2023-03-13T00:00:00",
    "Rows written": 2810,
    "Rows read": 18455,
    Queries: 496,
    "Payments completed": 94,
    "Sign ups": 67,
    Logins: 853,
    "Sign outs": 914,
    "Support calls": 4,
  },
  {
    date: "2023-03-14T00:00:00",
    "Rows written": 2827,
    "Rows read": 18791,
    Queries: 494,
    "Payments completed": 92,
    "Sign ups": 77,
    Logins: 860,
    "Sign outs": 902,
    "Support calls": 6,
  },
  {
    date: "2023-03-15T00:00:00",
    "Rows written": 2855,
    "Rows read": 19023,
    Queries: 493,
    "Payments completed": 94,
    "Sign ups": 80,
    Logins: 922,
    "Sign outs": 971,
    "Support calls": 7,
  },
  {
    date: "2023-03-16T00:00:00",
    "Rows written": 2895,
    "Rows read": 19666,
    Queries: 495,
    "Payments completed": 122,
    "Sign ups": 76,
    Logins: 1127,
    "Sign outs": 1019,
    "Support calls": 5,
  },
  {
    date: "2023-03-17T00:00:00",
    "Rows written": 2912,
    "Rows read": 20299,
    Queries: 497,
    "Payments completed": 114,
    "Sign ups": 61,
    Logins: 1055,
    "Sign outs": 953,
    "Support calls": 2,
  },
  {
    date: "2023-03-18T00:00:00",
    "Rows written": 2924,
    "Rows read": 20036,
    Queries: 386,
    "Payments completed": 95,
    "Sign ups": 60,
    Logins: 1158,
    "Sign outs": 988,
    "Support calls": 2,
  },
  {
    date: "2023-03-19T00:00:00",
    "Rows written": 2953,
    "Rows read": 20010,
    Queries: 408,
    "Payments completed": 71,
    "Sign ups": 58,
    Logins: 1438,
    "Sign outs": 954,
    "Support calls": 2,
  },
  {
    date: "2023-03-20T00:00:00",
    "Rows written": 2939,
    "Rows read": 19601,
    Queries: 492,
    "Payments completed": 87,
    "Sign ups": 70,
    Logins: 1332,
    "Sign outs": 906,
    "Support calls": 3,
  },
  {
    date: "2023-03-21T00:00:00",
    "Rows written": 2932,
    "Rows read": 19406,
    Queries: 495,
    "Payments completed": 120,
    "Sign ups": 75,
    Logins: 1102,
    "Sign outs": 918,
    "Support calls": 5,
  },
  {
    date: "2023-03-22T00:00:00",
    "Rows written": 2951,
    "Rows read": 19742,
    Queries: 497,
    "Payments completed": 110,
    "Sign ups": 75,
    Logins: 951,
    "Sign outs": 922,
    "Support calls": 8,
  },
  {
    date: "2023-03-23T00:00:00",
    "Rows written": 2937,
    "Rows read": 19329,
    Queries: 503,
    "Payments completed": 103,
    "Sign ups": 75,
    Logins: 846,
    "Sign outs": 921,
    "Support calls": 12,
  },
  {
    date: "2023-03-24T00:00:00",
    "Rows written": 2945,
    "Rows read": 19646,
    Queries: 511,
    "Payments completed": 118,
    "Sign ups": 71,
    Logins: 850,
    "Sign outs": 926,
    "Support calls": 14,
  },
  {
    date: "2023-03-25T00:00:00",
    "Rows written": 2947,
    "Rows read": 19271,
    Queries: 426,
    "Payments completed": 97,
    "Sign ups": 67,
    Logins: 878,
    "Sign outs": 923,
    "Support calls": 14,
  },
  {
    date: "2023-03-26T00:00:00",
    "Rows written": 2945,
    "Rows read": 18842,
    Queries: 382,
    "Payments completed": 98,
    "Sign ups": 67,
    Logins: 851,
    "Sign outs": 924,
    "Support calls": 10,
  },
  {
    date: "2023-03-26T00:00:00",
    "Rows written": 2926,
    "Rows read": 18999,
    Queries: 498,
    "Payments completed": 118,
    "Sign ups": 73,
    Logins: 872,
    "Sign outs": 1009,
    "Support calls": 13,
  },
  {
    date: "2023-03-27T00:00:00",
    "Rows written": 2945,
    "Rows read": 19312,
    Queries: 499,
    "Payments completed": 123,
    "Sign ups": 62,
    Logins: 863,
    "Sign outs": 958,
    "Support calls": 15,
  },
  {
    date: "2023-03-28T00:00:00",
    "Rows written": 2937,
    "Rows read": 19258,
    Queries: 502,
    "Payments completed": 118,
    "Sign ups": 80,
    Logins: 901,
    "Sign outs": 927,
    "Support calls": 12,
  },
  {
    date: "2023-03-29T00:00:00",
    "Rows written": 2908,
    "Rows read": 19567,
    Queries: 501,
    "Payments completed": 120,
    "Sign ups": 74,
    Logins: 845,
    "Sign outs": 967,
    "Support calls": 11,
  },
  {
    date: "2023-03-30T00:00:00",
    "Rows written": 2876,
    "Rows read": 19888,
    Queries: 497,
    "Payments completed": 120,
    "Sign ups": 61,
    Logins: 869,
    "Sign outs": 1080,
    "Support calls": 6,
  },
  {
    date: "2023-03-31T00:00:00",
    "Rows written": 2855,
    "Rows read": 20292,
    Queries: 438,
    "Payments completed": 70,
    "Sign ups": 53,
    Logins: 865,
    "Sign outs": 1057,
    "Support calls": 5,
  },
  {
    date: "2023-04-01T00:00:00",
    "Rows written": 2845,
    "Rows read": 20739,
    Queries: 403,
    "Payments completed": 61,
    "Sign ups": 60,
    Logins: 860,
    "Sign outs": 987,
    "Support calls": 7,
  },
  {
    date: "2023-04-02T00:00:00",
    "Rows written": 2838,
    "Rows read": 20633,
    Queries: 493,
    "Payments completed": 81,
    "Sign ups": 66,
    Logins: 867,
    "Sign outs": 905,
    "Support calls": 12,
  },
  {
    date: "2023-04-03T00:00:00",
    "Rows written": 2832,
    "Rows read": 21003,
    Queries: 496,
    "Payments completed": 82,
    "Sign ups": 60,
    Logins: 867,
    "Sign outs": 934,
    "Support calls": 13,
  },
  {
    date: "2023-04-04T00:00:00",
    "Rows written": 2825,
    "Rows read": 20648,
    Queries: 500,
    "Payments completed": 81,
    "Sign ups": 66,
    Logins: 963,
    "Sign outs": 1002,
    "Support calls": 14,
  },
  {
    date: "2023-04-05T00:00:00",
    "Rows written": 2819,
    "Rows read": 20691,
    Queries: 504,
    "Payments completed": 105,
    "Sign ups": 64,
    Logins: 1027,
    "Sign outs": 1046,
    "Support calls": 15,
  },
  {
    date: "2023-04-06T00:00:00",
    "Rows written": 2823,
    "Rows read": 20393,
    Queries: 510,
    "Payments completed": 121,
    "Sign ups": 64,
    Logins: 1171,
    "Sign outs": 1101,
    "Support calls": 10,
  },
  {
    date: "2023-04-07T00:00:00",
    "Rows written": 2805,
    "Rows read": 20582,
    Queries: 412,
    "Payments completed": 95,
    "Sign ups": 54,
    Logins: 1199,
    "Sign outs": 1193,
    "Support calls": 9,
  },
  {
    date: "2023-04-08T00:00:00",
    "Rows written": 2805,
    "Rows read": 20673,
    Queries: 400,
    "Payments completed": 75,
    "Sign ups": 52,
    Logins: 1208,
    "Sign outs": 1168,
    "Support calls": 5,
  },
  {
    date: "2023-04-09T00:00:00",
    "Rows written": 2794,
    "Rows read": 20134,
    Queries: 494,
    "Payments completed": 107,
    "Sign ups": 64,
    Logins: 1452,
    "Sign outs": 1189,
    "Support calls": 6,
  },
  {
    date: "2023-04-10T00:00:00",
    "Rows written": 2802,
    "Rows read": 19757,
    Queries: 489,
    "Payments completed": 121,
    "Sign ups": 63,
    Logins: 1464,
    "Sign outs": 1195,
    "Support calls": 6,
  },
  {
    date: "2023-04-11T00:00:00",
    "Rows written": 2803,
    "Rows read": 20053,
    Queries: 486,
    "Payments completed": 100,
    "Sign ups": 60,
    Logins: 1512,
    "Sign outs": 1199,
    "Support calls": 5,
  },
  {
    date: "2023-04-12T00:00:00",
    "Rows written": 2812,
    "Rows read": 19604,
    Queries: 483,
    "Payments completed": 120,
    "Sign ups": 61,
    Logins: 1360,
    "Sign outs": 1193,
    "Support calls": 3,
  },
  {
    date: "2023-04-13T00:00:00",
    "Rows written": 2822,
    "Rows read": 19715,
    Queries: 478,
    "Payments completed": 122,
    "Sign ups": 69,
    Logins: 1038,
    "Sign outs": 1184,
    "Support calls": 3,
  },
  {
    date: "2023-04-14T00:00:00",
    "Rows written": 2819,
    "Rows read": 20002,
    Queries: 367,
    "Payments completed": 82,
    "Sign ups": 61,
    Logins: 844,
    "Sign outs": 1163,
    "Support calls": 3,
  },
  {
    date: "2023-04-15T00:00:00",
    "Rows written": 2805,
    "Rows read": 20661,
    Queries: 430,
    "Payments completed": 70,
    "Sign ups": 62,
    Logins: 855,
    "Sign outs": 1044,
    "Support calls": 2,
  },
  {
    date: "2023-04-16T00:00:00",
    "Rows written": 2826,
    "Rows read": 21525,
    Queries: 487,
    "Payments completed": 81,
    "Sign ups": 63,
    Logins: 973,
    "Sign outs": 1000,
    "Support calls": 2,
  },
  {
    date: "2023-04-17T00:00:00",
    "Rows written": 2812,
    "Rows read": 21431,
    Queries: 491,
    "Payments completed": 90,
    "Sign ups": 61,
    Logins: 1065,
    "Sign outs": 908,
    "Support calls": 2,
  },
  {
    date: "2023-04-18T00:00:00",
    "Rows written": 2825,
    "Rows read": 21171,
    Queries: 493,
    "Payments completed": 122,
    "Sign ups": 64,
    Logins: 1071,
    "Sign outs": 922,
    "Support calls": 2,
  },
  {
    date: "2023-04-19T00:00:00",
    "Rows written": 2841,
    "Rows read": 20561,
    Queries: 495,
    "Payments completed": 123,
    "Sign ups": 73,
    Logins: 1065,
    "Sign outs": 907,
    "Support calls": 3,
  },
  {
    date: "2023-04-20T00:00:00",
    "Rows written": 2875,
    "Rows read": 20802,
    Queries: 494,
    "Payments completed": 125,
    "Sign ups": 63,
    Logins: 1191,
    "Sign outs": 906,
    "Support calls": 3,
  },
  {
    date: "2023-04-21T00:00:00",
    "Rows written": 2873,
    "Rows read": 20844,
    Queries: 408,
    "Payments completed": 92,
    "Sign ups": 51,
    Logins: 1415,
    "Sign outs": 925,
    "Support calls": 2,
  },
  {
    date: "2023-04-22T00:00:00",
    "Rows written": 2850,
    "Rows read": 20898,
    Queries: 372,
    "Payments completed": 82,
    "Sign ups": 57,
    Logins: 1744,
    "Sign outs": 905,
    "Support calls": 2,
  },
  {
    date: "2023-04-23T00:00:00",
    "Rows written": 2833,
    "Rows read": 20662,
    Queries: 500,
    "Payments completed": 91,
    "Sign ups": 62,
    Logins: 2017,
    "Sign outs": 908,
    "Support calls": 3,
  },
  {
    date: "2023-04-24T00:00:00",
    "Rows written": 2820,
    "Rows read": 20361,
    Queries: 494,
    "Payments completed": 124,
    "Sign ups": 79,
    Logins: 1911,
    "Sign outs": 913,
    "Support calls": 4,
  },
  {
    date: "2023-04-25T00:00:00",
    "Rows written": 2820,
    "Rows read": 19629,
    Queries: 489,
    "Payments completed": 113,
    "Sign ups": 70,
    Logins: 2014,
    "Sign outs": 939,
    "Support calls": 4,
  },
  {
    date: "2023-04-26T00:00:00",
    "Rows written": 2837,
    "Rows read": 19197,
    Queries: 486,
    "Payments completed": 115,
    "Sign ups": 63,
    Logins: 2004,
    "Sign outs": 963,
    "Support calls": 3,
  },
  {
    date: "2023-04-27T00:00:00",
    "Rows written": 2852,
    "Rows read": 19201,
    Queries: 481,
    "Payments completed": 113,
    "Sign ups": 63,
    Logins: 2029,
    "Sign outs": 903,
    "Support calls": 3,
  },
  {
    date: "2023-04-28T00:00:00",
    "Rows written": 2832,
    "Rows read": 19708,
    Queries: 405,
    "Payments completed": 88,
    "Sign ups": 50,
    Logins: 2012,
    "Sign outs": 916,
    "Support calls": 3,
  },
  {
    date: "2023-04-29T00:00:00",
    "Rows written": 2808,
    "Rows read": 20513,
    Queries: 393,
    "Payments completed": 94,
    "Sign ups": 48,
    Logins: 1745,
    "Sign outs": 983,
    "Support calls": 2,
  },
  {
    date: "2023-04-30T00:00:00",
    "Rows written": 2815,
    "Rows read": 20545,
    Queries: 495,
    "Payments completed": 82,
    "Sign ups": 64,
    Logins: 1784,
    "Sign outs": 1063,
    "Support calls": 2,
  },
  {
    date: "2023-05-01T00:00:00",
    "Rows written": 2804,
    "Rows read": 20774,
    Queries: 491,
    "Payments completed": 84,
    "Sign ups": 62,
    Logins: 1883,
    "Sign outs": 1199,
    "Support calls": 2,
  },
  {
    date: "2023-05-02T00:00:00",
    "Rows written": 2786,
    "Rows read": 21453,
    Queries: 489,
    "Payments completed": 81,
    "Sign ups": 62,
    Logins: 1806,
    "Sign outs": 1188,
    "Support calls": 2,
  },
  {
    date: "2023-05-03T00:00:00",
    "Rows written": 2786,
    "Rows read": 21543,
    Queries: 484,
    "Payments completed": 106,
    "Sign ups": 61,
    Logins: 1967,
    "Sign outs": 1175,
    "Support calls": 3,
  },
  {
    date: "2023-05-04T00:00:00",
    "Rows written": 2775,
    "Rows read": 21089,
    Queries: 484,
    "Payments completed": 122,
    "Sign ups": 62,
    Logins: 1956,
    "Sign outs": 1186,
    "Support calls": 4,
  },
  {
    date: "2023-05-05T00:00:00",
    "Rows written": 2784,
    "Rows read": 20388,
    Queries: 435,
    "Payments completed": 90,
    "Sign ups": 53,
    Logins: 2032,
    "Sign outs": 1179,
    "Support calls": 3,
  },
  {
    date: "2023-05-06T00:00:00",
    "Rows written": 2779,
    "Rows read": 19678,
    Queries: 386,
    "Payments completed": 99,
    "Sign ups": 47,
    Logins: 1984,
    "Sign outs": 1189,
    "Support calls": 2,
  },
  {
    date: "2023-05-07T00:00:00",
    "Rows written": 2763,
    "Rows read": 19046,
    Queries: 496,
    "Payments completed": 115,
    "Sign ups": 68,
    Logins: 2021,
    "Sign outs": 1195,
    "Support calls": 2,
  },
  {
    date: "2023-05-08T00:00:00",
    "Rows written": 2738,
    "Rows read": 19152,
    Queries: 500,
    "Payments completed": 121,
    "Sign ups": 80,
    Logins: 1641,
    "Sign outs": 1197,
    "Support calls": 2,
  },
  {
    date: "2023-05-09T00:00:00",
    "Rows written": 2738,
    "Rows read": 18656,
    Queries: 506,
    "Payments completed": 81,
    "Sign ups": 75,
    Logins: 1286,
    "Sign outs": 1184,
    "Support calls": 2,
  },
  {
    date: "2023-05-10T00:00:00",
    "Rows written": 2715,
    "Rows read": 18455,
    Queries: 507,
    "Payments completed": 87,
    "Sign ups": 79,
    Logins: 987,
    "Sign outs": 1195,
    "Support calls": 2,
  },
  {
    date: "2023-05-11T00:00:00",
    "Rows written": 2714,
    "Rows read": 18037,
    Queries: 505,
    "Payments completed": 87,
    "Sign ups": 79,
    Logins: 953,
    "Sign outs": 1198,
    "Support calls": 2,
  },
  {
    date: "2023-05-12T00:00:00",
    "Rows written": 2714,
    "Rows read": 18119,
    Queries: 422,
    "Payments completed": 105,
    "Sign ups": 55,
    Logins: 1059,
    "Sign outs": 1180,
    "Support calls": 2,
  },
  {
    date: "2023-05-13T00:00:00",
    "Rows written": 2717,
    "Rows read": 18102,
    Queries: 436,
    "Payments completed": 94,
    "Sign ups": 52,
    Logins: 1153,
    "Sign outs": 1191,
    "Support calls": 2,
  },
  {
    date: "2023-05-14T00:00:00",
    "Rows written": 2735,
    "Rows read": 18080,
    Queries: 487,
    "Payments completed": 122,
    "Sign ups": 61,
    Logins: 1033,
    "Sign outs": 1168,
    "Support calls": 2,
  },
  {
    date: "2023-05-15T00:00:00",
    "Rows written": 2756,
    "Rows read": 18124,
    Queries: 484,
    "Payments completed": 99,
    "Sign ups": 65,
    Logins: 846,
    "Sign outs": 1179,
    "Support calls": 2,
  },
  {
    date: "2023-05-16T00:00:00",
    "Rows written": 2757,
    "Rows read": 18008,
    Queries: 478,
    "Payments completed": 125,
    "Sign ups": 65,
    Logins: 891,
    "Sign outs": 1132,
    "Support calls": 2,
  },
  {
    date: "2023-05-17T00:00:00",
    "Rows written": 2752,
    "Rows read": 18076,
    Queries: 478,
    "Payments completed": 113,
    "Sign ups": 63,
    Logins: 923,
    "Sign outs": 1003,
    "Support calls": 2,
  },
  {
    date: "2023-05-18T00:00:00",
    "Rows written": 2772,
    "Rows read": 18027,
    Queries: 479,
    "Payments completed": 84,
    "Sign ups": 61,
    Logins: 1115,
    "Sign outs": 974,
    "Support calls": 2,
  },
  {
    date: "2023-05-19T00:00:00",
    "Rows written": 2796,
    "Rows read": 18099,
    Queries: 387,
    "Payments completed": 78,
    "Sign ups": 52,
    Logins: 1374,
    "Sign outs": 1000,
    "Support calls": 2,
  },
  {
    date: "2023-05-20T00:00:00",
    "Rows written": 2793,
    "Rows read": 18002,
    Queries: 431,
    "Payments completed": 84,
    "Sign ups": 54,
    Logins: 1622,
    "Sign outs": 1067,
    "Support calls": 2,
  },
  {
    date: "2023-05-21T00:00:00",
    "Rows written": 2782,
    "Rows read": 18012,
    Queries: 488,
    "Payments completed": 81,
    "Sign ups": 74,
    Logins: 1612,
    "Sign outs": 1182,
    "Support calls": 3,
  },
  {
    date: "2023-05-22T00:00:00",
    "Rows written": 2794,
    "Rows read": 18004,
    Queries: 485,
    "Payments completed": 87,
    "Sign ups": 74,
    Logins: 1668,
    "Sign outs": 1173,
    "Support calls": 3,
  },
  {
    date: "2023-05-23T00:00:00",
    "Rows written": 2824,
    "Rows read": 18446,
    Queries: 481,
    "Payments completed": 103,
    "Sign ups": 67,
    Logins: 1579,
    "Sign outs": 1175,
    "Support calls": 4,
  },
  {
    date: "2023-05-24T00:00:00",
    "Rows written": 2862,
    "Rows read": 18357,
    Queries: 479,
    "Payments completed": 96,
    "Sign ups": 72,
    Logins: 1294,
    "Sign outs": 1188,
    "Support calls": 6,
  },
  {
    date: "2023-05-25T00:00:00",
    "Rows written": 2910,
    "Rows read": 18021,
    Queries: 478,
    "Payments completed": 83,
    "Sign ups": 79,
    Logins: 1214,
    "Sign outs": 1172,
    "Support calls": 6,
  },
  {
    date: "2023-05-26T00:00:00",
    "Rows written": 2949,
    "Rows read": 18094,
    Queries: 379,
    "Payments completed": 66,
    "Sign ups": 62,
    Logins: 1054,
    "Sign outs": 1199,
    "Support calls": 4,
  },
  {
    date: "2023-05-27T00:00:00",
    "Rows written": 2983,
    "Rows read": 18053,
    Queries: 390,
    "Payments completed": 68,
    "Sign ups": 63,
    Logins: 1034,
    "Sign outs": 1178,
    "Support calls": 2,
  },
  {
    date: "2023-05-28T00:00:00",
    "Rows written": 2978,
    "Rows read": 18022,
    Queries: 496,
    "Payments completed": 92,
    "Sign ups": 61,
    Logins: 845,
    "Sign outs": 1180,
    "Support calls": 2,
  },
  {
    date: "2023-05-29T00:00:00",
    "Rows written": 2963,
    "Rows read": 18416,
    Queries: 494,
    "Payments completed": 93,
    "Sign ups": 80,
    Logins: 881,
    "Sign outs": 1179,
    "Support calls": 2,
  },
  {
    date: "2023-05-30T00:00:00",
    "Rows written": 2949,
    "Rows read": 18270,
    Queries: 496,
    "Payments completed": 81,
    "Sign ups": 71,
    Logins: 925,
    "Sign outs": 1194,
    "Support calls": 2,
  },
  {
    date: "2023-05-31T00:00:00",
    "Rows written": 2965,
    "Rows read": 18034,
    Queries: 500,
    "Payments completed": 80,
    "Sign ups": 70,
    Logins: 879,
    "Sign outs": 1195,
    "Support calls": 2,
  },
  {
    date: "2023-06-01T00:00:00",
    "Rows written": 2970,
    "Rows read": 18061,
    Queries: 506,
    "Payments completed": 95,
    "Sign ups": 77,
    Logins: 924,
    "Sign outs": 1120,
    "Support calls": 2,
  },
  {
    date: "2023-06-02T00:00:00",
    "Rows written": 2974,
    "Rows read": 18180,
    Queries: 425,
    "Payments completed": 74,
    "Sign ups": 54,
    Logins: 853,
    "Sign outs": 1146,
    "Support calls": 2,
  },
  {
    date: "2023-06-03T00:00:00",
    "Rows written": 3004,
    "Rows read": 18022,
    Queries: 384,
    "Payments completed": 74,
    "Sign ups": 48,
    Logins: 877,
    "Sign outs": 1153,
    "Support calls": 2,
  },
  {
    date: "2023-06-04T00:00:00",
    "Rows written": 3033,
    "Rows read": 18091,
    Queries: 497,
    "Payments completed": 102,
    "Sign ups": 66,
    Logins: 896,
    "Sign outs": 1199,
    "Support calls": 2,
  },
  {
    date: "2023-06-05T00:00:00",
    "Rows written": 3033,
    "Rows read": 18398,
    Queries: 500,
    "Payments completed": 101,
    "Sign ups": 76,
    Logins: 1053,
    "Sign outs": 1118,
    "Support calls": 2,
  },
  {
    date: "2023-06-06T00:00:00",
    "Rows written": 3028,
    "Rows read": 18439,
    Queries: 505,
    "Payments completed": 83,
    "Sign ups": 74,
    Logins: 1009,
    "Sign outs": 1029,
    "Support calls": 3,
  },
  {
    date: "2023-06-07T00:00:00",
    "Rows written": 3008,
    "Rows read": 18750,
    Queries: 505,
    "Payments completed": 82,
    "Sign ups": 72,
    Logins: 884,
    "Sign outs": 997,
    "Support calls": 4,
  },
  {
    date: "2023-06-08T00:00:00",
    "Rows written": 3000,
    "Rows read": 19398,
    Queries: 509,
    "Payments completed": 80,
    "Sign ups": 78,
    Logins: 1003,
    "Sign outs": 1069,
    "Support calls": 5,
  },
  {
    date: "2023-06-09T00:00:00",
    "Rows written": 2975,
    "Rows read": 19233,
    Queries: 442,
    "Payments completed": 68,
    "Sign ups": 54,
    Logins: 1182,
    "Sign outs": 1169,
    "Support calls": 4,
  },
  {
    date: "2023-06-10T00:00:00",
    "Rows written": 2958,
    "Rows read": 19593,
    Queries: 430,
    "Payments completed": 65,
    "Sign ups": 63,
    Logins: 1129,
    "Sign outs": 1161,
    "Support calls": 4,
  },
  {
    date: "2023-06-11T00:00:00",
    "Rows written": 2966,
    "Rows read": 20333,
    Queries: 488,
    "Payments completed": 84,
    "Sign ups": 61,
    Logins: 1009,
    "Sign outs": 1199,
    "Support calls": 4,
  },
  {
    date: "2023-06-12T00:00:00",
    "Rows written": 2988,
    "Rows read": 20156,
    Queries: 491,
    "Payments completed": 98,
    "Sign ups": 64,
    Logins: 924,
    "Sign outs": 1194,
    "Support calls": 3,
  },
  {
    date: "2023-06-13T00:00:00",
    "Rows written": 2973,
    "Rows read": 19662,
    Queries: 488,
    "Payments completed": 106,
    "Sign ups": 67,
    Logins: 870,
    "Sign outs": 1176,
    "Support calls": 4,
  },
  {
    date: "2023-06-14T00:00:00",
    "Rows written": 2951,
    "Rows read": 19450,
    Queries: 483,
    "Payments completed": 122,
    "Sign ups": 60,
    Logins: 877,
    "Sign outs": 1167,
    "Support calls": 3,
  },
  {
    date: "2023-06-15T00:00:00",
    "Rows written": 2917,
    "Rows read": 19681,
    Queries: 478,
    "Payments completed": 97,
    "Sign ups": 66,
    Logins: 853,
    "Sign outs": 1185,
    "Support calls": 4,
  },
  {
    date: "2023-06-16T00:00:00",
    "Rows written": 2877,
    "Rows read": 19636,
    Queries: 365,
    "Payments completed": 71,
    "Sign ups": 55,
    Logins: 965,
    "Sign outs": 1184,
    "Support calls": 4,
  },
  {
    date: "2023-06-17T00:00:00",
    "Rows written": 2850,
    "Rows read": 19478,
    Queries: 438,
    "Payments completed": 65,
    "Sign ups": 55,
    Logins: 1101,
    "Sign outs": 1197,
    "Support calls": 2,
  },
  {
    date: "2023-06-18T00:00:00",
    "Rows written": 2858,
    "Rows read": 19258,
    Queries: 487,
    "Payments completed": 81,
    "Sign ups": 64,
    Logins: 1335,
    "Sign outs": 1106,
    "Support calls": 2,
  },
  {
    date: "2023-06-19T00:00:00",
    "Rows written": 2880,
    "Rows read": 19348,
    Queries: 487,
    "Payments completed": 118,
    "Sign ups": 73,
    Logins: 1406,
    "Sign outs": 1129,
    "Support calls": 2,
  },
  {
    date: "2023-06-20T00:00:00",
    "Rows written": 2863,
    "Rows read": 19951,
    Queries: 488,
    "Payments completed": 116,
    "Sign ups": 76,
    Logins: 1378,
    "Sign outs": 1082,
    "Support calls": 2,
  },
  {
    date: "2023-06-21T00:00:00",
    "Rows written": 2844,
    "Rows read": 20053,
    Queries: 490,
    "Payments completed": 82,
    "Sign ups": 77,
    Logins: 1294,
    "Sign outs": 1073,
    "Support calls": 2,
  },
  {
    date: "2023-06-22T00:00:00",
    "Rows written": 2830,
    "Rows read": 20493,
    Queries: 489,
    "Payments completed": 83,
    "Sign ups": 61,
    Logins: 1318,
    "Sign outs": 1042,
    "Support calls": 2,
  },
  {
    date: "2023-06-23T00:00:00",
    "Rows written": 2833,
    "Rows read": 20724,
    Queries: 432,
    "Payments completed": 66,
    "Sign ups": 57,
    Logins: 1076,
    "Sign outs": 1115,
    "Support calls": 2,
  },
  {
    date: "2023-06-24T00:00:00",
    "Rows written": 2809,
    "Rows read": 20767,
    Queries: 431,
    "Payments completed": 63,
    "Sign ups": 59,
    Logins: 852,
    "Sign outs": 1174,
    "Support calls": 2,
  },
  {
    date: "2023-06-25T00:00:00",
    "Rows written": 2781,
    "Rows read": 20818,
    Queries: 487,
    "Payments completed": 81,
    "Sign ups": 64,
    Logins: 881,
    "Sign outs": 1173,
    "Support calls": 2,
  },
  {
    date: "2023-06-26T00:00:00",
    "Rows written": 2748,
    "Rows read": 20673,
    Queries: 490,
    "Payments completed": 95,
    "Sign ups": 78,
    Logins: 914,
    "Sign outs": 1105,
    "Support calls": 2,
  },
  {
    date: "2023-06-27T00:00:00",
    "Rows written": 2750,
    "Rows read": 19990,
    Queries: 492,
    "Payments completed": 81,
    "Sign ups": 74,
    Logins: 855,
    "Sign outs": 1139,
    "Support calls": 2,
  },
  {
    date: "2023-06-28T00:00:00",
    "Rows written": 2761,
    "Rows read": 19874,
    Queries: 488,
    "Payments completed": 83,
    "Sign ups": 69,
    Logins: 876,
    "Sign outs": 1073,
    "Support calls": 2,
  },
  {
    date: "2023-06-29T00:00:00",
    "Rows written": 2787,
    "Rows read": 19812,
    Queries: 486,
    "Payments completed": 83,
    "Sign ups": 76,
    Logins: 900,
    "Sign outs": 1090,
    "Support calls": 3,
  },
  {
    date: "2023-06-30T00:00:00",
    "Rows written": 2819,
    "Rows read": 19619,
    Queries: 376,
    "Payments completed": 88,
    "Sign ups": 66,
    Logins: 852,
    "Sign outs": 1118,
    "Support calls": 3,
  },
  {
    date: "2023-07-01T00:00:00",
    "Rows written": 2825,
    "Rows read": 19145,
    Queries: 374,
    "Payments completed": 103,
    "Sign ups": 52,
    Logins: 856,
    "Sign outs": 1153,
    "Support calls": 4,
  },
  {
    date: "2023-07-02T00:00:00",
    "Rows written": 2825,
    "Rows read": 18490,
    Queries: 499,
    "Payments completed": 120,
    "Sign ups": 64,
    Logins: 878,
    "Sign outs": 1087,
    "Support calls": 3,
  },
  {
    date: "2023-07-03T00:00:00",
    "Rows written": 2835,
    "Rows read": 18059,
    Queries: 503,
    "Payments completed": 122,
    "Sign ups": 63,
    Logins: 936,
    "Sign outs": 1138,
    "Support calls": 2,
  },
  {
    date: "2023-07-04T00:00:00",
    "Rows written": 2827,
    "Rows read": 18157,
    Queries: 507,
    "Payments completed": 81,
    "Sign ups": 78,
    Logins: 1006,
    "Sign outs": 1100,
    "Support calls": 2,
  },
  {
    date: "2023-07-05T00:00:00",
    "Rows written": 2842,
    "Rows read": 18079,
    Queries: 513,
    "Payments completed": 81,
    "Sign ups": 80,
    Logins: 1049,
    "Sign outs": 1090,
    "Support calls": 2,
  },
  {
    date: "2023-07-06T00:00:00",
    "Rows written": 2834,
    "Rows read": 18317,
    Queries: 515,
    "Payments completed": 86,
    "Sign ups": 62,
    Logins: 1092,
    "Sign outs": 1161,
    "Support calls": 2,
  },
  {
    date: "2023-07-07T00:00:00",
    "Rows written": 2839,
    "Rows read": 18617,
    Queries: 415,
    "Payments completed": 72,
    "Sign ups": 56,
    Logins: 1210,
    "Sign outs": 1179,
    "Support calls": 2,
  },
  {
    date: "2023-07-08T00:00:00",
    "Rows written": 2853,
    "Rows read": 19089,
    Queries: 430,
    "Payments completed": 69,
    "Sign ups": 54,
    Logins: 1292,
    "Sign outs": 1155,
    "Support calls": 3,
  },
  {
    date: "2023-07-09T00:00:00",
    "Rows written": 2850,
    "Rows read": 19081,
    Queries: 488,
    "Payments completed": 89,
    "Sign ups": 63,
    Logins: 1354,
    "Sign outs": 1197,
    "Support calls": 5,
  },
  {
    date: "2023-07-10T00:00:00",
    "Rows written": 2848,
    "Rows read": 19119,
    Queries: 482,
    "Payments completed": 91,
    "Sign ups": 78,
    Logins: 1513,
    "Sign outs": 1188,
    "Support calls": 7,
  },
  {
    date: "2023-07-11T00:00:00",
    "Rows written": 2835,
    "Rows read": 19192,
    Queries: 484,
    "Payments completed": 87,
    "Sign ups": 75,
    Logins: 1546,
    "Sign outs": 1195,
    "Support calls": 8,
  },
  {
    date: "2023-07-12T00:00:00",
    "Rows written": 2833,
    "Rows read": 19322,
    Queries: 484,
    "Payments completed": 85,
    "Sign ups": 78,
    Logins: 1819,
    "Sign outs": 1188,
    "Support calls": 7,
  },
  {
    date: "2023-07-13T00:00:00",
    "Rows written": 2806,
    "Rows read": 19743,
    Queries: 484,
    "Payments completed": 111,
    "Sign ups": 74,
    Logins: 1954,
    "Sign outs": 1185,
    "Support calls": 6,
  },
  {
    date: "2023-07-14T00:00:00",
    "Rows written": 2817,
    "Rows read": 19688,
    Queries: 426,
    "Payments completed": 88,
    "Sign ups": 59,
    Logins: 1701,
    "Sign outs": 1194,
    "Support calls": 3,
  },
  {
    date: "2023-07-15T00:00:00",
    "Rows written": 2795,
    "Rows read": 19641,
    Queries: 367,
    "Payments completed": 101,
    "Sign ups": 55,
    Logins: 1309,
    "Sign outs": 1198,
    "Support calls": 2,
  },
  {
    date: "2023-07-16T00:00:00",
    "Rows written": 2793,
    "Rows read": 19952,
    Queries: 500,
    "Payments completed": 82,
    "Sign ups": 63,
    Logins: 1329,
    "Sign outs": 1183,
    "Support calls": 2,
  },
  {
    date: "2023-07-17T00:00:00",
    "Rows written": 2809,
    "Rows read": 20002,
    Queries: 501,
    "Payments completed": 82,
    "Sign ups": 63,
    Logins: 1447,
    "Sign outs": 1118,
    "Support calls": 2,
  },
  {
    date: "2023-07-18T00:00:00",
    "Rows written": 2798,
    "Rows read": 20051,
    Queries: 497,
    "Payments completed": 88,
    "Sign ups": 74,
    Logins: 1759,
    "Sign outs": 1110,
    "Support calls": 2,
  },
  {
    date: "2023-07-19T00:00:00",
    "Rows written": 2767,
    "Rows read": 19686,
    Queries: 499,
    "Payments completed": 90,
    "Sign ups": 77,
    Logins: 1931,
    "Sign outs": 1189,
    "Support calls": 2,
  },
  {
    date: "2023-07-20T00:00:00",
    "Rows written": 2733,
    "Rows read": 19300,
    Queries: 498,
    "Payments completed": 84,
    "Sign ups": 72,
    Logins: 2044,
    "Sign outs": 1196,
    "Support calls": 2,
  },
  {
    date: "2023-07-21T00:00:00",
    "Rows written": 2704,
    "Rows read": 18593,
    Queries: 440,
    "Payments completed": 66,
    "Sign ups": 67,
    Logins: 2014,
    "Sign outs": 1181,
    "Support calls": 2,
  },
  {
    date: "2023-07-22T00:00:00",
    "Rows written": 2711,
    "Rows read": 18352,
    Queries: 408,
    "Payments completed": 71,
    "Sign ups": 72,
    Logins: 1729,
    "Sign outs": 1148,
    "Support calls": 2,
  },
  {
    date: "2023-07-23T00:00:00",
    "Rows written": 2719,
    "Rows read": 18451,
    Queries: 491,
    "Payments completed": 85,
    "Sign ups": 60,
    Logins: 1423,
    "Sign outs": 1027,
    "Support calls": 3,
  },
  {
    date: "2023-07-24T00:00:00",
    "Rows written": 2708,
    "Rows read": 18006,
    Queries: 490,
    "Payments completed": 109,
    "Sign ups": 66,
    Logins: 1490,
    "Sign outs": 1050,
    "Support calls": 4,
  },
  {
    date: "2023-07-25T00:00:00",
    "Rows written": 2709,
    "Rows read": 18090,
    Queries: 486,
    "Payments completed": 99,
    "Sign ups": 62,
    Logins: 1458,
    "Sign outs": 1022,
    "Support calls": 6,
  },
  {
    date: "2023-07-26T00:00:00",
    "Rows written": 2693,
    "Rows read": 18102,
    Queries: 480,
    "Payments completed": 87,
    "Sign ups": 61,
    Logins: 1156,
    "Sign outs": 953,
    "Support calls": 4,
  },
  {
    date: "2023-07-27T00:00:00",
    "Rows written": 2680,
    "Rows read": 18083,
    Queries: 480,
    "Payments completed": 96,
    "Sign ups": 80,
    Logins: 1031,
    "Sign outs": 907,
    "Support calls": 4,
  },
  {
    date: "2023-07-28T00:00:00",
    "Rows written": 2663,
    "Rows read": 18029,
    Queries: 370,
    "Payments completed": 93,
    "Sign ups": 60,
    Logins: 966,
    "Sign outs": 903,
    "Support calls": 5,
  },
  {
    date: "2023-07-29T00:00:00",
    "Rows written": 2630,
    "Rows read": 18005,
    Queries: 383,
    "Payments completed": 99,
    "Sign ups": 57,
    Logins: 896,
    "Sign outs": 918,
    "Support calls": 7,
  },
  {
    date: "2023-07-30T00:00:00",
    "Rows written": 2606,
    "Rows read": 18020,
    Queries: 496,
    "Payments completed": 124,
    "Sign ups": 66,
    Logins: 1026,
    "Sign outs": 922,
    "Support calls": 9,
  },
  {
    date: "2023-07-31T00:00:00",
    "Rows written": 2575,
    "Rows read": 18242,
    Queries: 501,
    "Payments completed": 124,
    "Sign ups": 60,
    Logins: 961,
    "Sign outs": 915,
    "Support calls": 10,
  },
  {
    date: "2023-08-01T00:00:00",
    "Rows written": 2573,
    "Rows read": 18143,
    Queries: 501,
    "Payments completed": 89,
    "Sign ups": 60,
    Logins: 850,
    "Sign outs": 913,
    "Support calls": 15,
  },
  {
    date: "2023-08-02T00:00:00",
    "Rows written": 2592,
    "Rows read": 18373,
    Queries: 505,
    "Payments completed": 114,
    "Sign ups": 61,
    Logins: 868,
    "Sign outs": 901,
    "Support calls": 18,
  },
  {
    date: "2023-08-03T00:00:00",
    "Rows written": 2592,
    "Rows read": 19002,
    Queries: 506,
    "Payments completed": 123,
    "Sign ups": 77,
    Logins: 939,
    "Sign outs": 965,
    "Support calls": 17,
  },
  {
    date: "2023-08-04T00:00:00",
    "Rows written": 2593,
    "Rows read": 19427,
    Queries: 393,
    "Payments completed": 79,
    "Sign ups": 48,
    Logins: 852,
    "Sign outs": 970,
    "Support calls": 16,
  },
  {
    date: "2023-08-05T00:00:00",
    "Rows written": 2584,
    "Rows read": 19210,
    Queries: 416,
    "Payments completed": 78,
    "Sign ups": 52,
    Logins: 867,
    "Sign outs": 1040,
    "Support calls": 8,
  },
  {
    date: "2023-08-06T00:00:00",
    "Rows written": 2575,
    "Rows read": 18862,
    Queries: 491,
    "Payments completed": 100,
    "Sign ups": 65,
    Logins: 845,
    "Sign outs": 993,
    "Support calls": 5,
  },
  {
    date: "2023-08-07T00:00:00",
    "Rows written": 2583,
    "Rows read": 18581,
    Queries: 485,
    "Payments completed": 122,
    "Sign ups": 78,
    Logins: 899,
    "Sign outs": 905,
    "Support calls": 5,
  },
  {
    date: "2023-08-08T00:00:00",
    "Rows written": 2589,
    "Rows read": 18022,
    Queries: 481,
    "Payments completed": 117,
    "Sign ups": 72,
    Logins: 941,
    "Sign outs": 926,
    "Support calls": 6,
  },
  {
    date: "2023-08-09T00:00:00",
    "Rows written": 2582,
    "Rows read": 18144,
    Queries: 480,
    "Payments completed": 86,
    "Sign ups": 73,
    Logins: 1132,
    "Sign outs": 903,
    "Support calls": 5,
  },
  {
    date: "2023-08-10T00:00:00",
    "Rows written": 2558,
    "Rows read": 18725,
    Queries: 478,
    "Payments completed": 83,
    "Sign ups": 80,
    Logins: 1101,
    "Sign outs": 902,
    "Support calls": 4,
  },
  {
    date: "2023-08-11T00:00:00",
    "Rows written": 2522,
    "Rows read": 18465,
    Queries: 370,
    "Payments completed": 66,
    "Sign ups": 68,
    Logins: 993,
    "Sign outs": 967,
    "Support calls": 4,
  },
  {
    date: "2023-08-12T00:00:00",
    "Rows written": 2504,
    "Rows read": 18008,
    Queries: 444,
    "Payments completed": 67,
    "Sign ups": 70,
    Logins: 858,
    "Sign outs": 1055,
    "Support calls": 3,
  },
  {
    date: "2023-08-13T00:00:00",
    "Rows written": 2507,
    "Rows read": 18027,
    Queries: 486,
    "Payments completed": 88,
    "Sign ups": 78,
    Logins: 885,
    "Sign outs": 1120,
    "Support calls": 3,
  },
  {
    date: "2023-08-14T00:00:00",
    "Rows written": 2506,
    "Rows read": 18071,
    Queries: 482,
    "Payments completed": 107,
    "Sign ups": 77,
    Logins: 912,
    "Sign outs": 1193,
    "Support calls": 4,
  },
  {
    date: "2023-08-15T00:00:00",
    "Rows written": 2503,
    "Rows read": 18024,
    Queries: 482,
    "Payments completed": 80,
    "Sign ups": 76,
    Logins: 845,
    "Sign outs": 1193,
    "Support calls": 5,
  },
  {
    date: "2023-08-16T00:00:00",
    "Rows written": 2502,
    "Rows read": 18038,
    Queries: 480,
    "Payments completed": 89,
    "Sign ups": 79,
    Logins: 846,
    "Sign outs": 1161,
    "Support calls": 4,
  },
  {
    date: "2023-08-17T00:00:00",
    "Rows written": 2503,
    "Rows read": 18118,
    Queries: 478,
    "Payments completed": 83,
    "Sign ups": 72,
    Logins: 867,
    "Sign outs": 1189,
    "Support calls": 3,
  },
  {
    date: "2023-08-18T00:00:00",
    "Rows written": 2509,
    "Rows read": 18050,
    Queries: 405,
    "Payments completed": 82,
    "Sign ups": 58,
    Logins: 984,
    "Sign outs": 1177,
    "Support calls": 3,
  },
  {
    date: "2023-08-19T00:00:00",
    "Rows written": 2500,
    "Rows read": 18011,
    Queries: 383,
    "Payments completed": 97,
    "Sign ups": 59,
    Logins: 1006,
    "Sign outs": 1176,
    "Support calls": 3,
  },
  {
    date: "2023-08-20T00:00:00",
    "Rows written": 2505,
    "Rows read": 18215,
    Queries: 497,
    "Payments completed": 96,
    "Sign ups": 78,
    Logins: 975,
    "Sign outs": 1200,
    "Support calls": 4,
  },
  {
    date: "2023-08-21T00:00:00",
    "Rows written": 2512,
    "Rows read": 18186,
    Queries: 499,
    "Payments completed": 80,
    "Sign ups": 68,
    Logins: 976,
    "Sign outs": 1148,
    "Support calls": 4,
  },
  {
    date: "2023-08-22T00:00:00",
    "Rows written": 2501,
    "Rows read": 18401,
    Queries: 501,
    "Payments completed": 80,
    "Sign ups": 74,
    Logins: 1084,
    "Sign outs": 1196,
    "Support calls": 5,
  },
  {
    date: "2023-08-23T00:00:00",
    "Rows written": 2501,
    "Rows read": 18519,
    Queries: 499,
    "Payments completed": 96,
    "Sign ups": 76,
    Logins: 1130,
    "Sign outs": 1118,
    "Support calls": 6,
  },
  {
    date: "2023-08-24T00:00:00",
    "Rows written": 2508,
    "Rows read": 18913,
    Queries: 501,
    "Payments completed": 104,
    "Sign ups": 75,
    Logins: 944,
    "Sign outs": 1042,
    "Support calls": 9,
  },
  {
    date: "2023-08-25T00:00:00",
    "Rows written": 2502,
    "Rows read": 19306,
    Queries: 426,
    "Payments completed": 84,
    "Sign ups": 66,
    Logins: 872,
    "Sign outs": 960,
    "Support calls": 9,
  },
  {
    date: "2023-08-26T00:00:00",
    "Rows written": 2506,
    "Rows read": 19592,
    Queries: 436,
    "Payments completed": 85,
    "Sign ups": 54,
    Logins: 858,
    "Sign outs": 994,
    "Support calls": 9,
  },
  {
    date: "2023-08-27T00:00:00",
    "Rows written": 2501,
    "Rows read": 19482,
    Queries: 486,
    "Payments completed": 111,
    "Sign ups": 61,
    Logins: 861,
    "Sign outs": 981,
    "Support calls": 11,
  },
  {
    date: "2023-08-28T00:00:00",
    "Rows written": 2505,
    "Rows read": 19193,
    Queries: 483,
    "Payments completed": 82,
    "Sign ups": 77,
    Logins: 922,
    "Sign outs": 979,
    "Support calls": 12,
  },
  {
    date: "2023-08-29T00:00:00",
    "Rows written": 2505,
    "Rows read": 19224,
    Queries: 482,
    "Payments completed": 112,
    "Sign ups": 64,
    Logins: 935,
    "Sign outs": 1026,
    "Support calls": 9,
  },
  {
    date: "2023-08-30T00:00:00",
    "Rows written": 2515,
    "Rows read": 18795,
    Queries: 482,
    "Payments completed": 123,
    "Sign ups": 62,
    Logins: 845,
    "Sign outs": 1061,
    "Support calls": 10,
  },
  {
    date: "2023-08-31T00:00:00",
    "Rows written": 2515,
    "Rows read": 18658,
    Queries: 479,
    "Payments completed": 112,
    "Sign ups": 64,
    Logins: 932,
    "Sign outs": 1026,
    "Support calls": 15,
  },
  {
    date: "2023-09-01T00:00:00",
    "Rows written": 2500,
    "Rows read": 18864,
    Queries: 408,
    "Payments completed": 78,
    "Sign ups": 60,
    Logins: 958,
    "Sign outs": 1054,
    "Support calls": 16,
  },
  {
    date: "2023-09-02T00:00:00",
    "Rows written": 2506,
    "Rows read": 19030,
    Queries: 416,
    "Payments completed": 71,
    "Sign ups": 49,
    Logins: 943,
    "Sign outs": 1021,
    "Support calls": 12,
  },
  {
    date: "2023-09-03T00:00:00",
    "Rows written": 2507,
    "Rows read": 18759,
    Queries: 491,
    "Payments completed": 87,
    "Sign ups": 61,
    Logins: 863,
    "Sign outs": 971,
    "Support calls": 10,
  },
  {
    date: "2023-09-04T00:00:00",
    "Rows written": 2508,
    "Rows read": 19168,
    Queries: 492,
    "Payments completed": 88,
    "Sign ups": 79,
    Logins: 846,
    "Sign outs": 969,
    "Support calls": 8,
  },
  {
    date: "2023-09-05T00:00:00",
    "Rows written": 2514,
    "Rows read": 19384,
    Queries: 496,
    "Payments completed": 84,
    "Sign ups": 71,
    Logins: 880,
    "Sign outs": 1025,
    "Support calls": 6,
  },
  {
    date: "2023-09-06T00:00:00",
    "Rows written": 2541,
    "Rows read": 18965,
    Queries: 496,
    "Payments completed": 81,
    "Sign ups": 62,
    Logins: 852,
    "Sign outs": 999,
    "Support calls": 6,
  },
  {
    date: "2023-09-07T00:00:00",
    "Rows written": 2531,
    "Rows read": 18810,
    Queries: 498,
    "Payments completed": 80,
    "Sign ups": 67,
    Logins: 856,
    "Sign outs": 946,
    "Support calls": 8,
  },
  {
    date: "2023-09-08T00:00:00",
    "Rows written": 2505,
    "Rows read": 18734,
    Queries: 378,
    "Payments completed": 67,
    "Sign ups": 50,
    Logins: 931,
    "Sign outs": 962,
    "Support calls": 6,
  },
  {
    date: "2023-09-09T00:00:00",
    "Rows written": 2502,
    "Rows read": 18705,
    Queries: 445,
    "Payments completed": 83,
    "Sign ups": 52,
    Logins: 989,
    "Sign outs": 908,
    "Support calls": 3,
  },
  {
    date: "2023-09-10T00:00:00",
    "Rows written": 2513,
    "Rows read": 19192,
    Queries: 484,
    "Payments completed": 83,
    "Sign ups": 61,
    Logins: 1148,
    "Sign outs": 901,
    "Support calls": 3,
  },
  {
    date: "2023-09-11T00:00:00",
    "Rows written": 2540,
    "Rows read": 19588,
    Queries: 484,
    "Payments completed": 92,
    "Sign ups": 79,
    Logins: 1198,
    "Sign outs": 918,
    "Support calls": 3,
  },
  {
    date: "2023-09-12T00:00:00",
    "Rows written": 2570,
    "Rows read": 20135,
    Queries: 487,
    "Payments completed": 82,
    "Sign ups": 80,
    Logins: 1104,
    "Sign outs": 907,
    "Support calls": 4,
  },
  {
    date: "2023-09-13T00:00:00",
    "Rows written": 2571,
    "Rows read": 20847,
    Queries: 490,
    "Payments completed": 88,
    "Sign ups": 77,
    Logins: 1082,
    "Sign outs": 916,
    "Support calls": 4,
  },
  {
    date: "2023-09-14T00:00:00",
    "Rows written": 2549,
    "Rows read": 21778,
    Queries: 494,
    "Payments completed": 85,
    "Sign ups": 79,
    Logins: 1119,
    "Sign outs": 901,
    "Support calls": 4,
  },
  {
    date: "2023-09-15T00:00:00",
    "Rows written": 2535,
    "Rows read": 21650,
    Queries: 412,
    "Payments completed": 64,
    "Sign ups": 54,
    Logins: 1074,
    "Sign outs": 911,
    "Support calls": 3,
  },
  {
    date: "2023-09-16T00:00:00",
    "Rows written": 2544,
    "Rows read": 20967,
    Queries: 431,
    "Payments completed": 73,
    "Sign ups": 56,
    Logins: 1132,
    "Sign outs": 913,
    "Support calls": 2,
  },
  {
    date: "2023-09-17T00:00:00",
    "Rows written": 2547,
    "Rows read": 20966,
    Queries: 489,
    "Payments completed": 115,
    "Sign ups": 67,
    Logins: 1260,
    "Sign outs": 916,
    "Support calls": 2,
  },
  {
    date: "2023-09-18T00:00:00",
    "Rows written": 2539,
    "Rows read": 21347,
    Queries: 487,
    "Payments completed": 115,
    "Sign ups": 76,
    Logins: 1292,
    "Sign outs": 914,
    "Support calls": 2,
  },
  {
    date: "2023-09-19T00:00:00",
    "Rows written": 2524,
    "Rows read": 22148,
    Queries: 489,
    "Payments completed": 115,
    "Sign ups": 66,
    Logins: 1128,
    "Sign outs": 903,
    "Support calls": 3,
  },
  {
    date: "2023-09-20T00:00:00",
    "Rows written": 2519,
    "Rows read": 21947,
    Queries: 488,
    "Payments completed": 118,
    "Sign ups": 68,
    Logins: 1196,
    "Sign outs": 970,
    "Support calls": 4,
  },
  {
    date: "2023-09-21T00:00:00",
    "Rows written": 2529,
    "Rows read": 22192,
    Queries: 487,
    "Payments completed": 85,
    "Sign ups": 65,
    Logins: 1268,
    "Sign outs": 953,
    "Support calls": 4,
  },
  {
    date: "2023-09-22T00:00:00",
    "Rows written": 2510,
    "Rows read": 22218,
    Queries: 397,
    "Payments completed": 73,
    "Sign ups": 54,
    Logins: 1184,
    "Sign outs": 927,
    "Support calls": 3,
  },
  {
    date: "2023-09-23T00:00:00",
    "Rows written": 2522,
    "Rows read": 22302,
    Queries: 374,
    "Payments completed": 70,
    "Sign ups": 55,
    Logins: 931,
    "Sign outs": 998,
    "Support calls": 2,
  },
  {
    date: "2023-09-24T00:00:00",
    "Rows written": 2547,
    "Rows read": 22352,
    Queries: 498,
    "Payments completed": 103,
    "Sign ups": 80,
    Logins: 950,
    "Sign outs": 1075,
    "Support calls": 2,
  },
  {
    date: "2023-09-25T00:00:00",
    "Rows written": 2538,
    "Rows read": 22820,
    Queries: 500,
    "Payments completed": 124,
    "Sign ups": 69,
    Logins: 1131,
    "Sign outs": 1099,
    "Support calls": 2,
  },
  {
    date: "2023-09-26T00:00:00",
    "Rows written": 2514,
    "Rows read": 22707,
    Queries: 499,
    "Payments completed": 112,
    "Sign ups": 67,
    Logins: 1013,
    "Sign outs": 1200,
    "Support calls": 2,
  },
  {
    date: "2023-09-27T00:00:00",
    "Rows written": 2503,
    "Rows read": 22818,
    Queries: 495,
    "Payments completed": 118,
    "Sign ups": 74,
    Logins: 1053,
    "Sign outs": 1174,
    "Support calls": 2,
  },
  {
    date: "2023-09-28T00:00:00",
    "Rows written": 2505,
    "Rows read": 22403,
    Queries: 497,
    "Payments completed": 118,
    "Sign ups": 78,
    Logins: 1065,
    "Sign outs": 1181,
    "Support calls": 2,
  },
  {
    date: "2023-09-29T00:00:00",
    "Rows written": 2501,
    "Rows read": 22182,
    Queries: 435,
    "Payments completed": 71,
    "Sign ups": 61,
    Logins: 916,
    "Sign outs": 1179,
    "Support calls": 2,
  },
  {
    date: "2023-09-30T00:00:00",
    "Rows written": 2504,
    "Rows read": 22135,
    Queries: 418,
    "Payments completed": 76,
    "Sign ups": 48,
    Logins: 845,
    "Sign outs": 1198,
    "Support calls": 3,
  },
  {
    date: "2023-10-01T00:00:00",
    "Rows written": 2504,
    "Rows read": 21827,
    Queries: 490,
    "Payments completed": 90,
    "Sign ups": 64,
    Logins: 891,
    "Sign outs": 1189,
    "Support calls": 3,
  },
  {
    date: "2023-10-02T00:00:00",
    "Rows written": 2511,
    "Rows read": 21733,
    Queries: 489,
    "Payments completed": 86,
    "Sign ups": 62,
    Logins: 889,
    "Sign outs": 1186,
    "Support calls": 4,
  },
  {
    date: "2023-10-03T00:00:00",
    "Rows written": 2533,
    "Rows read": 21655,
    Queries: 487,
    "Payments completed": 81,
    "Sign ups": 61,
    Logins: 1002,
    "Sign outs": 1173,
    "Support calls": 4,
  },
  {
    date: "2023-10-04T00:00:00",
    "Rows written": 2551,
    "Rows read": 22072,
    Queries: 490,
    "Payments completed": 103,
    "Sign ups": 64,
    Logins: 887,
    "Sign outs": 1151,
    "Support calls": 6,
  },
  {
    date: "2023-10-05T00:00:00",
    "Rows written": 2568,
    "Rows read": 22724,
    Queries: 489,
    "Payments completed": 83,
    "Sign ups": 63,
    Logins: 863,
    "Sign outs": 1063,
    "Support calls": 9,
  },
  {
    date: "2023-10-06T00:00:00",
    "Rows written": 2588,
    "Rows read": 23121,
    Queries: 378,
    "Payments completed": 92,
    "Sign ups": 49,
    Logins: 849,
    "Sign outs": 1117,
    "Support calls": 11,
  },
  {
    date: "2023-10-07T00:00:00",
    "Rows written": 2609,
    "Rows read": 23546,
    Queries: 447,
    "Payments completed": 68,
    "Sign ups": 54,
    Logins: 924,
    "Sign outs": 1196,
    "Support calls": 13,
  },
  {
    date: "2023-10-08T00:00:00",
    "Rows written": 2619,
    "Rows read": 23939,
    Queries: 485,
    "Payments completed": 81,
    "Sign ups": 61,
    Logins: 1026,
    "Sign outs": 1180,
    "Support calls": 14,
  },
  {
    date: "2023-10-09T00:00:00",
    "Rows written": 2613,
    "Rows read": 24842,
    Queries: 487,
    "Payments completed": 121,
    "Sign ups": 64,
    Logins: 1006,
    "Sign outs": 1181,
    "Support calls": 12,
  },
  {
    date: "2023-10-10T00:00:00",
    "Rows written": 2626,
    "Rows read": 25404,
    Queries: 490,
    "Payments completed": 98,
    "Sign ups": 66,
    Logins: 1027,
    "Sign outs": 1183,
    "Support calls": 13,
  },
  {
    date: "2023-10-11T00:00:00",
    "Rows written": 2639,
    "Rows read": 25232,
    Queries: 488,
    "Payments completed": 117,
    "Sign ups": 66,
    Logins: 983,
    "Sign outs": 1188,
    "Support calls": 11,
  },
  {
    date: "2023-10-12T00:00:00",
    "Rows written": 2643,
    "Rows read": 24786,
    Queries: 489,
    "Payments completed": 99,
    "Sign ups": 79,
    Logins: 848,
    "Sign outs": 1187,
    "Support calls": 12,
  },
  {
    date: "2023-10-13T00:00:00",
    "Rows written": 2666,
    "Rows read": 24905,
    Queries: 381,
    "Payments completed": 67,
    "Sign ups": 59,
    Logins: 857,
    "Sign outs": 1179,
    "Support calls": 7,
  },
  {
    date: "2023-10-14T00:00:00",
    "Rows written": 2703,
    "Rows read": 24710,
    Queries: 430,
    "Payments completed": 67,
    "Sign ups": 57,
    Logins: 928,
    "Sign outs": 1188,
    "Support calls": 3,
  },
  {
    date: "2023-10-15T00:00:00",
    "Rows written": 2729,
    "Rows read": 25132,
    Queries: 488,
    "Payments completed": 99,
    "Sign ups": 64,
    Logins: 845,
    "Sign outs": 1179,
    "Support calls": 2,
  },
  {
    date: "2023-10-16T00:00:00",
    "Rows written": 2737,
    "Rows read": 24724,
    Queries: 487,
    "Payments completed": 119,
    "Sign ups": 64,
    Logins: 879,
    "Sign outs": 1182,
    "Support calls": 2,
  },
  {
    date: "2023-10-17T00:00:00",
    "Rows written": 2730,
    "Rows read": 25172,
    Queries: 486,
    "Payments completed": 119,
    "Sign ups": 64,
    Logins: 862,
    "Sign outs": 1139,
    "Support calls": 2,
  },
  {
    date: "2023-10-18T00:00:00",
    "Rows written": 2737,
    "Rows read": 25762,
    Queries: 485,
    "Payments completed": 121,
    "Sign ups": 62,
    Logins: 895,
    "Sign outs": 1057,
    "Support calls": 2,
  },
  {
    date: "2023-10-19T00:00:00",
    "Rows written": 2738,
    "Rows read": 25469,
    Queries: 487,
    "Payments completed": 97,
    "Sign ups": 64,
    Logins: 998,
    "Sign outs": 1100,
    "Support calls": 2,
  },
  {
    date: "2023-10-20T00:00:00",
    "Rows written": 2724,
    "Rows read": 25948,
    Queries: 409,
    "Payments completed": 70,
    "Sign ups": 67,
    Logins: 940,
    "Sign outs": 1176,
    "Support calls": 2,
  },
  {
    date: "2023-10-21T00:00:00",
    "Rows written": 2722,
    "Rows read": 26662,
    Queries: 401,
    "Payments completed": 69,
    "Sign ups": 61,
    Logins: 971,
    "Sign outs": 1101,
    "Support calls": 2,
  },
  {
    date: "2023-10-22T00:00:00",
    "Rows written": 2737,
    "Rows read": 27288,
    Queries: 493,
    "Payments completed": 98,
    "Sign ups": 69,
    Logins: 924,
    "Sign outs": 1139,
    "Support calls": 2,
  },
  {
    date: "2023-10-23T00:00:00",
    "Rows written": 2737,
    "Rows read": 26813,
    Queries: 493,
    "Payments completed": 119,
    "Sign ups": 63,
    Logins: 844,
    "Sign outs": 1167,
    "Support calls": 3,
  },
  {
    date: "2023-10-24T00:00:00",
    "Rows written": 2755,
    "Rows read": 27228,
    Queries: 493,
    "Payments completed": 113,
    "Sign ups": 78,
    Logins: 879,
    "Sign outs": 1193,
    "Support calls": 3,
  },
  {
    date: "2023-10-25T00:00:00",
    "Rows written": 2742,
    "Rows read": 26723,
    Queries: 494,
    "Payments completed": 102,
    "Sign ups": 75,
    Logins: 871,
    "Sign outs": 1095,
    "Support calls": 2,
  },
  {
    date: "2023-10-26T00:00:00",
    "Rows written": 2715,
    "Rows read": 26364,
    Queries: 494,
    "Payments completed": 121,
    "Sign ups": 75,
    Logins: 961,
    "Sign outs": 1022,
    "Support calls": 2,
  },
  {
    date: "2023-10-27T00:00:00",
    "Rows written": 2692,
    "Rows read": 26686,
    Queries: 442,
    "Payments completed": 94,
    "Sign ups": 63,
    Logins: 848,
    "Sign outs": 1015,
    "Support calls": 2,
  },
  {
    date: "2023-10-28T00:00:00",
    "Rows written": 2690,
    "Rows read": 26161,
    Queries: 389,
    "Payments completed": 108,
    "Sign ups": 48,
    Logins: 857,
    "Sign outs": 1061,
    "Support calls": 2,
  },
  {
    date: "2023-10-30T00:00:00",
    "Rows written": 2710,
    "Rows read": 25456,
    Queries: 496,
    "Payments completed": 94,
    "Sign ups": 62,
    Logins: 874,
    "Sign outs": 1028,
    "Support calls": 2,
  },
  {
    date: "2023-10-31T00:00:00",
    "Rows written": 2728,
    "Rows read": 24798,
    Queries: 493,
    "Payments completed": 85,
    "Sign ups": 68,
    Logins: 933,
    "Sign outs": 1044,
    "Support calls": 2,
  },
  {
    date: "2023-11-01T00:00:00",
    "Rows written": 2756,
    "Rows read": 25010,
    Queries: 496,
    "Payments completed": 90,
    "Sign ups": 71,
    Logins: 845,
    "Sign outs": 955,
    "Support calls": 2,
  },
  {
    date: "2023-11-02T00:00:00",
    "Rows written": 2744,
    "Rows read": 25796,
    Queries: 493,
    "Payments completed": 81,
    "Sign ups": 64,
    Logins: 861,
    "Sign outs": 908,
    "Support calls": 2,
  },
  {
    date: "2023-11-03T00:00:00",
    "Rows written": 2730,
    "Rows read": 25748,
    Queries: 490,
    "Payments completed": 85,
    "Sign ups": 77,
    Logins: 984,
    "Sign outs": 931,
    "Support calls": 3,
  },
  {
    date: "2023-11-04T00:00:00",
    "Rows written": 2745,
    "Rows read": 26054,
    Queries: 412,
    "Payments completed": 81,
    "Sign ups": 64,
    Logins: 955,
    "Sign outs": 911,
    "Support calls": 2,
  },
  {
    date: "2023-11-05T00:00:00",
    "Rows written": 2760,
    "Rows read": 25986,
    Queries: 436,
    "Payments completed": 96,
    "Sign ups": 58,
    Logins: 920,
    "Sign outs": 985,
    "Support calls": 2,
  },
  {
    date: "2023-11-06T00:00:00",
    "Rows written": 2769,
    "Rows read": 25393,
    Queries: 486,
    "Payments completed": 95,
    "Sign ups": 64,
    Logins: 855,
    "Sign outs": 1115,
    "Support calls": 2,
  },
  {
    date: "2023-11-07T00:00:00",
    "Rows written": 2748,
    "Rows read": 24541,
    Queries: 491,
    "Payments completed": 84,
    "Sign ups": 75,
    Logins: 861,
    "Sign outs": 1162,
    "Support calls": 2,
  },
  {
    date: "2023-11-08T00:00:00",
    "Rows written": 2751,
    "Rows read": 24743,
    Queries: 496,
    "Payments completed": 93,
    "Sign ups": 70,
    Logins: 953,
    "Sign outs": 1187,
    "Support calls": 2,
  },
  {
    date: "2023-11-09T00:00:00",
    "Rows written": 2754,
    "Rows read": 24904,
    Queries: 503,
    "Payments completed": 121,
    "Sign ups": 63,
    Logins: 861,
    "Sign outs": 1188,
    "Support calls": 2,
  },
  {
    date: "2023-11-10T00:00:00",
    "Rows written": 2778,
    "Rows read": 24773,
    Queries: 504,
    "Payments completed": 122,
    "Sign ups": 64,
    Logins: 872,
    "Sign outs": 1152,
    "Support calls": 2,
  },
  {
    date: "2023-11-11T00:00:00",
    "Rows written": 2816,
    "Rows read": 23992,
    Queries: 381,
    "Payments completed": 93,
    "Sign ups": 59,
    Logins: 936,
    "Sign outs": 1087,
    "Support calls": 2,
  },
  {
    date: "2023-11-12T00:00:00",
    "Rows written": 2823,
    "Rows read": 23135,
    Queries: 401,
    "Payments completed": 65,
    "Sign ups": 54,
    Logins: 987,
    "Sign outs": 1011,
    "Support calls": 2,
  },
  {
    date: "2023-11-13T00:00:00",
    "Rows written": 2843,
    "Rows read": 22986,
    Queries: 494,
    "Payments completed": 84,
    "Sign ups": 60,
    Logins: 959,
    "Sign outs": 902,
    "Support calls": 2,
  },
  {
    date: "2023-11-14T00:00:00",
    "Rows written": 2865,
    "Rows read": 22974,
    Queries: 492,
    "Payments completed": 81,
    "Sign ups": 69,
    Logins: 998,
    "Sign outs": 909,
    "Support calls": 2,
  },
  {
    date: "2023-11-15T00:00:00",
    "Rows written": 2871,
    "Rows read": 23523,
    Queries: 490,
    "Payments completed": 85,
    "Sign ups": 79,
    Logins: 871,
    "Sign outs": 970,
    "Support calls": 2,
  },
  {
    date: "2023-11-16T00:00:00",
    "Rows written": 2848,
    "Rows read": 23927,
    Queries: 485,
    "Payments completed": 91,
    "Sign ups": 76,
    Logins: 854,
    "Sign outs": 1077,
    "Support calls": 2,
  },
  {
    date: "2023-11-17T00:00:00",
    "Rows written": 2843,
    "Rows read": 23635,
    Queries: 484,
    "Payments completed": 86,
    "Sign ups": 77,
    Logins: 883,
    "Sign outs": 1060,
    "Support calls": 2,
  },
  {
    date: "2023-11-18T00:00:00",
    "Rows written": 2857,
    "Rows read": 23801,
    Queries: 423,
    "Payments completed": 73,
    "Sign ups": 61,
    Logins: 844,
    "Sign outs": 960,
    "Support calls": 2,
  },
  {
    date: "2023-11-19T00:00:00",
    "Rows written": 2890,
    "Rows read": 23932,
    Queries: 410,
    "Payments completed": 70,
    "Sign ups": 51,
    Logins: 881,
    "Sign outs": 935,
    "Support calls": 2,
  },
  {
    date: "2023-11-20T00:00:00",
    "Rows written": 2928,
    "Rows read": 24512,
    Queries: 492,
    "Payments completed": 91,
    "Sign ups": 69,
    Logins: 891,
    "Sign outs": 911,
    "Support calls": 2,
  },
  {
    date: "2023-11-21T00:00:00",
    "Rows written": 2929,
    "Rows read": 24943,
    Queries: 487,
    "Payments completed": 85,
    "Sign ups": 61,
    Logins: 865,
    "Sign outs": 917,
    "Support calls": 2,
  },
  {
    date: "2023-11-22T00:00:00",
    "Rows written": 2927,
    "Rows read": 25053,
    Queries: 484,
    "Payments completed": 108,
    "Sign ups": 61,
    Logins: 859,
    "Sign outs": 904,
    "Support calls": 2,
  },
  {
    date: "2023-11-23T00:00:00",
    "Rows written": 2936,
    "Rows read": 25126,
    Queries: 479,
    "Payments completed": 116,
    "Sign ups": 64,
    Logins: 863,
    "Sign outs": 934,
    "Support calls": 2,
  },
  {
    date: "2023-11-24T00:00:00",
    "Rows written": 2939,
    "Rows read": 24528,
    Queries: 479,
    "Payments completed": 93,
    "Sign ups": 60,
    Logins: 869,
    "Sign outs": 982,
    "Support calls": 2,
  },
  {
    date: "2023-11-25T00:00:00",
    "Rows written": 2917,
    "Rows read": 24379,
    Queries: 366,
    "Payments completed": 64,
    "Sign ups": 50,
    Logins: 870,
    "Sign outs": 927,
    "Support calls": 2,
  },
  {
    date: "2023-11-26T00:00:00",
    "Rows written": 2923,
    "Rows read": 24301,
    Queries: 437,
    "Payments completed": 64,
    "Sign ups": 52,
    Logins: 866,
    "Sign outs": 904,
    "Support calls": 2,
  },
  {
    date: "2023-11-27T00:00:00",
    "Rows written": 2907,
    "Rows read": 24537,
    Queries: 486,
    "Payments completed": 81,
    "Sign ups": 64,
    Logins: 876,
    "Sign outs": 903,
    "Support calls": 3,
  },
  {
    date: "2023-11-28T00:00:00",
    "Rows written": 2919,
    "Rows read": 25358,
    Queries: 486,
    "Payments completed": 124,
    "Sign ups": 68,
    Logins: 1032,
    "Sign outs": 915,
    "Support calls": 4,
  },
  {
    date: "2023-11-29T00:00:00",
    "Rows written": 2949,
    "Rows read": 25428,
    Queries: 482,
    "Payments completed": 113,
    "Sign ups": 64,
    Logins: 1285,
    "Sign outs": 951,
    "Support calls": 4,
  },
  {
    date: "2023-11-30T00:00:00",
    "Rows written": 2957,
    "Rows read": 25179,
    Queries: 478,
    "Payments completed": 121,
    "Sign ups": 66,
    Logins: 1697,
    "Sign outs": 977,
    "Support calls": 4,
  },
  {
    date: "2023-12-01T00:00:00",
    "Rows written": 2937,
    "Rows read": 24846,
    Queries: 478,
    "Payments completed": 117,
    "Sign ups": 63,
    Logins: 2012,
    "Sign outs": 958,
    "Support calls": 5,
  },
  {
    date: "2023-12-02T00:00:00",
    "Rows written": 2949,
    "Rows read": 24979,
    Queries: 359,
    "Payments completed": 106,
    "Sign ups": 49,
    Logins: 2006,
    "Sign outs": 904,
    "Support calls": 6,
  },
  {
    date: "2023-12-03T00:00:00",
    "Rows written": 2941,
    "Rows read": 25038,
    Queries: 442,
    "Payments completed": 104,
    "Sign ups": 45,
    Logins: 1794,
    "Sign outs": 921,
    "Support calls": 4,
  },
  {
    date: "2023-12-04T00:00:00",
    "Rows written": 2951,
    "Rows read": 24652,
    Queries: 486,
    "Payments completed": 116,
    "Sign ups": 66,
    Logins: 1765,
    "Sign outs": 913,
    "Support calls": 4,
  },
  {
    date: "2023-12-05T00:00:00",
    "Rows written": 2941,
    "Rows read": 23863,
    Queries: 487,
    "Payments completed": 96,
    "Sign ups": 68,
    Logins: 1841,
    "Sign outs": 920,
    "Support calls": 4,
  },
  {
    date: "2023-12-06T00:00:00",
    "Rows written": 2941,
    "Rows read": 23307,
    Queries: 490,
    "Payments completed": 82,
    "Sign ups": 63,
    Logins: 2022,
    "Sign outs": 905,
    "Support calls": 2,
  },
  {
    date: "2023-12-07T00:00:00",
    "Rows written": 2950,
    "Rows read": 23317,
    Queries: 489,
    "Payments completed": 84,
    "Sign ups": 76,
    Logins: 1973,
    "Sign outs": 918,
    "Support calls": 2,
  },
  {
    date: "2023-12-08T00:00:00",
    "Rows written": 2943,
    "Rows read": 23254,
    Queries: 484,
    "Payments completed": 82,
    "Sign ups": 73,
    Logins: 1786,
    "Sign outs": 934,
    "Support calls": 2,
  },
  {
    date: "2023-12-09T00:00:00",
    "Rows written": 2945,
    "Rows read": 22527,
    Queries: 428,
    "Payments completed": 84,
    "Sign ups": 55,
    Logins: 1533,
    "Sign outs": 970,
    "Support calls": 2,
  },
  {
    date: "2023-12-10T00:00:00",
    "Rows written": 2960,
    "Rows read": 22319,
    Queries: 409,
    "Payments completed": 106,
    "Sign ups": 48,
    Logins: 1279,
    "Sign outs": 1041,
    "Support calls": 2,
  },
  {
    date: "2023-12-11T00:00:00",
    "Rows written": 2983,
    "Rows read": 21870,
    Queries: 491,
    "Payments completed": 90,
    "Sign ups": 64,
    Logins: 1018,
    "Sign outs": 986,
    "Support calls": 2,
  },
  {
    date: "2023-12-12T00:00:00",
    "Rows written": 2991,
    "Rows read": 21482,
    Queries: 492,
    "Payments completed": 80,
    "Sign ups": 78,
    Logins: 973,
    "Sign outs": 933,
    "Support calls": 2,
  },
  {
    date: "2023-12-13T00:00:00",
    "Rows written": 2991,
    "Rows read": 21630,
    Queries: 497,
    "Payments completed": 84,
    "Sign ups": 73,
    Logins: 857,
    "Sign outs": 973,
    "Support calls": 3,
  },
  {
    date: "2023-12-14T00:00:00",
    "Rows written": 2970,
    "Rows read": 21774,
    Queries: 500,
    "Payments completed": 96,
    "Sign ups": 80,
    Logins: 868,
    "Sign outs": 1084,
    "Support calls": 5,
  },
  {
    date: "2023-12-15T00:00:00",
    "Rows written": 2981,
    "Rows read": 21684,
    Queries: 499,
    "Payments completed": 121,
    "Sign ups": 79,
    Logins: 952,
    "Sign outs": 1086,
    "Support calls": 5,
  },
  {
    date: "2023-12-16T00:00:00",
    "Rows written": 2989,
    "Rows read": 22265,
    Queries: 397,
    "Payments completed": 90,
    "Sign ups": 60,
    Logins: 1118,
    "Sign outs": 1046,
    "Support calls": 2,
  },
  {
    date: "2023-12-17T00:00:00",
    "Rows written": 2977,
    "Rows read": 22417,
    Queries: 426,
    "Payments completed": 66,
    "Sign ups": 48,
    Logins: 1415,
    "Sign outs": 1115,
    "Support calls": 2,
  },
  {
    date: "2023-12-18T00:00:00",
    "Rows written": 2960,
    "Rows read": 22538,
    Queries: 488,
    "Payments completed": 83,
    "Sign ups": 67,
    Logins: 1881,
    "Sign outs": 1113,
    "Support calls": 2,
  },
  {
    date: "2023-12-19T00:00:00",
    "Rows written": 2950,
    "Rows read": 22247,
    Queries: 486,
    "Payments completed": 121,
    "Sign ups": 60,
    Logins: 1911,
    "Sign outs": 1001,
    "Support calls": 2,
  },
  {
    date: "2023-12-20T00:00:00",
    "Rows written": 2919,
    "Rows read": 22166,
    Queries: 487,
    "Payments completed": 125,
    "Sign ups": 60,
    Logins: 1637,
    "Sign outs": 946,
    "Support calls": 2,
  },
  {
    date: "2023-12-21T00:00:00",
    "Rows written": 2912,
    "Rows read": 22083,
    Queries: 483,
    "Payments completed": 121,
    "Sign ups": 62,
    Logins: 1519,
    "Sign outs": 907,
    "Support calls": 2,
  },
  {
    date: "2023-12-22T00:00:00",
    "Rows written": 2933,
    "Rows read": 21697,
    Queries: 480,
    "Payments completed": 119,
    "Sign ups": 61,
    Logins: 1315,
    "Sign outs": 933,
    "Support calls": 2,
  },
  {
    date: "2023-12-23T00:00:00",
    "Rows written": 2918,
    "Rows read": 21487,
    Queries: 391,
    "Payments completed": 94,
    "Sign ups": 52,
    Logins: 1275,
    "Sign outs": 906,
    "Support calls": 2,
  },
  {
    date: "2023-12-24T00:00:00",
    "Rows written": 2891,
    "Rows read": 20748,
    Queries: 398,
    "Payments completed": 68,
    "Sign ups": 57,
    Logins: 1138,
    "Sign outs": 908,
    "Support calls": 2,
  },
  {
    date: "2023-12-25T00:00:00",
    "Rows written": 2858,
    "Rows read": 20147,
    Queries: 495,
    "Payments completed": 89,
    "Sign ups": 65,
    Logins: 1213,
    "Sign outs": 924,
    "Support calls": 2,
  },
  {
    date: "2023-12-26T00:00:00",
    "Rows written": 2858,
    "Rows read": 20262,
    Queries: 489,
    "Payments completed": 98,
    "Sign ups": 60,
    Logins: 1306,
    "Sign outs": 903,
    "Support calls": 2,
  },
  {
    date: "2023-12-27T00:00:00",
    "Rows written": 2847,
    "Rows read": 20921,
    Queries: 483,
    "Payments completed": 81,
    "Sign ups": 65,
    Logins: 1536,
    "Sign outs": 900,
    "Support calls": 2,
  },
  {
    date: "2023-12-28T00:00:00",
    "Rows written": 2845,
    "Rows read": 20830,
    Queries: 482,
    "Payments completed": 87,
    "Sign ups": 63,
    Logins: 1879,
    "Sign outs": 922,
    "Support calls": 3,
  },
  {
    date: "2023-12-29T00:00:00",
    "Rows written": 2827,
    "Rows read": 21133,
    Queries: 482,
    "Payments completed": 99,
    "Sign ups": 60,
    Logins: 2034,
    "Sign outs": 911,
    "Support calls": 2,
  },
  {
    date: "2023-12-30T00:00:00",
    "Rows written": 2826,
    "Rows read": 21097,
    Queries: 427,
    "Payments completed": 94,
    "Sign ups": 53,
    Logins: 2009,
    "Sign outs": 924,
    "Support calls": 2,
  },
  {
    date: "2023-12-31T00:00:00",
    "Rows written": 2808,
    "Rows read": 20776,
    Queries: 399,
    "Payments completed": 81,
    "Sign ups": 49,
    Logins: 2002,
    "Sign outs": 918,
    "Support calls": 2,
  },
  {
    date: "2024-01-01T00:00:00",
    "Rows written": 2790,
    "Rows read": 20855,
    Queries: 494,
    "Payments completed": 87,
    "Sign ups": 66,
    Logins: 2038,
    "Sign outs": 914,
    "Support calls": 2,
  },
  {
    date: "2024-01-02T00:00:00",
    "Rows written": 2778,
    "Rows read": 20444,
    Queries: 490,
    "Payments completed": 81,
    "Sign ups": 65,
    Logins: 1994,
    "Sign outs": 951,
    "Support calls": 2,
  },
  {
    date: "2024-01-03T00:00:00",
    "Rows written": 2788,
    "Rows read": 19651,
    Queries: 491,
    "Payments completed": 86,
    "Sign ups": 60,
    Logins: 1975,
    "Sign outs": 1034,
    "Support calls": 2,
  },
  {
    date: "2024-01-04T00:00:00",
    "Rows written": 2768,
    "Rows read": 18747,
    Queries: 494,
    "Payments completed": 84,
    "Sign ups": 65,
    Logins: 2012,
    "Sign outs": 1015,
    "Support calls": 2,
  },
  {
    date: "2024-01-05T00:00:00",
    "Rows written": 2782,
    "Rows read": 18514,
    Queries: 493,
    "Payments completed": 98,
    "Sign ups": 66,
    Logins: 1944,
    "Sign outs": 1042,
    "Support calls": 2,
  },
  {
    date: "2024-01-06T00:00:00",
    "Rows written": 2777,
    "Rows read": 18686,
    Queries: 379,
    "Payments completed": 106,
    "Sign ups": 55,
    Logins: 1741,
    "Sign outs": 995,
    "Support calls": 2,
  },
  {
    date: "2024-01-07T00:00:00",
    "Rows written": 2785,
    "Rows read": 18779,
    Queries: 431,
    "Payments completed": 92,
    "Sign ups": 52,
    Logins: 1862,
    "Sign outs": 1065,
    "Support calls": 2,
  },
  {
    date: "2024-01-08T00:00:00",
    "Rows written": 2783,
    "Rows read": 18994,
    Queries: 488,
    "Payments completed": 119,
    "Sign ups": 65,
    Logins: 2003,
    "Sign outs": 1028,
    "Support calls": 2,
  },
  {
    date: "2024-01-09T00:00:00",
    "Rows written": 2769,
    "Rows read": 18892,
    Queries: 486,
    "Payments completed": 112,
    "Sign ups": 68,
    Logins: 1975,
    "Sign outs": 1113,
    "Support calls": 2,
  },
  {
    date: "2024-01-10T00:00:00",
    "Rows written": 2739,
    "Rows read": 18785,
    Queries: 485,
    "Payments completed": 121,
    "Sign ups": 63,
    Logins: 2021,
    "Sign outs": 1060,
    "Support calls": 2,
  },
  {
    date: "2024-01-11T00:00:00",
    "Rows written": 2708,
    "Rows read": 18323,
    Queries: 489,
    "Payments completed": 112,
    "Sign ups": 64,
    Logins: 2020,
    "Sign outs": 951,
    "Support calls": 2,
  },
  {
    date: "2024-01-12T00:00:00",
    "Rows written": 2697,
    "Rows read": 18607,
    Queries: 489,
    "Payments completed": 102,
    "Sign ups": 63,
    Logins: 1934,
    "Sign outs": 904,
    "Support calls": 2,
  },
  {
    date: "2024-01-13T00:00:00",
    "Rows written": 2709,
    "Rows read": 18881,
    Queries: 371,
    "Payments completed": 106,
    "Sign ups": 52,
    Logins: 1908,
    "Sign outs": 913,
    "Support calls": 2,
  },
  {
    date: "2024-01-14T00:00:00",
    "Rows written": 2734,
    "Rows read": 18941,
    Queries: 393,
    "Payments completed": 82,
    "Sign ups": 50,
    Logins: 1572,
    "Sign outs": 905,
    "Support calls": 2,
  },
  {
    date: "2024-01-15T00:00:00",
    "Rows written": 2735,
    "Rows read": 19199,
    Queries: 495,
    "Payments completed": 106,
    "Sign ups": 68,
    Logins: 1311,
    "Sign outs": 908,
    "Support calls": 2,
  },
  {
    date: "2024-01-16T00:00:00",
    "Rows written": 2735,
    "Rows read": 19883,
    Queries: 493,
    "Payments completed": 82,
    "Sign ups": 61,
    Logins: 946,
    "Sign outs": 909,
    "Support calls": 3,
  },
  {
    date: "2024-01-17T00:00:00",
    "Rows written": 2720,
    "Rows read": 20709,
    Queries: 495,
    "Payments completed": 86,
    "Sign ups": 61,
    Logins: 878,
    "Sign outs": 910,
    "Support calls": 3,
  },
  {
    date: "2024-01-18T00:00:00",
    "Rows written": 2700,
    "Rows read": 20770,
    Queries: 500,
    "Payments completed": 82,
    "Sign ups": 66,
    Logins: 895,
    "Sign outs": 915,
    "Support calls": 3,
  },
  {
    date: "2024-01-19T00:00:00",
    "Rows written": 2670,
    "Rows read": 20735,
    Queries: 501,
    "Payments completed": 88,
    "Sign ups": 64,
    Logins: 882,
    "Sign outs": 908,
    "Support calls": 2,
  },
  {
    date: "2024-01-20T00:00:00",
    "Rows written": 2672,
    "Rows read": 20107,
    Queries: 425,
    "Payments completed": 67,
    "Sign ups": 54,
    Logins: 852,
    "Sign outs": 929,
    "Support calls": 2,
  },
  {
    date: "2024-01-21T00:00:00",
    "Rows written": 2676,
    "Rows read": 19418,
    Queries: 380,
    "Payments completed": 70,
    "Sign ups": 47,
    Logins: 854,
    "Sign outs": 906,
    "Support calls": 2,
  },
  {
    date: "2024-01-22T00:00:00",
    "Rows written": 2692,
    "Rows read": 19118,
    Queries: 498,
    "Payments completed": 82,
    "Sign ups": 62,
    Logins: 848,
    "Sign outs": 944,
    "Support calls": 3,
  },
  {
    date: "2024-01-23T00:00:00",
    "Rows written": 2691,
    "Rows read": 18577,
    Queries: 495,
    "Payments completed": 88,
    "Sign ups": 78,
    Logins: 872,
    "Sign outs": 1027,
    "Support calls": 5,
  },
  {
    date: "2024-01-24T00:00:00",
    "Rows written": 2703,
    "Rows read": 18052,
    Queries: 493,
    "Payments completed": 109,
    "Sign ups": 69,
    Logins: 875,
    "Sign outs": 1095,
    "Support calls": 5,
  },
  {
    date: "2024-01-25T00:00:00",
    "Rows written": 2735,
    "Rows read": 18108,
    Queries: 491,
    "Payments completed": 80,
    "Sign ups": 76,
    Logins: 914,
    "Sign outs": 1067,
    "Support calls": 4,
  },
  {
    date: "2024-01-26T00:00:00",
    "Rows written": 2733,
    "Rows read": 18137,
    Queries: 488,
    "Payments completed": 80,
    "Sign ups": 78,
    Logins: 959,
    "Sign outs": 1115,
    "Support calls": 4,
  },
  {
    date: "2024-01-27T00:00:00",
    "Rows written": 2724,
    "Rows read": 18116,
    Queries: 432,
    "Payments completed": 65,
    "Sign ups": 53,
    Logins: 1059,
    "Sign outs": 1182,
    "Support calls": 2,
  },
  {
    date: "2024-01-28T00:00:00",
    "Rows written": 2727,
    "Rows read": 18575,
    Queries: 431,
    "Payments completed": 65,
    "Sign ups": 49,
    Logins: 997,
    "Sign outs": 1180,
    "Support calls": 2,
  },
  {
    date: "2024-01-29T00:00:00",
    "Rows written": 2755,
    "Rows read": 19197,
    Queries: 488,
    "Payments completed": 83,
    "Sign ups": 64,
    Logins: 950,
    "Sign outs": 1138,
    "Support calls": 2,
  },
  {
    date: "2024-01-30T00:00:00",
    "Rows written": 2756,
    "Rows read": 19751,
    Queries: 490,
    "Payments completed": 87,
    "Sign ups": 66,
    Logins: 1028,
    "Sign outs": 1108,
    "Support calls": 3,
  },
  {
    date: "2024-01-31T00:00:00",
    "Rows written": 2783,
    "Rows read": 19767,
    Queries: 491,
    "Payments completed": 102,
    "Sign ups": 79,
    Logins: 1198,
    "Sign outs": 1050,
    "Support calls": 5,
  },
  {
    date: "2024-02-01T00:00:00",
    "Rows written": 2778,
    "Rows read": 19305,
    Queries: 491,
    "Payments completed": 81,
    "Sign ups": 76,
    Logins: 1458,
    "Sign outs": 1023,
    "Support calls": 6,
  },
  {
    date: "2024-02-02T00:00:00",
    "Rows written": 2749,
    "Rows read": 19095,
    Queries: 495,
    "Payments completed": 80,
    "Sign ups": 77,
    Logins: 1712,
    "Sign outs": 1052,
    "Support calls": 8,
  },
  {
    date: "2024-02-03T00:00:00",
    "Rows written": 2711,
    "Rows read": 18932,
    Queries: 425,
    "Payments completed": 68,
    "Sign ups": 70,
    Logins: 1704,
    "Sign outs": 1129,
    "Support calls": 7,
  },
  {
    date: "2024-02-04T00:00:00",
    "Rows written": 2719,
    "Rows read": 19181,
    Queries: 369,
    "Payments completed": 69,
    "Sign ups": 62,
    Logins: 1393,
    "Sign outs": 1076,
    "Support calls": 6,
  },
  {
    date: "2024-02-05T00:00:00",
    "Rows written": 2708,
    "Rows read": 19141,
    Queries: 500,
    "Payments completed": 85,
    "Sign ups": 62,
    Logins: 1235,
    "Sign outs": 947,
    "Support calls": 8,
  },
  {
    date: "2024-02-06T00:00:00",
    "Rows written": 2726,
    "Rows read": 19575,
    Queries: 495,
    "Payments completed": 88,
    "Sign ups": 80,
    Logins: 1100,
    "Sign outs": 921,
    "Support calls": 8,
  },
  {
    date: "2024-02-07T00:00:00",
    "Rows written": 2752,
    "Rows read": 20265,
    Queries: 491,
    "Payments completed": 87,
    "Sign ups": 71,
    Logins: 932,
    "Sign outs": 904,
    "Support calls": 10,
  },
  {
    date: "2024-02-08T00:00:00",
    "Rows written": 2754,
    "Rows read": 20236,
    Queries: 485,
    "Payments completed": 83,
    "Sign ups": 75,
    Logins: 868,
    "Sign outs": 917,
    "Support calls": 13,
  },
  {
    date: "2024-02-09T00:00:00",
    "Rows written": 2776,
    "Rows read": 19659,
    Queries: 478,
    "Payments completed": 89,
    "Sign ups": 77,
    Logins: 878,
    "Sign outs": 900,
    "Support calls": 15,
  },
  {
    date: "2024-02-10T00:00:00",
    "Rows written": 2794,
    "Rows read": 19108,
    Queries: 392,
    "Payments completed": 72,
    "Sign ups": 58,
    Logins: 1033,
    "Sign outs": 917,
    "Support calls": 8,
  },
  {
    date: "2024-02-11T00:00:00",
    "Rows written": 2796,
    "Rows read": 18407,
    Queries: 382,
    "Payments completed": 67,
    "Sign ups": 53,
    Logins: 1008,
    "Sign outs": 959,
    "Support calls": 9,
  },
  {
    date: "2024-02-12T00:00:00",
    "Rows written": 2774,
    "Rows read": 18053,
    Queries: 498,
    "Payments completed": 83,
    "Sign ups": 66,
    Logins: 960,
    "Sign outs": 1040,
    "Support calls": 14,
  },
  {
    date: "2024-02-13T00:00:00",
    "Rows written": 2747,
    "Rows read": 18058,
    Queries: 493,
    "Payments completed": 80,
    "Sign ups": 63,
    Logins: 858,
    "Sign outs": 1177,
    "Support calls": 13,
  },
  {
    date: "2024-02-14T00:00:00",
    "Rows written": 2741,
    "Rows read": 18290,
    Queries: 492,
    "Payments completed": 82,
    "Sign ups": 60,
    Logins: 942,
    "Sign outs": 1177,
    "Support calls": 15,
  },
  {
    date: "2024-02-15T00:00:00",
    "Rows written": 2724,
    "Rows read": 18708,
    Queries: 491,
    "Payments completed": 83,
    "Sign ups": 61,
    Logins: 1015,
    "Sign outs": 1150,
    "Support calls": 9,
  },
  {
    date: "2024-02-16T00:00:00",
    "Rows written": 2705,
    "Rows read": 18405,
    Queries: 491,
    "Payments completed": 86,
    "Sign ups": 61,
    Logins: 1067,
    "Sign outs": 1114,
    "Support calls": 5,
  },
  {
    date: "2024-02-17T00:00:00",
    "Rows written": 2699,
    "Rows read": 18713,
    Queries: 372,
    "Payments completed": 73,
    "Sign ups": 53,
    Logins: 1175,
    "Sign outs": 1004,
    "Support calls": 2,
  },
  {
    date: "2024-02-18T00:00:00",
    "Rows written": 2693,
    "Rows read": 18576,
    Queries: 393,
    "Payments completed": 75,
    "Sign ups": 56,
    Logins: 1411,
    "Sign outs": 959,
    "Support calls": 2,
  },
  {
    date: "2024-02-19T00:00:00",
    "Rows written": 2704,
    "Rows read": 18344,
    Queries: 495,
    "Payments completed": 90,
    "Sign ups": 65,
    Logins: 1586,
    "Sign outs": 902,
    "Support calls": 2,
  },
  {
    date: "2024-02-20T00:00:00",
    "Rows written": 2728,
    "Rows read": 18769,
    Queries: 500,
    "Payments completed": 83,
    "Sign ups": 78,
    Logins: 1792,
    "Sign outs": 902,
    "Support calls": 2,
  },
  {
    date: "2024-02-21T00:00:00",
    "Rows written": 2756,
    "Rows read": 19252,
    Queries: 507,
    "Payments completed": 82,
    "Sign ups": 61,
    Logins: 1837,
    "Sign outs": 917,
    "Support calls": 2,
  },
  {
    date: "2024-02-22T00:00:00",
    "Rows written": 2792,
    "Rows read": 19917,
    Queries: 509,
    "Payments completed": 83,
    "Sign ups": 65,
    Logins: 1818,
    "Sign outs": 911,
    "Support calls": 2,
  },
  {
    date: "2024-02-23T00:00:00",
    "Rows written": 2827,
    "Rows read": 20473,
    Queries: 509,
    "Payments completed": 86,
    "Sign ups": 68,
    Logins: 1460,
    "Sign outs": 903,
    "Support calls": 2,
  },
  {
    date: "2024-02-24T00:00:00",
    "Rows written": 2822,
    "Rows read": 21263,
    Queries: 402,
    "Payments completed": 76,
    "Sign ups": 67,
    Logins: 1232,
    "Sign outs": 926,
    "Support calls": 2,
  },
  {
    date: "2024-02-25T00:00:00",
    "Rows written": 2825,
    "Rows read": 22081,
    Queries: 432,
    "Payments completed": 75,
    "Sign ups": 49,
    Logins: 1122,
    "Sign outs": 903,
    "Support calls": 2,
  },
  {
    date: "2024-02-26T00:00:00",
    "Rows written": 2849,
    "Rows read": 22955,
    Queries: 487,
    "Payments completed": 84,
    "Sign ups": 62,
    Logins: 1118,
    "Sign outs": 964,
    "Support calls": 2,
  },
  {
    date: "2024-02-27T00:00:00",
    "Rows written": 2841,
    "Rows read": 23908,
    Queries: 484,
    "Payments completed": 110,
    "Sign ups": 79,
    Logins: 1247,
    "Sign outs": 1048,
    "Support calls": 2,
  },
  {
    date: "2024-02-28T00:00:00",
    "Rows written": 2857,
    "Rows read": 23777,
    Queries: 481,
    "Payments completed": 91,
    "Sign ups": 64,
    Logins: 1231,
    "Sign outs": 1166,
    "Support calls": 2,
  },
  {
    date: "2024-02-29T00:00:00",
    "Rows written": 2878,
    "Rows read": 23296,
    Queries: 484,
    "Payments completed": 89,
    "Sign ups": 79,
    Logins: 991,
    "Sign outs": 1153,
    "Support calls": 2,
  },
  {
    date: "2024-03-01T00:00:00",
    "Rows written": 2881,
    "Rows read": 22647,
    Queries: 483,
    "Payments completed": 110,
    "Sign ups": 71,
    Logins: 865,
    "Sign outs": 1166,
    "Support calls": 3,
  },
  {
    date: "2024-03-02T00:00:00",
    "Rows written": 2887,
    "Rows read": 22725,
    Queries: 363,
    "Payments completed": 100,
    "Sign ups": 65,
    Logins: 855,
    "Sign outs": 1194,
    "Support calls": 3,
  },
  {
    date: "2024-03-03T00:00:00",
    "Rows written": 2869,
    "Rows read": 22226,
    Queries: 393,
    "Payments completed": 91,
    "Sign ups": 64,
    Logins: 859,
    "Sign outs": 1172,
    "Support calls": 2,
  },
  {
    date: "2024-03-04T00:00:00",
    "Rows written": 2877,
    "Rows read": 22120,
    Queries: 495,
    "Payments completed": 122,
    "Sign ups": 61,
    Logins: 867,
    "Sign outs": 1181,
    "Support calls": 2,
  },
  {
    date: "2024-03-05T00:00:00",
    "Rows written": 2875,
    "Rows read": 22533,
    Queries: 494,
    "Payments completed": 109,
    "Sign ups": 60,
    Logins: 879,
    "Sign outs": 1150,
    "Support calls": 2,
  },
  {
    date: "2024-03-06T00:00:00",
    "Rows written": 2860,
    "Rows read": 22166,
    Queries: 489,
    "Payments completed": 98,
    "Sign ups": 65,
    Logins: 869,
    "Sign outs": 1088,
    "Support calls": 2,
  },
  {
    date: "2024-03-07T00:00:00",
    "Rows written": 2872,
    "Rows read": 21895,
    Queries: 482,
    "Payments completed": 104,
    "Sign ups": 77,
    Logins: 877,
    "Sign outs": 1145,
    "Support calls": 2,
  },
  {
    date: "2024-03-08T00:00:00",
    "Rows written": 2852,
    "Rows read": 21563,
    Queries: 479,
    "Payments completed": 82,
    "Sign ups": 73,
    Logins: 852,
    "Sign outs": 1123,
    "Support calls": 2,
  },
  {
    date: "2024-03-09T00:00:00",
    "Rows written": 2822,
    "Rows read": 20981,
    Queries: 409,
    "Payments completed": 76,
    "Sign ups": 49,
    Logins: 979,
    "Sign outs": 1140,
    "Support calls": 2,
  },
  {
    date: "2024-03-10T00:00:00",
    "Rows written": 2835,
    "Rows read": 21256,
    Queries: 387,
    "Payments completed": 68,
    "Sign ups": 50,
    Logins: 1138,
    "Sign outs": 1150,
    "Support calls": 2,
  },
  {
    date: "2024-03-11T00:00:00",
    "Rows written": 2831,
    "Rows read": 21702,
    Queries: 497,
    "Payments completed": 83,
    "Sign ups": 60,
    Logins: 1026,
    "Sign outs": 1084,
    "Support calls": 2,
  },
  {
    date: "2024-03-12T00:00:00",
    "Rows written": 2807,
    "Rows read": 22104,
    Queries: 494,
    "Payments completed": 81,
    "Sign ups": 70,
    Logins: 858,
    "Sign outs": 952,
    "Support calls": 2,
  },
  {
    date: "2024-03-13T00:00:00",
    "Rows written": 2803,
    "Rows read": 22714,
    Queries: 489,
    "Payments completed": 106,
    "Sign ups": 74,
    Logins: 879,
    "Sign outs": 908,
    "Support calls": 2,
  },
  {
    date: "2024-03-14T00:00:00",
    "Rows written": 2825,
    "Rows read": 22484,
    Queries: 483,
    "Payments completed": 116,
    "Sign ups": 72,
    Logins: 844,
    "Sign outs": 917,
    "Support calls": 2,
  },
  {
    date: "2024-03-15T00:00:00",
    "Rows written": 2811,
    "Rows read": 22589,
    Queries: 480,
    "Payments completed": 120,
    "Sign ups": 73,
    Logins: 852,
    "Sign outs": 907,
    "Support calls": 2,
  },
  {
    date: "2024-03-16T00:00:00",
    "Rows written": 2815,
    "Rows read": 21999,
    Queries: 391,
    "Payments completed": 94,
    "Sign ups": 60,
    Logins: 860,
    "Sign outs": 907,
    "Support calls": 2,
  },
  {
    date: "2024-03-17T00:00:00",
    "Rows written": 2842,
    "Rows read": 21627,
    Queries: 440,
    "Payments completed": 92,
    "Sign ups": 69,
    Logins: 920,
    "Sign outs": 932,
    "Support calls": 2,
  },
  {
    date: "2024-03-18T00:00:00",
    "Rows written": 2864,
    "Rows read": 21708,
    Queries: 486,
    "Payments completed": 82,
    "Sign ups": 75,
    Logins: 856,
    "Sign outs": 900,
    "Support calls": 2,
  },
  {
    date: "2024-03-19T00:00:00",
    "Rows written": 2877,
    "Rows read": 21501,
    Queries: 489,
    "Payments completed": 114,
    "Sign ups": 70,
    Logins: 845,
    "Sign outs": 943,
    "Support calls": 2,
  },
  {
    date: "2024-03-20T00:00:00",
    "Rows written": 2900,
    "Rows read": 21927,
    Queries: 489,
    "Payments completed": 107,
    "Sign ups": 80,
    Logins: 848,
    "Sign outs": 903,
    "Support calls": 2,
  },
  {
    date: "2024-03-21T00:00:00",
    "Rows written": 2887,
    "Rows read": 22358,
    Queries: 490,
    "Payments completed": 81,
    "Sign ups": 61,
    Logins: 847,
    "Sign outs": 912,
    "Support calls": 3,
  },
  {
    date: "2024-03-22T00:00:00",
    "Rows written": 2903,
    "Rows read": 22301,
    Queries: 488,
    "Payments completed": 84,
    "Sign ups": 63,
    Logins: 847,
    "Sign outs": 907,
    "Support calls": 3,
  },
  {
    date: "2024-03-23T00:00:00",
    "Rows written": 2920,
    "Rows read": 21875,
    Queries: 420,
    "Payments completed": 66,
    "Sign ups": 61,
    Logins: 852,
    "Sign outs": 903,
    "Support calls": 4,
  },
  {
    date: "2024-03-24T00:00:00",
    "Rows written": 2951,
    "Rows read": 21585,
    Queries: 370,
    "Payments completed": 66,
    "Sign ups": 51,
    Logins: 952,
    "Sign outs": 943,
    "Support calls": 2,
  },
  {
    date: "2024-03-25T00:00:00",
    "Rows written": 2944,
    "Rows read": 20899,
    Queries: 499,
    "Payments completed": 101,
    "Sign ups": 63,
    Logins: 1030,
    "Sign outs": 982,
    "Support calls": 2,
  },
  {
    date: "2024-03-26T00:00:00",
    "Rows written": 2923,
    "Rows read": 20352,
    Queries: 504,
    "Payments completed": 124,
    "Sign ups": 78,
    Logins: 1009,
    "Sign outs": 1087,
    "Support calls": 2,
  },
  {
    date: "2024-03-27T00:00:00",
    "Rows written": 2894,
    "Rows read": 19832,
    Queries: 510,
    "Payments completed": 100,
    "Sign ups": 70,
    Logins: 868,
    "Sign outs": 1190,
    "Support calls": 2,
  },
  {
    date: "2024-03-28T00:00:00",
    "Rows written": 2886,
    "Rows read": 19542,
    Queries: 510,
    "Payments completed": 92,
    "Sign ups": 76,
    Logins: 852,
    "Sign outs": 1199,
    "Support calls": 2,
  },
  {
    date: "2024-03-29T00:00:00",
    "Rows written": 2874,
    "Rows read": 19368,
    Queries: 507,
    "Payments completed": 83,
    "Sign ups": 71,
    Logins: 906,
    "Sign outs": 1103,
    "Support calls": 2,
  },
  {
    date: "2024-03-30T00:00:00",
    "Rows written": 2869,
    "Rows read": 19312,
    Queries: 383,
    "Payments completed": 75,
    "Sign ups": 66,
    Logins: 866,
    "Sign outs": 996,
    "Support calls": 2,
  },
  {
    date: "2024-03-31T00:00:00",
    "Rows written": 2848,
    "Rows read": 19578,
    Queries: 410,
    "Payments completed": 83,
    "Sign ups": 68,
    Logins: 1000,
    "Sign outs": 910,
    "Support calls": 2,
  },
  {
    date: "2024-03-31T00:00:00",
    "Rows written": 2854,
    "Rows read": 19837,
    Queries: 492,
    "Payments completed": 119,
    "Sign ups": 74,
    Logins: 1204,
    "Sign outs": 903,
    "Support calls": 2,
  },
  {
    date: "2024-04-01T00:00:00",
    "Rows written": 2837,
    "Rows read": 19406,
    Queries: 486,
    "Payments completed": 124,
    "Sign ups": 73,
    Logins: 1374,
    "Sign outs": 918,
    "Support calls": 2,
  },
  {
    date: "2024-04-02T00:00:00",
    "Rows written": 2826,
    "Rows read": 19050,
    Queries: 480,
    "Payments completed": 103,
    "Sign ups": 71,
    Logins: 1649,
    "Sign outs": 930,
    "Support calls": 3,
  },
  {
    date: "2024-04-03T00:00:00",
    "Rows written": 2821,
    "Rows read": 18973,
    Queries: 481,
    "Payments completed": 117,
    "Sign ups": 76,
    Logins: 1686,
    "Sign outs": 911,
    "Support calls": 5,
  },
  {
    date: "2024-04-04T00:00:00",
    "Rows written": 2806,
    "Rows read": 18537,
    Queries: 485,
    "Payments completed": 102,
    "Sign ups": 70,
    Logins: 1373,
    "Sign outs": 950,
    "Support calls": 7,
  },
  {
    date: "2024-04-05T00:00:00",
    "Rows written": 2774,
    "Rows read": 18124,
    Queries: 379,
    "Payments completed": 70,
    "Sign ups": 53,
    Logins: 1512,
    "Sign outs": 973,
    "Support calls": 9,
  },
  {
    date: "2024-04-06T00:00:00",
    "Rows written": 2734,
    "Rows read": 18031,
    Queries: 436,
    "Payments completed": 82,
    "Sign ups": 63,
    Logins: 1593,
    "Sign outs": 900,
    "Support calls": 9,
  },
  {
    date: "2024-04-07T00:00:00",
    "Rows written": 2738,
    "Rows read": 18081,
    Queries: 485,
    "Payments completed": 93,
    "Sign ups": 61,
    Logins: 1926,
    "Sign outs": 932,
    "Support calls": 13,
  },
  {
    date: "2024-04-08T00:00:00",
    "Rows written": 2765,
    "Rows read": 18042,
    Queries: 491,
    "Payments completed": 123,
    "Sign ups": 67,
    Logins: 2001,
    "Sign outs": 971,
    "Support calls": 14,
  },
  {
    date: "2024-04-09T00:00:00",
    "Rows written": 2756,
    "Rows read": 18006,
    Queries: 490,
    "Payments completed": 112,
    "Sign ups": 78,
    Logins: 1983,
    "Sign outs": 913,
    "Support calls": 9,
  },
  {
    date: "2024-04-10T00:00:00",
    "Rows written": 2726,
    "Rows read": 18097,
    Queries: 493,
    "Payments completed": 118,
    "Sign ups": 74,
    Logins: 1946,
    "Sign outs": 900,
    "Support calls": 10,
  },
  {
    date: "2024-04-11T00:00:00",
    "Rows written": 2691,
    "Rows read": 18124,
    Queries: 494,
    "Payments completed": 114,
    "Sign ups": 71,
    Logins: 1956,
    "Sign outs": 915,
    "Support calls": 10,
  },
  {
    date: "2024-04-12T00:00:00",
    "Rows written": 2699,
    "Rows read": 18115,
    Queries: 431,
    "Payments completed": 85,
    "Sign ups": 69,
    Logins: 1991,
    "Sign outs": 926,
    "Support calls": 5,
  },
  {
    date: "2024-04-13T00:00:00",
    "Rows written": 2696,
    "Rows read": 18096,
    Queries: 387,
    "Payments completed": 75,
    "Sign ups": 64,
    Logins: 1795,
    "Sign outs": 906,
    "Support calls": 3,
  },
  {
    date: "2024-04-14T00:00:00",
    "Rows written": 2673,
    "Rows read": 18251,
    Queries: 496,
    "Payments completed": 82,
    "Sign ups": 77,
    Logins: 1687,
    "Sign outs": 965,
    "Support calls": 4,
  },
  {
    date: "2024-04-15T00:00:00",
    "Rows written": 2669,
    "Rows read": 18003,
    Queries: 491,
    "Payments completed": 81,
    "Sign ups": 79,
    Logins: 1440,
    "Sign outs": 1023,
    "Support calls": 7,
  },
  {
    date: "2024-04-16T00:00:00",
    "Rows written": 2676,
    "Rows read": 18017,
    Queries: 485,
    "Payments completed": 87,
    "Sign ups": 73,
    Logins: 1589,
    "Sign outs": 1149,
    "Support calls": 11,
  },
  {
    date: "2024-04-17T00:00:00",
    "Rows written": 2654,
    "Rows read": 18088,
    Queries: 485,
    "Payments completed": 81,
    "Sign ups": 75,
    Logins: 1949,
    "Sign outs": 1135,
    "Support calls": 9,
  },
  {
    date: "2024-04-18T00:00:00",
    "Rows written": 2635,
    "Rows read": 18115,
    Queries: 483,
    "Payments completed": 106,
    "Sign ups": 71,
    Logins: 2028,
    "Sign outs": 1159,
    "Support calls": 7,
  },
  {
    date: "2024-04-19T00:00:00",
    "Rows written": 2644,
    "Rows read": 18138,
    Queries: 379,
    "Payments completed": 98,
    "Sign ups": 65,
    Logins: 2036,
    "Sign outs": 1187,
    "Support calls": 3,
  },
  {
    date: "2024-04-20T00:00:00",
    "Rows written": 2672,
    "Rows read": 18004,
    Queries: 441,
    "Payments completed": 101,
    "Sign ups": 68,
    Logins: 1991,
    "Sign outs": 1176,
    "Support calls": 3,
  },
  {
    date: "2024-04-21T00:00:00",
    "Rows written": 2700,
    "Rows read": 18113,
    Queries: 485,
    "Payments completed": 97,
    "Sign ups": 60,
    Logins: 2006,
    "Sign outs": 1174,
    "Support calls": 4,
  },
  {
    date: "2024-04-22T00:00:00",
    "Rows written": 2729,
    "Rows read": 18033,
    Queries: 485,
    "Payments completed": 85,
    "Sign ups": 61,
    Logins: 2006,
    "Sign outs": 1169,
    "Support calls": 6,
  },
  {
    date: "2024-04-23T00:00:00",
    "Rows written": 2735,
    "Rows read": 18083,
    Queries: 486,
    "Payments completed": 85,
    "Sign ups": 80,
    Logins: 1882,
    "Sign outs": 1159,
    "Support calls": 7,
  },
  {
    date: "2024-04-24T00:00:00",
    "Rows written": 2734,
    "Rows read": 18028,
    Queries: 486,
    "Payments completed": 112,
    "Sign ups": 74,
    Logins: 1801,
    "Sign outs": 1040,
    "Support calls": 8,
  },
  {
    date: "2024-04-25T00:00:00",
    "Rows written": 2745,
    "Rows read": 18037,
    Queries: 486,
    "Payments completed": 120,
    "Sign ups": 72,
    Logins: 1453,
    "Sign outs": 944,
    "Support calls": 6,
  },
  {
    date: "2024-04-26T00:00:00",
    "Rows written": 2742,
    "Rows read": 18006,
    Queries: 380,
    "Payments completed": 99,
    "Sign ups": 56,
    Logins: 1264,
    "Sign outs": 992,
    "Support calls": 3,
  },
  {
    date: "2024-04-27T00:00:00",
    "Rows written": 2717,
    "Rows read": 18439,
    Queries: 446,
    "Payments completed": 85,
    "Sign ups": 65,
    Logins: 938,
    "Sign outs": 996,
    "Support calls": 3,
  },
  {
    date: "2024-04-28T00:00:00",
    "Rows written": 2707,
    "Rows read": 18285,
    Queries: 484,
    "Payments completed": 85,
    "Sign ups": 62,
    Logins: 942,
    "Sign outs": 1061,
    "Support calls": 3,
  },
  {
    date: "2024-04-29T00:00:00",
    "Rows written": 2677,
    "Rows read": 18258,
    Queries: 481,
    "Payments completed": 84,
    "Sign ups": 63,
    Logins: 1061,
    "Sign outs": 1089,
    "Support calls": 3,
  },
  {
    date: "2024-04-30T00:00:00",
    "Rows written": 2685,
    "Rows read": 18298,
    Queries: 479,
    "Payments completed": 88,
    "Sign ups": 71,
    Logins: 1289,
    "Sign outs": 1119,
    "Support calls": 2,
  },
  {
    date: "2024-05-01T00:00:00",
    "Rows written": 2687,
    "Rows read": 18361,
    Queries: 479,
    "Payments completed": 88,
    "Sign ups": 78,
    Logins: 1339,
    "Sign outs": 1198,
    "Support calls": 2,
  },
  {
    date: "2024-05-02T00:00:00",
    "Rows written": 2670,
    "Rows read": 18576,
    Queries: 480,
    "Payments completed": 90,
    "Sign ups": 76,
    Logins: 1142,
    "Sign outs": 1145,
    "Support calls": 2,
  },
  {
    date: "2024-05-03T00:00:00",
    "Rows written": 2635,
    "Rows read": 19046,
    Queries: 396,
    "Payments completed": 71,
    "Sign ups": 51,
    Logins: 948,
    "Sign outs": 1049,
    "Support calls": 2,
  },
  {
    date: "2024-05-04T00:00:00",
    "Rows written": 2617,
    "Rows read": 19808,
    Queries: 375,
    "Payments completed": 82,
    "Sign ups": 51,
    Logins: 1018,
    "Sign outs": 1012,
    "Support calls": 2,
  },
  {
    date: "2024-05-05T00:00:00",
    "Rows written": 2627,
    "Rows read": 20325,
    Queries: 498,
    "Payments completed": 90,
    "Sign ups": 64,
    Logins: 1137,
    "Sign outs": 1095,
    "Support calls": 2,
  },
  {
    date: "2024-05-06T00:00:00",
    "Rows written": 2624,
    "Rows read": 20838,
    Queries: 503,
    "Payments completed": 119,
    "Sign ups": 78,
    Logins: 1047,
    "Sign outs": 1196,
    "Support calls": 2,
  },
  {
    date: "2024-05-07T00:00:00",
    "Rows written": 2596,
    "Rows read": 21694,
    Queries: 503,
    "Payments completed": 111,
    "Sign ups": 72,
    Logins: 848,
    "Sign outs": 1199,
    "Support calls": 2,
  },
  {
    date: "2024-05-08T00:00:00",
    "Rows written": 2607,
    "Rows read": 22529,
    Queries: 499,
    "Payments completed": 106,
    "Sign ups": 70,
    Logins: 861,
    "Sign outs": 1102,
    "Support calls": 2,
  },
  {
    date: "2024-05-09T00:00:00",
    "Rows written": 2637,
    "Rows read": 23550,
    Queries: 493,
    "Payments completed": 120,
    "Sign ups": 76,
    Logins: 979,
    "Sign outs": 1126,
    "Support calls": 3,
  },
  {
    date: "2024-05-10T00:00:00",
    "Rows written": 2675,
    "Rows read": 24491,
    Queries: 379,
    "Payments completed": 67,
    "Sign ups": 65,
    Logins: 928,
    "Sign outs": 1070,
    "Support calls": 3,
  },
  {
    date: "2024-05-11T00:00:00",
    "Rows written": 2718,
    "Rows read": 25709,
    Queries: 428,
    "Payments completed": 65,
    "Sign ups": 48,
    Logins: 990,
    "Sign outs": 1068,
    "Support calls": 4,
  },
  {
    date: "2024-05-12T00:00:00",
    "Rows written": 2723,
    "Rows read": 26600,
    Queries: 488,
    "Payments completed": 82,
    "Sign ups": 63,
    Logins: 1122,
    "Sign outs": 1063,
    "Support calls": 5,
  },
  {
    date: "2024-05-13T00:00:00",
    "Rows written": 2715,
    "Rows read": 27252,
    Queries: 490,
    "Payments completed": 83,
    "Sign ups": 64,
    Logins: 1285,
    "Sign outs": 1126,
    "Support calls": 7,
  },
  {
    date: "2024-05-14T00:00:00",
    "Rows written": 2715,
    "Rows read": 27298,
    Queries: 489,
    "Payments completed": 86,
    "Sign ups": 79,
    Logins: 1516,
    "Sign outs": 1200,
    "Support calls": 5,
  },
  {
    date: "2024-05-15T00:00:00",
    "Rows written": 2734,
    "Rows read": 27457,
    Queries: 490,
    "Payments completed": 89,
    "Sign ups": 74,
    Logins: 1803,
    "Sign outs": 1122,
    "Support calls": 4,
  },
  {
    date: "2024-05-16T00:00:00",
    "Rows written": 2765,
    "Rows read": 27539,
    Queries: 486,
    "Payments completed": 88,
    "Sign ups": 73,
    Logins: 2045,
    "Sign outs": 997,
    "Support calls": 2,
  },
]

================
File: src/data/schema.ts
================
export type Usage = {
  owner: string
  status: string
  costs: number
  region: string
  stability: number
  lastEdited: string
}

export type OverviewData = {
  date: string
  "Rows written": number
  "Rows read": number
  Queries: number
  "Payments completed": number
  "Sign ups": number
  Logins: number
  "Sign outs": number
  "Support calls": number
}

export type AirQualityData = {
  date: string
  CO2: number
  Temperature: number
  Humidity: number
  PM2_5: number
  PM10: number
  VOC: number
  Pressure: number
}

================
File: src/lib/chartUtils.ts
================
// Tremor Raw chartColors [v0.0.0]

export type ColorUtility = "bg" | "stroke" | "fill" | "text"

export const chartColors = {
  blue: {
    bg: "bg-blue-500",
    stroke: "stroke-blue-500",
    fill: "fill-blue-500",
    text: "text-blue-500",
  },
  emerald: {
    bg: "bg-emerald-500",
    stroke: "stroke-emerald-500",
    fill: "fill-emerald-500",
    text: "text-emerald-500",
  },
  violet: {
    bg: "bg-violet-500",
    stroke: "stroke-violet-500",
    fill: "fill-violet-500",
    text: "text-violet-500",
  },
  amber: {
    bg: "bg-amber-500",
    stroke: "stroke-amber-500",
    fill: "fill-amber-500",
    text: "text-amber-500",
  },
  gray: {
    bg: "bg-gray-400 dark:bg-gray-600",
    stroke: "stroke-gray-400 dark:stroke-gray-600",
    fill: "fill-gray-400 dark:fill-gray-600",
    text: "text-gray-400 dark:text-gray-600",
  },
  cyan: {
    bg: "bg-cyan-500",
    stroke: "stroke-cyan-500",
    fill: "fill-cyan-500",
    text: "text-cyan-500",
  },
  indigo: {
    bg: "bg-indigo-600 dark:bg-indigo-500",
    stroke: "stroke-indigo-600 dark:stroke-indigo-500",
    fill: "fill-indigo-600 dark:fill-indigo-500",
    text: "text-indigo-600 dark:text-indigo-500",
  },
  pink: {
    bg: "bg-pink-500",
    stroke: "stroke-pink-500",
    fill: "fill-pink-500",
    text: "text-pink-500",
  },
} as const satisfies {
  [color: string]: {
    [key in ColorUtility]: string
  }
}

export type AvailableChartColorsKeys = keyof typeof chartColors

export const AvailableChartColors: AvailableChartColorsKeys[] = Object.keys(
  chartColors,
) as Array<AvailableChartColorsKeys>

export const constructCategoryColors = (
  categories: string[],
  colors: AvailableChartColorsKeys[],
): Map<string, AvailableChartColorsKeys> => {
  const categoryColors = new Map<string, AvailableChartColorsKeys>()
  categories.forEach((category, index) => {
    categoryColors.set(category, colors[index % colors.length])
  })
  return categoryColors
}

export const getColorClassName = (
  color: AvailableChartColorsKeys,
  type: ColorUtility,
): string => {
  const fallbackColor = {
    bg: "bg-gray-500",
    stroke: "stroke-gray-500",
    fill: "fill-gray-500",
    text: "text-gray-500",
  }
  return chartColors[color]?.[type] ?? fallbackColor[type]
}

// Tremor Raw getYAxisDomain [v0.0.0]

export const getYAxisDomain = (
  autoMinValue: boolean,
  minValue: number | undefined,
  maxValue: number | undefined,
) => {
  const minDomain = autoMinValue ? "auto" : (minValue ?? 0)
  const maxDomain = maxValue ?? "auto"
  return [minDomain, maxDomain]
}

// Tremor Raw hasOnlyOneValueForKey [v0.1.0]

export function hasOnlyOneValueForKey(
  array: any[],
  keyToCheck: string,
): boolean {
  const val: any[] = []

  for (const obj of array) {
    if (Object.prototype.hasOwnProperty.call(obj, keyToCheck)) {
      val.push(obj[keyToCheck])
      if (val.length > 1) {
        return false
      }
    }
  }

  return true
}

================
File: src/lib/useOnWindowResize.tsx
================
// Tremor Raw useOnWindowResize [v0.0.0]

import * as React from "react"

export const useOnWindowResize = (handler: { (): void }) => {
  React.useEffect(() => {
    const handleResize = () => {
      handler()
    }
    handleResize()
    window.addEventListener("resize", handleResize)

    return () => window.removeEventListener("resize", handleResize)
  }, [handler])
}

================
File: src/lib/utils.ts
================
// Tremor Raw cx [v0.0.0]

import clsx, { type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cx(...args: ClassValue[]) {
  return twMerge(clsx(...args))
}

// Tremor Raw focusInput [v0.0.1]

export const focusInput = [
  // base
  "focus:ring-2",
  // ring color
  "focus:ring-indigo-200 focus:dark:ring-indigo-700/30",
  // border color
  "focus:border-indigo-500 focus:dark:border-indigo-700",
]

// Tremor Raw focusRing [v0.0.1]

export const focusRing = [
  // base
  "outline outline-offset-2 outline-0 focus-visible:outline-2",
  // outline color
  "outline-indigo-500 dark:outline-indigo-500",
]

// Tremor Raw hasErrorInput [v0.0.1]

export const hasErrorInput = [
  // base
  "ring-2",
  // border color
  "border-red-500 dark:border-red-700",
  // ring color
  "ring-red-200 dark:ring-red-700/30",
]

// Number formatter function

export const usNumberformatter = (number: number, decimals = 0) =>
  Intl.NumberFormat("us", {
    minimumFractionDigits: decimals,
    maximumFractionDigits: decimals,
  })
    .format(Number(number))
    .toString()

export const percentageFormatter = (number: number, decimals = 1) => {
  const formattedNumber = new Intl.NumberFormat("en-US", {
    style: "percent",
    minimumFractionDigits: decimals,
    maximumFractionDigits: decimals,
  }).format(number)
  const symbol = number > 0 && number !== Infinity ? "+" : ""

  return `${symbol}${formattedNumber}`
}

export const millionFormatter = (number: number, decimals = 1) => {
  const formattedNumber = new Intl.NumberFormat("en-US", {
    style: "decimal",
    minimumFractionDigits: decimals,
    maximumFractionDigits: decimals,
  }).format(number)
  return `${formattedNumber}M`
}
export const formatters: { [key: string]: any } = {
  currency: (number: number, currency: string = "USD") =>
    new Intl.NumberFormat("en-US", {
      style: "currency",
      currency: currency,
    }).format(number),
  unit: (number: number) => `${usNumberformatter(number)}`,
}

================
File: .clinerules
================
# Cline's Memory Bank

I am Cline, an expert software engineer with a unique characteristic: my memory resets completely between sessions. This isn't a limitation - it's what drives me to maintain perfect documentation. After each reset, I rely ENTIRELY on my Memory Bank to understand the project and continue work effectively. I MUST read ALL memory bank files at the start of EVERY task - this is not optional.

## Memory Bank Structure

The Memory Bank consists of core files and optional context files, all in Markdown format. Files build upon each other in a clear hierarchy:

flowchart TD
    PB[projectbrief.md] --> PC[productContext.md]
    PB --> SP[systemPatterns.md]
    PB --> TC[techContext.md]
    
    PC --> AC[activeContext.md]
    SP --> AC
    TC --> AC
    
    AC --> P[progress.md]

### Core Files (Required)
1. `projectbrief.md`
   - Foundation document that shapes all other files
   - Created at project start if it doesn't exist
   - Defines core requirements and goals
   - Source of truth for project scope

2. `productContext.md`
   - Why this project exists
   - Problems it solves
   - How it should work
   - User experience goals

3. `activeContext.md`
   - Current work focus
   - Recent changes
   - Next steps
   - Active decisions and considerations
   - Important patterns and preferences
   - Learnings and project insights

4. `systemPatterns.md`
   - System architecture
   - Key technical decisions
   - Design patterns in use
   - Component relationships
   - Critical implementation paths

5. `techContext.md`
   - Technologies used
   - Development setup
   - Technical constraints
   - Dependencies
   - Tool usage patterns

6. `progress.md`
   - What works
   - What's left to build
   - Current status
   - Known issues
   - Evolution of project decisions

### Additional Context
Create additional files/folders within memory-bank/ when they help organize:
- Complex feature documentation
- Integration specifications
- API documentation
- Testing strategies
- Deployment procedures

## Core Workflows

### Plan Mode
flowchart TD
    Start[Start] --> ReadFiles[Read Memory Bank]
    ReadFiles --> CheckFiles{Files Complete?}
    
    CheckFiles -->|No| Plan[Create Plan]
    Plan --> Document[Document in Chat]
    
    CheckFiles -->|Yes| Verify[Verify Context]
    Verify --> Strategy[Develop Strategy]
    Strategy --> Present[Present Approach]

### Act Mode
flowchart TD
    Start[Start] --> Context[Check Memory Bank]
    Context --> Update[Update Documentation]
    Update --> Execute[Execute Task]
    Execute --> Document[Document Changes]

## Documentation Updates

Memory Bank updates occur when:
1. Discovering new project patterns
2. After implementing significant changes
3. When user requests with **update memory bank** (MUST review ALL files)
4. When context needs clarification

flowchart TD
    Start[Update Process]
    
    subgraph Process
        P1[Review ALL Files]
        P2[Document Current State]
        P3[Clarify Next Steps]
        P4[Document Insights & Patterns]
        
        P1 --> P2 --> P3 --> P4
    end
    
    Start --> Process

Note: When triggered by **update memory bank**, I MUST review every memory bank file, even if some don't require updates. Focus particularly on activeContext.md and progress.md as they track current state.

REMEMBER: After every memory reset, I begin completely fresh. The Memory Bank is my only link to previous work. It must be maintained with precision and clarity, as my effectiveness depends entirely on its accuracy.

================
File: .eslintrc.json
================
{
  "extends": "next/core-web-vitals"
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: .prettierrc
================
{
  "printWidth": 80,
  "singleQuote": false,
  "trailingComma": "all",
  "endOfLine": "lf",
  "semi": false,
  "tabWidth": 2,
  "plugins": ["prettier-plugin-tailwindcss"],
  "tailwindFunctions": ["tv", "cx"]
}

================
File: LICENSE.md
================
The MIT License (MIT)

Copyright (c) 2025 Tremor Labs, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */

const nextConfig = {
  redirects: async () => {
    return [
      {
        source: "/",
        destination: "/overview",
        permanent: true,
      },
    ];
  },
};

export default nextConfig;

================
File: package.json
================
{
  "name": "template-dashboard-3",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "generate": "node src/data/generateData.js"
  },
  "dependencies": {
    "@atlaskit/pragmatic-drag-and-drop": "^1.5.2",
    "@atlaskit/pragmatic-drag-and-drop-flourish": "^1.2.2",
    "@atlaskit/pragmatic-drag-and-drop-hitbox": "^1.0.3",
    "@atlaskit/pragmatic-drag-and-drop-live-region": "^1.3.0",
    "@atlaskit/pragmatic-drag-and-drop-react-drop-indicator": "^1.2.0",
    "@internationalized/date": "^3.7.0",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-navigation-menu": "^1.2.5",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-radio-group": "^1.2.3",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-tooltip": "^1.1.8",
    "@react-aria/datepicker": "^3.14.1",
    "@react-stately/datepicker": "^3.13.0",
    "@remixicon/react": "^4.6.0",
    "@tanstack/react-table": "^8.21.2",
    "clsx": "^2.1.1",
    "cobe": "^0.6.3",
    "date-fns": "^3.6.0",
    "next": "14.2.23",
    "next-themes": "^0.4.6",
    "react": "18.2.0",
    "react-day-picker": "^8.10.1",
    "react-dom": "18.2.0",
    "recharts": "^2.15.1",
    "tailwind-merge": "^2.6.0",
    "tailwind-variants": "^0.3.1",
    "tiny-invariant": "^1.3.3",
    "use-debounce": "^10.0.4"
  },
  "devDependencies": {
    "@tailwindcss/forms": "^0.5.10",
    "@types/node": "^22.13.14",
    "@types/react": "18.2.0",
    "@types/react-dom": "18.2.0",
    "@typescript-eslint/parser": "^8.28.0",
    "eslint": "^8.57.1",
    "eslint-config-next": "14.2.23",
    "postcss": "^8.5.3",
    "prettier": "^3.5.3",
    "prettier-plugin-tailwindcss": "^0.6.11",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.8.2"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
# Tremor – Dashboard

`Dashboard` is a SaaS application template from [Tremor](https://tremor.so). It's built
using [`Tremor Raw`](https://raw.tremor.so/docs/getting-started/installation)
and [Next.js](https://nextjs.org).

## Getting started

1. Install the dependencies. We recommend using pnpm. If you want to use `npm`,
   just replace `pnpm` with `npm`.

```bash
pnpm install
```

2. Then, start the development server:

```bash
pnpm run dev
```

3. Visit [http://localhost:3000](http://localhost:3000) in your browser to view
   the template.

## Notes

This project uses
[`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to
automatically optimize and load Inter, a custom Google Font.

This project uses
[`Tremor Raw`](https://raw.tremor.so/docs/getting-started/installation)
components for the UI.

## License

This site template is a commercial product and is licensed under the
[Tremor License](https://blocks.tremor.so/license).

## Learn more

For a deeper understanding of the technologies used in this template, check out
the resources listed below:

- [Tremor Raw](https://raw.tremor.so) - Tremor Raw documentation
- [Tailwind CSS](https://tailwindcss.com) - A utility-first CSS framework
- [Next.js](https://nextjs.org/docs) - Next.js documentation
- [Radix UI](https://www.radix-ui.com) - Radix UI Website
- [Recharts](https://recharts.org) - Recharts documentation and website
- [Tanstack](https://tanstack.com/table/latest) - TanStack table documentation

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss"

const config: Config = {
  darkMode: "selector",
  content: ["./src/**/*.{js,ts,jsx,tsx,mdx}"],
  theme: {
    fontFamily: {
      sans: ['var(--font-colfax)', 'ui-sans-serif', 'system-ui', 'sans-serif'],
      heading: ['var(--font-barlow)', 'ui-sans-serif', 'system-ui', 'sans-serif'],
    },
    extend: {
      gridTemplateColumns: {
        '24': 'repeat(24, minmax(0, 1fr))',
      },
      keyframes: {
        hide: {
          from: { opacity: "1" },
          to: { opacity: "0" },
        },
        slideDownAndFade: {
          from: { opacity: "0", transform: "translateY(-6px)" },
          to: { opacity: "1", transform: "translateY(0)" },
        },
        slideLeftAndFade: {
          from: { opacity: "0", transform: "translateX(6px)" },
          to: { opacity: "1", transform: "translateX(0)" },
        },
        slideUpAndFade: {
          from: { opacity: "0", transform: "translateY(6px)" },
          to: { opacity: "1", transform: "translateY(0)" },
        },
        slideRightAndFade: {
          from: { opacity: "0", transform: "translateX(-6px)" },
          to: { opacity: "1", transform: "translateX(0)" },
        },
        dialogOverlayShow: {
          from: { opacity: "0" },
          to: { opacity: "1" },
        },
        dialogContentShow: {
          from: {
            opacity: "0",
            transform: "translate(-50%, -45%) scale(0.95)",
          },
          to: { opacity: "1", transform: "translate(-50%, -50%) scale(1)" },
        },
        drawerSlideLeftAndFade: {
          from: { opacity: "0", transform: "translateX(50%)" },
          to: { opacity: "1", transform: "translateX(0)" },
        },
      },
      animation: {
        hide: "hide 150ms cubic-bezier(0.16, 1, 0.3, 1)",
        slideDownAndFade:
          "slideDownAndFade 150ms cubic-bezier(0.16, 1, 0.3, 1)",
        slideLeftAndFade:
          "slideLeftAndFade 150ms cubic-bezier(0.16, 1, 0.3, 1)",
        slideUpAndFade: "slideUpAndFade 150ms cubic-bezier(0.16, 1, 0.3, 1)",
        slideRightAndFade:
          "slideRightAndFade 150ms cubic-bezier(0.16, 1, 0.3, 1)",
        drawerSlideLeftAndFade:
          "drawerSlideLeftAndFade 150ms cubic-bezier(0.16, 1, 0.3, 1)",
        dialogOverlayShow:
          "dialogOverlayShow 150ms cubic-bezier(0.16, 1, 0.3, 1)",
        dialogContentShow:
          "dialogContentShow 150ms cubic-bezier(0.16, 1, 0.3, 1)",
      },
    },
  },
  plugins: [require("@tailwindcss/forms")],
}
export default config

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "allowUnusedLabels": false,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="memory-bank/productContext.md">
# Product Context

## Purpose
The Tremor Dashboard template exists to provide developers with a high-quality, ready-to-use foundation for building modern SaaS dashboards. It eliminates the need to build common dashboard components from scratch, allowing developers to focus on their specific business logic and unique features.

## Problems Solved

### For Developers
- **Reduced Development Time**: Eliminates the need to build common dashboard UI components from scratch
- **Best Practices Implementation**: Provides a structure that follows modern React and Next.js patterns
- **Accessibility Built-in**: Components are built with accessibility in mind using Radix UI
- **Responsive Design**: Already optimized for various screen sizes
- **Data Visualization Ready**: Integrated with Recharts for common chart types

### For Businesses
- **Professional UI**: Provides a polished, professional look without extensive design work
- **Consistent Experience**: Ensures a cohesive user experience across the application
- **Scalable Foundation**: Built to accommodate growing feature sets and data complexity
- **Quick Time-to-Market**: Reduces the time needed to launch a dashboard product

## User Experience Goals

### Primary Users: Administrators & Analysts
- **Efficient Data Access**: Quick access to key metrics and detailed data
- **Intuitive Navigation**: Clear pathways to different sections of the application
- **Actionable Insights**: Visual representations that highlight important trends
- **Customizable Views**: Ability to filter and sort data to find relevant information
- **Administrative Control**: Easy management of settings, users, and billing

### Secondary Users: Developers
- **Maintainable Code**: Clean structure that's easy to extend and modify
- **Component Reusability**: Well-designed components that can be reused across the application
- **Clear Documentation**: Understanding of how components work together
- **Customization Options**: Easy ways to adapt the template to specific needs

## Product Vision
The Tremor Dashboard aims to be the go-to starting point for any SaaS dashboard project, providing a perfect balance between:
- **Structure**: Offering enough organization to be immediately useful
- **Flexibility**: Remaining adaptable to diverse use cases
- **Quality**: Maintaining high standards in code, design, and user experience
- **Simplicity**: Keeping the learning curve manageable for new developers

## Key Differentiators
- Built with Tremor Raw components for consistent, high-quality UI
- Integration of modern React patterns and libraries
- Focus on both developer experience and end-user experience
- Comprehensive component set covering most dashboard needs
- Thoughtful organization of code and features
</file>

<file path="memory-bank/projectbrief.md">
# Project Brief

## Project Overview
This is a template dashboard application built with Next.js, React, TypeScript, and Tailwind CSS. It serves as a SaaS application template from Tremor, designed to provide a comprehensive dashboard interface for various business needs.

## Core Requirements & Goals
- Provide a modern, responsive dashboard interface
- Demonstrate best practices for Next.js and React development
- Showcase various UI components and data visualization techniques
- Serve as a starting point for custom dashboard applications

## Target Audience
- Developers building SaaS applications
- Businesses needing admin dashboards
- Teams requiring data visualization interfaces

## Key Features
- Overview dashboard with charts and metrics
- Detailed data views and tables
- Settings management (general, billing, users)
- Responsive design for all device sizes
- Modern UI components

## Technical Requirements
- Built with Next.js, React, TypeScript
- Styled with Tailwind CSS
- Uses Radix UI for accessible components
- Recharts for data visualization
- TanStack Table for data tables

## Project Scope
This template provides a foundation for building custom dashboard applications. It includes:
- Page layouts and navigation
- UI components library
- Data visualization examples
- Table implementations
- Settings management interfaces

## Success Criteria
- Clean, maintainable code structure
- Responsive design across all device sizes
- Accessible UI components
- Performant rendering of data visualizations
- Easy customization for specific use cases
</file>

<file path="memory-bank/systemPatterns.md">
# System Patterns

## System Architecture

### Next.js App Router Structure
The project uses Next.js with the App Router pattern, organizing pages and layouts in a nested structure:
- `src/app/` - Root application directory
  - `(main)/` - Main application routes (overview, details)
  - `settings/` - Settings-related routes
  - `layout.tsx` - Root layout with global providers
  - `globals.css` - Global styles
  - `siteConfig.ts` - Site-wide configuration

### Component Organization
- `src/components/` - Reusable UI components
  - Base components (Button, Input, etc.)
  - Complex components (Calendar, LineChart, etc.)
  - `ui/` - Specialized UI components
    - `data-table/` - Table-related components
    - `icons/` - Icon components
    - `navigation/` - Navigation components
    - `overview/` - Dashboard-specific components
    - `settings/` - Settings-specific components

### Data Management
- `src/data/` - Data-related files
  - `data.ts` - Main data structures
  - `generateData.js` - Data generation utilities
  - `overview-data.ts` - Dashboard-specific data
  - `schema.ts` - Data type definitions

### Utilities
- `src/lib/` - Utility functions and hooks
  - `chartUtils.ts` - Chart-related utilities
  - `useOnWindowResize.tsx` - Window resize hook
  - `utils.ts` - General utility functions

## Key Technical Decisions

### Framework Selection
- **Next.js**: Chosen for server-side rendering capabilities, routing, and overall React framework
- **TypeScript**: Used for type safety and better developer experience
- **Tailwind CSS**: Selected for utility-first styling approach

### UI Component Strategy
- **Radix UI**: Used as the foundation for accessible, unstyled components
- **Custom Components**: Built on top of Radix UI with Tailwind styling
- **Component Composition**: Complex UI elements composed from simpler components

### Data Visualization
- **Recharts**: Chosen for flexible, React-based charting library
- **Custom Chart Wrappers**: Added to provide consistent styling and behavior

### Data Management
- **TanStack Table**: Used for advanced table functionality
- **Static Data Generation**: Sample data generated for demonstration purposes

### State Management
- **React Hooks**: Used for component-level state
- **Context API**: Used for theme and potentially other global state

## Design Patterns

### Component Patterns
- **Compound Components**: Used for complex UI elements with multiple parts
- **Render Props**: Used in some components for flexible rendering
- **Custom Hooks**: Encapsulating reusable logic

### Layout Patterns
- **Nested Layouts**: Using Next.js App Router for shared layouts
- **Responsive Design**: Mobile-first approach with breakpoints
- **Grid System**: Using Tailwind's grid utilities

### Data Patterns
- **Data Fetching**: Structured for compatibility with various data sources
- **Data Transformation**: Utilities for formatting and processing data
- **Type Safety**: Strong typing throughout the application

### Navigation Patterns
- **Hierarchical Navigation**: Main sections with sub-sections
- **Sidebar Navigation**: Primary navigation method
- **Breadcrumbs**: For context within nested pages

## Component Relationships

### Layout Hierarchy
```
RootLayout
├── MainLayout (for main content pages)
│   ├── Overview Page
│   └── Details Page
└── SettingsLayout (for settings pages)
    ├── General Settings Page
    ├── Billing Settings Page
    └── Users Settings Page
```

### Component Dependencies
- UI components have minimal dependencies on application logic
- Data visualization components depend on data formatting utilities
- Navigation components depend on route configuration

## Critical Implementation Paths

### Rendering Flow
1. Next.js server components render the initial HTML
2. Client components hydrate with interactivity
3. Data is loaded and displayed in tables and charts

### User Interaction Flow
1. User navigates via sidebar or navigation components
2. Content is loaded for the selected section
3. User interacts with data visualizations or tables
4. Settings changes update application state

### Customization Flow
1. Modify theme variables in Tailwind configuration
2. Update component styles using Tailwind classes
3. Extend or modify data structures
4. Add new pages following the established patterns
</file>

<file path="public/DatabaseLogo.tsx">
import * as React from "react"
import type { SVGProps } from "react"
export const DatabaseLogo = (props: SVGProps<SVGSVGElement>) => (
  <svg aria-hidden="true" fill="none" viewBox="0 0 200 44" {...props}>
    <mask
      id="mask0_9418_64"
      width={44}
      height={44}
      x={0}
      y={0}
      maskUnits="userSpaceOnUse"
      style={{
        maskType: "luminance",
      }}
    >
      <path fill="white" d="M44 0H0V44H44V0Z" />
    </mask>
    <g mask="url(#mask0_9418_64)">
      <path
        fill="#6366F1"
        d="M27.2694 2.12169L23.0486 0.990723L19.4917 14.2654L16.2804 2.28093L12.0595 3.4119L15.5291 16.3602L6.88724 7.71841L3.79738 10.8083L13.2764 20.2874L1.47179 17.1243L0.34082 21.3451L13.2388 24.8011C13.0912 24.1642 13.0131 23.5006 13.0131 22.8187C13.0131 17.992 16.9258 14.0792 21.7525 14.0792C26.5792 14.0792 30.492 17.992 30.492 22.8187C30.492 23.4962 30.4148 24.1557 30.269 24.7889L41.9909 27.9297L43.1218 23.709L30.1725 20.2392L41.9779 17.0759L40.8469 12.8551L27.8981 16.3247L36.54 7.68293L33.4501 4.59307L24.1026 13.9406L27.2694 2.12169Z"
      />
      <path
        fill="#6366F1"
        d="M30.2567 24.8379C29.8948 26.3679 29.1308 27.7423 28.0825 28.8434L36.5745 37.3356L39.6644 34.2457L30.2567 24.8379Z"
      />
      <path
        fill="#6366F1"
        d="M27.997 28.9321C26.9361 30.0157 25.5953 30.8243 24.0918 31.2411L27.1819 42.7733L31.4027 41.6423L27.997 28.9321Z"
      />
      <path
        fill="#6366F1"
        d="M23.9342 31.2835C23.2366 31.4628 22.5055 31.5581 21.752 31.5581C20.9448 31.5581 20.1631 31.4486 19.421 31.2437L16.3281 42.7866L20.5489 43.9175L23.9342 31.2835Z"
      />
      <path
        fill="#6366F1"
        d="M19.2715 31.201C17.791 30.7636 16.4741 29.9446 15.4348 28.8579L6.92188 37.3709L10.0118 40.4607L19.2715 31.201Z"
      />
      <path
        fill="#6366F1"
        d="M15.3647 28.783C14.3432 27.6894 13.5992 26.3334 13.2451 24.8271L1.48486 27.9782L2.61582 32.199L15.3647 28.783Z"
      />
    </g>
    <path
      fill="currentColor"
      d="M63.7538 32.4108C59.2346 32.4108 55.6318 28.5868 55.6318 23.8464C55.6318 19.1059 59.2346 15.2187 63.7538 15.2187C66.5665 15.2187 68.0519 16.3564 68.9367 18.0946V8.92969H73.2032V32H69.0632V29.3137C68.1783 31.1783 66.6929 32.4108 63.7538 32.4108ZM59.8983 23.8148C59.8983 26.3114 61.7312 28.5552 64.4491 28.5552C67.2618 28.5552 69.0632 26.4062 69.0632 23.8464C69.0632 21.2865 67.2618 19.0743 64.4491 19.0743C61.7312 19.0743 59.8983 21.2549 59.8983 23.8148Z"
    />
    <path
      fill="currentColor"
      d="M83.228 32.4108C78.7088 32.4108 75.106 28.5868 75.106 23.8464C75.106 19.1059 78.7088 15.2187 83.228 15.2187C86.0723 15.2187 87.5576 16.388 88.4425 18.1578V15.5663H92.6774V32H88.5373V29.3137C87.6525 31.1783 86.1671 32.4108 83.228 32.4108ZM79.3724 23.8148C79.3724 26.3114 81.2054 28.5552 83.9233 28.5552C86.736 28.5552 88.5373 26.4062 88.5373 23.8464C88.5373 21.2865 86.736 19.0743 83.9233 19.0743C81.2054 19.0743 79.3724 21.2549 79.3724 23.8148Z"
    />
    <path
      fill="currentColor"
      d="M101.438 32C98.183 32 96.4132 30.483 96.4132 26.9119V19.2007H94.1062V15.5663H96.4132V12.248L100.68 11.8056V15.5663H104.156V19.2007H100.68V26.6906C100.68 27.7335 101.185 28.2076 102.007 28.2076H103.777V32H101.438Z"
    />
    <path
      fill="currentColor"
      d="M112.64 32.4108C108.121 32.4108 104.518 28.5868 104.518 23.8464C104.518 19.1059 108.121 15.2187 112.64 15.2187C115.484 15.2187 116.97 16.388 117.854 18.1578V15.5663H122.089V32H117.949V29.3137C117.064 31.1783 115.579 32.4108 112.64 32.4108ZM108.784 23.8148C108.784 26.3114 110.617 28.5552 113.335 28.5552C116.148 28.5552 117.949 26.4062 117.949 23.8464C117.949 21.2865 116.148 19.0743 113.335 19.0743C110.617 19.0743 108.784 21.2549 108.784 23.8148Z"
    />
    <path
      fill="currentColor"
      d="M134.073 32.4108C131.134 32.4108 129.649 31.1783 128.764 29.3137V32H124.624V8.92969H128.891V18.0946C129.775 16.3564 131.261 15.2187 134.073 15.2187C138.593 15.2187 142.195 19.1059 142.195 23.8464C142.195 28.5868 138.593 32.4108 134.073 32.4108ZM128.764 23.8464C128.764 26.4062 130.566 28.5552 133.378 28.5552C136.096 28.5552 137.929 26.3114 137.929 23.8148C137.929 21.2549 136.096 19.0743 133.378 19.0743C130.566 19.0743 128.764 21.2865 128.764 23.8464Z"
    />
    <path
      fill="currentColor"
      d="M151.434 32.4108C146.915 32.4108 143.312 28.5868 143.312 23.8464C143.312 19.1059 146.915 15.2187 151.434 15.2187C154.278 15.2187 155.764 16.388 156.648 18.1578V15.5663H160.883V32H156.743V29.3137C155.858 31.1783 154.373 32.4108 151.434 32.4108ZM147.578 23.8148C147.578 26.3114 149.411 28.5552 152.129 28.5552C154.942 28.5552 156.743 26.4062 156.743 23.8464C156.743 21.2865 154.942 19.0743 152.129 19.0743C149.411 19.0743 147.578 21.2549 147.578 23.8148Z"
    />
    <path
      fill="currentColor"
      d="M169.044 32.4108C166.262 32.4108 164.019 31.4627 162.217 29.5349L165.093 26.9119C166.294 28.2708 167.558 28.9345 168.949 28.9345C170.402 28.9345 171.224 28.2076 171.224 27.2279C171.224 26.3746 170.813 25.9006 168.222 25.3001C163.829 24.2572 163.165 22.2662 163.165 20.1804C163.165 17.3045 165.441 15.1555 169.296 15.1555C171.951 15.1555 173.721 15.8192 175.396 17.9998L172.299 20.37C171.509 19.1059 170.497 18.6002 169.391 18.6002C168.222 18.6002 167.337 19.0427 167.337 20.054C167.337 20.6228 167.59 21.1285 169.549 21.6341C174.321 22.8667 175.427 24.6364 175.427 27.1015C175.427 30.1354 172.678 32.4108 169.044 32.4108Z"
    />
    <path
      fill="currentColor"
      d="M184.959 32.4108C179.871 32.4108 176.458 28.5552 176.458 23.8148C176.458 19.0743 180.029 15.1555 184.959 15.1555C189.89 15.1555 193.303 19.0743 193.303 23.8148C193.303 24.2888 193.271 24.7944 193.176 25.3317H180.883C181.357 27.2595 182.81 28.6184 184.959 28.6184C186.792 28.6184 188.215 27.6703 188.973 26.4062L192.291 28.9029C190.964 30.9571 188.215 32.4108 184.959 32.4108ZM180.883 22.1398H189.005C188.531 20.3068 186.982 18.8215 184.896 18.8215C182.874 18.8215 181.357 20.1804 180.883 22.1398Z"
    />
  </svg>
)
</file>

<file path="src/app/(main)/air-quality/page.tsx">
"use client"
import { AirQualityChartCard } from "@/components/ui/air-quality/AirQualityChartCard"
import { AirQualityGaugeCard } from "@/components/ui/air-quality/AirQualityGaugeCard"
import { AirQualityHeatmapCard } from "@/components/ui/air-quality/AirQualityHeatmapCard"
import { Filterbar } from "@/components/ui/overview/DashboardFilterbar"
import { AirQualityData } from "@/data/schema"
import { cx } from "@/lib/utils"
import { subDays } from "date-fns"
import React from "react"
import { DateRange } from "react-day-picker"

export type PeriodValue = "previous-period" | "last-year" | "no-comparison"

const categories: {
    title: keyof AirQualityData
    type: "level" | "temperature" | "percent" | "pressure"
}[] = [
        {
            title: "CO2",
            type: "level",
        },
        {
            title: "Temperature",
            type: "temperature",
        },
        {
            title: "Humidity",
            type: "percent",
        },
        {
            title: "PM2_5",
            type: "level",
        },
        {
            title: "PM10",
            type: "level",
        },
        {
            title: "VOC",
            type: "level",
        },
        {
            title: "Pressure",
            type: "pressure",
        },
    ]

export type SensorReading = {
    title: string
    value: number
    status: "normal" | "warning" | "critical"
    unit: string
}

const currentReadings: SensorReading[] = [
    {
        title: "CO2",
        value: 680,
        status: "normal",
        unit: "ppm",
    },
    {
        title: "Temperature",
        value: 23.2,
        status: "normal",
        unit: "°C",
    },
    {
        title: "Humidity",
        value: 42.5,
        status: "normal",
        unit: "%",
    },
]

const roomReadings: SensorReading[] = [
    {
        title: "Living Room",
        value: 680,
        status: "normal",
        unit: "ppm",
    },
    {
        title: "Bedroom",
        value: 825,
        status: "warning",
        unit: "ppm",
    },
    {
        title: "Kitchen",
        value: 910,
        status: "warning",
        unit: "ppm",
    },
]

// Calculate maxDate as today
const today = new Date()

export default function AirQualityDashboard() {
    const [selectedDates, setSelectedDates] = React.useState<
        DateRange | undefined
    >({
        from: subDays(today, 7),
        to: today,
    })
    const [selectedPeriod, setSelectedPeriod] =
        React.useState<PeriodValue>("previous-period")

    const [selectedCategories, setSelectedCategories] = React.useState<string[]>(
        categories.map((category) => category.title),
    )

    return (
        <>
            <div className="flex items-center gap-3">
                <div className="rounded-full bg-green-100 p-2 dark:bg-green-900">
                    <div className="h-3 w-3 rounded-full bg-green-500"></div>
                </div>
                <h1 className="text-xl font-semibold text-gray-900 dark:text-gray-50 font-heading">
                    Air Quality Monitoring
                </h1>
            </div>

            <section aria-labelledby="current-air-quality">
                <h2
                    id="current-air-quality"
                    className="mt-8 scroll-mt-10 text-lg tracking-normal font-semibold text-gray-900 sm:text-xl dark:text-gray-50 font-heading"
                >
                    CURRENT READINGS
                </h2>
                <div className="mt-4 grid grid-cols-1 gap-6 sm:mt-6 sm:grid-cols-2 lg:mt-8 xl:grid-cols-3">
                    <AirQualityGaugeCard
                        title="Air Quality"
                        value="Good"
                        valueDescription="Current air quality status"
                        ctaDescription="Last updated at 3:45 PM"
                        ctaText="View details"
                        ctaLink="#"
                        data={currentReadings}
                    />
                    <AirQualityGaugeCard
                        title="CO2 by Room"
                        value="825"
                        valueDescription="Average CO2 level (ppm)"
                        ctaDescription="2 rooms require ventilation"
                        ctaText="View all rooms"
                        ctaLink="#"
                        data={roomReadings}
                    />
                    <AirQualityHeatmapCard
                        title="24-hour Heatmap"
                        subtitle="CO2 levels (ppm)"
                        description="Today's hourly CO2 readings"
                    />
                </div>
            </section>

            <section aria-labelledby="air-quality-trends">
                <h2
                    id="air-quality-trends"
                    className="mt-16 scroll-mt-8 text-lg font-semibold text-gray-900 sm:text-xl dark:text-gray-50 font-heading"
                >
                    Air Quality Trends
                </h2>
                <div className="sticky top-16 z-20 flex items-center justify-between border-b border-gray-200 bg-white pb-4 pt-4 sm:pt-6 lg:top-0 lg:mx-0 lg:px-0 lg:pt-8 dark:border-gray-800 dark:bg-gray-950">
                    <Filterbar
                        maxDate={today}
                        minDate={subDays(today, 30)}
                        selectedDates={selectedDates}
                        onDatesChange={(dates) => setSelectedDates(dates)}
                        selectedPeriod={selectedPeriod}
                        onPeriodChange={(period) => setSelectedPeriod(period)}
                        categories={categories as any}
                        setSelectedCategories={setSelectedCategories}
                        selectedCategories={selectedCategories}
                    />
                </div>
                <dl
                    className={cx(
                        "mt-10 grid grid-cols-1 gap-8 sm:grid-cols-1 md:grid-cols-2 xl:grid-cols-3",
                    )}
                >
                    {categories
                        .filter((category) => selectedCategories.includes(category.title))
                        .map((category) => {
                            return (
                                <AirQualityChartCard
                                    key={category.title}
                                    title={category.title}
                                    type={category.type}
                                    selectedDates={selectedDates}
                                    selectedPeriod={selectedPeriod}
                                />
                            )
                        })}
                </dl>
            </section>
        </>
    )
}
</file>

<file path="src/app/(main)/layout.tsx">
export default function Layout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <div className="relative">
      <div className="p-4 sm:px-6 sm:pb-10 sm:pt-10 lg:px-10 lg:pt-7">
        {children}
      </div>
    </div>
  )
}
</file>

<file path="src/app/settings/users/page.tsx">
"use client"

import { Button } from "@/components/Button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/Dropdown"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/Select"
import { Tooltip } from "@/components/Tooltip"
import { ModalAddUser } from "@/components/ui/settings/ModalAddUser"
import { invitedUsers, roles, users } from "@/data/data"
import { RiAddLine, RiMore2Fill } from "@remixicon/react"

export default function Users() {
  return (
    <>
      <section aria-labelledby="existing-users">
        <div className="sm:flex sm:items-center sm:justify-between">
          <div>
            <h3
              id="existing-users"
              className="scroll-mt-10 font-semibold text-gray-900 dark:text-gray-50"
            >
              Users
            </h3>
            <p className="text-sm leading-6 text-gray-500">
              Workspace administrators can add, manage, and remove users.
            </p>
          </div>
          <ModalAddUser>
            <Button className="mt-4 w-full gap-2 sm:mt-0 sm:w-fit">
              <RiAddLine className="-ml-1 size-4 shrink-0" aria-hidden="true" />
              Add user
            </Button>
          </ModalAddUser>
        </div>
        <ul
          role="list"
          className="mt-6 divide-y divide-gray-200 dark:divide-gray-800"
        >
          {users.map((user) => (
            <li
              key={user.name}
              className="flex items-center justify-between gap-x-6 py-2.5"
            >
              <div className="flex items-center gap-x-4 truncate">
                <span
                  className="hidden size-9 shrink-0 items-center justify-center rounded-full border border-gray-300 bg-white text-xs text-gray-700 sm:flex dark:border-gray-800 dark:bg-gray-950 dark:text-gray-300"
                  aria-hidden="true"
                >
                  {user.initials}
                </span>
                <div className="truncate">
                  <p className="truncate text-sm font-medium text-gray-900 dark:text-gray-50">
                    {user.name}
                  </p>
                  <p className="truncate text-xs text-gray-500">{user.email}</p>
                </div>
              </div>
              <div className="flex items-center gap-2">
                {user.role === "admin" ? (
                  <Tooltip
                    content="A workspace must have at least one admin"
                    className="max-w-44 text-xs"
                    sideOffset={5}
                    triggerAsChild={true}
                  >
                    <div>
                      <Select
                        defaultValue={user.role}
                        disabled={user.role === "admin"}
                      >
                        <SelectTrigger className="h-8 w-32">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent align="end">
                          {roles.map((role) => (
                            <SelectItem
                              key={role.value}
                              value={role.value}
                              disabled={role.value === "admin"}
                            >
                              {role.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  </Tooltip>
                ) : (
                  <Select
                    defaultValue={user.role}
                    disabled={user.role === "admin"}
                  >
                    <SelectTrigger className="h-8 w-32">
                      <SelectValue placeholder="Select" />
                    </SelectTrigger>
                    <SelectContent align="end">
                      {roles.map((role) => (
                        <SelectItem
                          key={role.value}
                          value={role.value}
                          disabled={role.value === "admin"}
                        >
                          {role.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                )}
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button
                      variant="ghost"
                      className="group size-8 hover:border hover:border-gray-300 hover:bg-gray-50 data-[state=open]:border-gray-300 data-[state=open]:bg-gray-50 hover:dark:border-gray-700 hover:dark:bg-gray-900 data-[state=open]:dark:border-gray-700 data-[state=open]:dark:bg-gray-900"
                    >
                      <RiMore2Fill
                        className="size-4 shrink-0 text-gray-500 group-hover:text-gray-700 group-hover:dark:text-gray-400"
                        aria-hidden="true"
                      />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end" className="w-36">
                    <DropdownMenuItem disabled={user.role === "admin"}>
                      View details
                    </DropdownMenuItem>
                    <DropdownMenuItem
                      className="text-red-600 dark:text-red-500"
                      disabled={user.role === "admin"}
                    >
                      Delete
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>
            </li>
          ))}
        </ul>
      </section>
      <section className="mt-12" aria-labelledby="pending-invitations">
        <h2
          id="pending-invitations"
          className="scroll-mt-10 font-semibold text-gray-900 dark:text-gray-50"
        >
          Pending invitations
        </h2>
        <ul
          role="list"
          className="mt-6 divide-y divide-gray-200 dark:divide-gray-800"
        >
          {invitedUsers.map((user) => (
            <li
              key={user.initials}
              className="flex items-center justify-between gap-x-6 py-2.5"
            >
              <div className="flex items-center gap-x-4">
                <span
                  className="hidden size-9 shrink-0 items-center justify-center rounded-full border border-dashed border-gray-300 bg-white text-xs text-gray-700 sm:flex dark:border-gray-800 dark:bg-gray-950 dark:text-gray-300"
                  aria-hidden="true"
                >
                  {user.initials}
                </span>
                <div>
                  <p className="text-sm font-medium text-gray-900 dark:text-gray-50">
                    {user.email}
                  </p>
                  <p className="text-xs text-gray-500">
                    Expires in {user.expires} days
                  </p>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <Select defaultValue={user.role}>
                  <SelectTrigger className="h-8 w-32">
                    <SelectValue placeholder="Select" />
                  </SelectTrigger>
                  <SelectContent align="end">
                    {roles.map((role) => (
                      <SelectItem
                        key={role.value}
                        value={role.value}
                        disabled={role.value === "admin"}
                      >
                        {role.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button
                      variant="ghost"
                      className="group size-8 hover:border hover:border-gray-300 hover:bg-gray-50 data-[state=open]:border-gray-300 data-[state=open]:bg-gray-50 hover:dark:border-gray-700 hover:dark:bg-gray-900 data-[state=open]:dark:border-gray-700 data-[state=open]:dark:bg-gray-900"
                    >
                      <RiMore2Fill
                        className="size-4 shrink-0 text-gray-500 group-hover:text-gray-700 group-hover:dark:text-gray-400"
                        aria-hidden="true"
                      />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end" className="w-36">
                    <DropdownMenuItem
                      className="text-red-600 dark:text-red-500"
                      disabled={user.role === "admin"}
                    >
                      Revoke invitation
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>
            </li>
          ))}
        </ul>
      </section>
    </>
  )
}
</file>

<file path="src/app/settings/layout.tsx">
"use client"

import { siteConfig } from "@/app/siteConfig"
import { TabNavigation, TabNavigationLink } from "@/components/TabNavigation"
import Link from "next/link"
import { usePathname } from "next/navigation"

const navigationSettings = [
  { name: "General", href: siteConfig.baseLinks.settings.general },
  { name: "Billing & Usage", href: siteConfig.baseLinks.settings.billing },
  { name: "Users", href: siteConfig.baseLinks.settings.users },
]

export default function Layout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  const pathname = usePathname()
  return (
    <div className="p-4 sm:px-6 sm:pb-10 sm:pt-10 lg:px-10 lg:pt-7">
      <h1 className="text-lg font-semibold text-gray-900 sm:text-xl dark:text-gray-50">
        Settings
      </h1>
      <TabNavigation className="mt-4 sm:mt-6 lg:mt-10">
        {navigationSettings.map((item) => (
          <TabNavigationLink
            key={item.name}
            asChild
            active={pathname === item.href}
          >
            <Link href={item.href}>{item.name}</Link>
          </TabNavigationLink>
        ))}
      </TabNavigation>
      <div className="pt-6">{children}</div>
    </div>
  )
}
</file>

<file path="src/app/not-found.tsx">
import { Button } from "@/components/Button"
import { ArrowAnimated } from "@/components/ui/icons/ArrowAnimated"
import Link from "next/link"
import { DatabaseLogo } from "../../public/DatabaseLogo"
import { siteConfig } from "./siteConfig"

export default function NotFound() {
  return (
    <div className="flex h-screen flex-col items-center justify-center">
      <Link href={siteConfig.baseLinks.home}>
        <DatabaseLogo className="mt-6 h-10" />
      </Link>
      <p className="mt-6 text-4xl font-semibold text-indigo-600 sm:text-5xl dark:text-indigo-500">
        404
      </p>
      <h1 className="mt-4 text-2xl font-semibold text-gray-900 dark:text-gray-50">
        Page not found
      </h1>
      <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">
        Sorry, we couldn’t find the page you’re looking for.
      </p>
      <Button asChild className="group mt-8" variant="light">
        <Link href={siteConfig.baseLinks.home}>
          Go to the home page
          <ArrowAnimated
            className="stroke-gray-900 dark:stroke-gray-50"
            aria-hidden="true"
          />
        </Link>
      </Button>
    </div>
  )
}
</file>

<file path="src/components/ui/air-quality/AirQualityGaugeCard.tsx">
import { SensorReading } from "@/app/(main)/air-quality/page"
import { cx } from "@/lib/utils"

export type CardProps = {
    title: string
    value: string
    valueDescription: string
    ctaDescription: string
    ctaText: string
    ctaLink: string
    data: SensorReading[]
}

// Color mapping based on air quality status
const statusColors = {
    normal: "bg-green-500",
    warning: "bg-yellow-500",
    critical: "bg-red-500",
}

const statusTextColors = {
    normal: "text-green-500 dark:text-green-400",
    warning: "text-yellow-500 dark:text-yellow-400",
    critical: "text-red-500 dark:text-red-400",
}

export function AirQualityGaugeCard({
    title,
    value,
    valueDescription,
    ctaDescription,
    ctaText,
    ctaLink,
    data,
}: CardProps) {
    return (
        <div className="rounded-xl border border-gray-200 p-6 dark:border-gray-800">
            <div className="flex flex-col justify-between h-full">
                <div>
                    <div className="flex items-center gap-2">
                        <dt className="font-bold text-gray-900 sm:text-sm dark:text-gray-50 font-heading">
                            {title}
                        </dt>
                    </div>
                    <dd className="mt-2 flex items-baseline gap-2">
                        <span className="text-xl text-gray-900 dark:text-gray-50">
                            {value}
                        </span>
                        <span className="text-sm text-gray-500">{valueDescription}</span>
                    </dd>
                    <ul role="list" className="mt-6 space-y-4">
                        {data.map((item) => (
                            <li key={item.title} className="relative">
                                <div className="flex items-center justify-between mb-2">
                                    <span className="text-sm font-medium text-gray-900 dark:text-gray-50">
                                        {item.title}
                                    </span>
                                    <div className="flex items-center gap-2">
                                        <span className={cx("h-2 w-2 rounded-full", statusColors[item.status])}></span>
                                        <span className={cx("text-sm font-medium", statusTextColors[item.status])}>
                                            {item.value}{item.unit}
                                        </span>
                                    </div>
                                </div>

                                {/* Gauge visualization */}
                                <div className="h-2 w-full bg-gray-200 rounded-full overflow-hidden dark:bg-gray-800">
                                    <div
                                        className={cx(
                                            "h-full rounded-full transition-all duration-500",
                                            item.status === "normal" ? "bg-green-500" :
                                                item.status === "warning" ? "bg-yellow-500" : "bg-red-500"
                                        )}
                                        style={{
                                            width: `${
                                                // Calculate width based on reading type
                                                item.title === "CO2"
                                                    ? Math.min(100, (item.value / 1500) * 100)
                                                    : item.title === "Temperature"
                                                        ? Math.min(100, ((item.value - 15) / 15) * 100)
                                                        : item.title === "Humidity"
                                                            ? Math.min(100, (item.value / 100) * 100)
                                                            : 50 // Default fallback
                                                }%`
                                        }}
                                    ></div>
                                </div>

                                {/* Gauge ticks */}
                                <div className="flex justify-between mt-1 px-1">
                                    {item.title === "CO2" && (
                                        <>
                                            <span className="text-xs text-gray-500">400</span>
                                            <span className="text-xs text-gray-500">700</span>
                                            <span className="text-xs text-gray-500">1000</span>
                                            <span className="text-xs text-gray-500">1500+</span>
                                        </>
                                    )}
                                    {item.title === "Temperature" && (
                                        <>
                                            <span className="text-xs text-gray-500">15°C</span>
                                            <span className="text-xs text-gray-500">20°C</span>
                                            <span className="text-xs text-gray-500">25°C</span>
                                            <span className="text-xs text-gray-500">30°C</span>
                                        </>
                                    )}
                                    {item.title === "Humidity" && (
                                        <>
                                            <span className="text-xs text-gray-500">0%</span>
                                            <span className="text-xs text-gray-500">30%</span>
                                            <span className="text-xs text-gray-500">60%</span>
                                            <span className="text-xs text-gray-500">100%</span>
                                        </>
                                    )}
                                    {item.title === "Living Room" && (
                                        <>
                                            <span className="text-xs text-gray-500">400</span>
                                            <span className="text-xs text-gray-500">700</span>
                                            <span className="text-xs text-gray-500">1000</span>
                                            <span className="text-xs text-gray-500">1500+</span>
                                        </>
                                    )}
                                    {item.title === "Bedroom" && (
                                        <>
                                            <span className="text-xs text-gray-500">400</span>
                                            <span className="text-xs text-gray-500">700</span>
                                            <span className="text-xs text-gray-500">1000</span>
                                            <span className="text-xs text-gray-500">1500+</span>
                                        </>
                                    )}
                                    {item.title === "Kitchen" && (
                                        <>
                                            <span className="text-xs text-gray-500">400</span>
                                            <span className="text-xs text-gray-500">700</span>
                                            <span className="text-xs text-gray-500">1000</span>
                                            <span className="text-xs text-gray-500">1500+</span>
                                        </>
                                    )}
                                </div>
                            </li>
                        ))}
                    </ul>
                </div>
                <div>
                    <p className="mt-6 text-xs text-gray-500">
                        {ctaDescription}{" "}
                        <a href={ctaLink} className="text-indigo-600 dark:text-indigo-400">
                            {ctaText}
                        </a>
                    </p>
                </div>
            </div>
        </div>
    )
}
</file>

<file path="src/components/ui/air-quality/AirQualityHeatmapCard.tsx">
import { hourlyData } from "@/data/air-quality-data"
import { cx } from "@/lib/utils"

export type HeatmapCardProps = {
    title: string
    subtitle: string
    description: string
}

// Color scale for CO2 levels
const getColorForValue = (value: number) => {
    if (value < 600) return "bg-green-100 dark:bg-green-900"
    if (value < 800) return "bg-green-300 dark:bg-green-700"
    if (value < 1000) return "bg-yellow-300 dark:bg-yellow-700"
    if (value < 1200) return "bg-orange-300 dark:bg-orange-700"
    return "bg-red-400 dark:bg-red-700"
}

// Get text color for value display
const getTextColorForValue = (value: number) => {
    if (value < 600) return "text-green-800 dark:text-green-200"
    if (value < 800) return "text-green-800 dark:text-green-200"
    if (value < 1000) return "text-yellow-800 dark:text-yellow-200"
    if (value < 1200) return "text-orange-800 dark:text-orange-200"
    return "text-red-800 dark:text-red-200"
}

// Hours to display on the x-axis
const hours = [0, 3, 6, 9, 12, 15, 18, 21]

// Filter to just get the first day of data for the week heatmap
const lastDay = hourlyData[hourlyData.length - 1]

export function AirQualityHeatmapCard({ title, subtitle, description }: HeatmapCardProps) {
    return (
        <div className="rounded-xl border border-gray-200 p-6 dark:border-gray-800">
            <div className="flex flex-col h-full">
                <div className="mb-4">
                    <h3 className="font-bold text-gray-900 sm:text-sm dark:text-gray-50 font-heading">
                        {title}
                    </h3>
                    <p className="mt-1 text-sm text-gray-500">{description}</p>
                </div>

                <div className="mt-2">
                    <p className="text-sm font-medium text-gray-900 dark:text-gray-50 font-heading mb-3">
                        {subtitle}
                    </p>

                    {/* Hour labels */}
                    <div className="flex mb-1">
                        <div className="w-12 mr-1 text-right">
                            <span className="text-xs text-gray-500">Hour</span>
                        </div>
                        <div className="flex flex-1 justify-between">
                            {hours.map(hour => (
                                <div key={hour} className="text-xs text-gray-500 w-6 text-center">
                                    {hour}
                                </div>
                            ))}
                        </div>
                    </div>

                    {/* Heatmap grid */}
                    <div className="flex mb-4 items-center">
                        <div className="w-12 mr-1 text-right">
                            <span className="text-xs text-gray-500 leading-relaxed">Today</span>
                        </div>
                        <div className="flex-1 grid grid-cols-24 gap-[1px]">
                            {lastDay.map((hourData, i) => (
                                <div
                                    key={i}
                                    className={cx(
                                        "aspect-square rounded-sm flex items-center justify-center relative group",
                                        getColorForValue(hourData.value)
                                    )}
                                >
                                    {/* Tooltip on hover */}
                                    <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-1 hidden group-hover:block z-10">
                                        <div className="bg-gray-900 text-white text-xs rounded p-1 whitespace-nowrap">
                                            {hourData.hour}:00 - {hourData.value} ppm
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>

                    {/* Legend */}
                    <div className="flex items-center justify-end mt-2 gap-3">
                        <div className="flex items-center">
                            <div className="w-3 h-3 rounded-sm bg-green-300 dark:bg-green-700 mr-1"></div>
                            <span className="text-xs text-gray-500">&lt;800</span>
                        </div>
                        <div className="flex items-center">
                            <div className="w-3 h-3 rounded-sm bg-yellow-300 dark:bg-yellow-700 mr-1"></div>
                            <span className="text-xs text-gray-500">&lt;1000</span>
                        </div>
                        <div className="flex items-center">
                            <div className="w-3 h-3 rounded-sm bg-orange-300 dark:bg-orange-700 mr-1"></div>
                            <span className="text-xs text-gray-500">&lt;1200</span>
                        </div>
                        <div className="flex items-center">
                            <div className="w-3 h-3 rounded-sm bg-red-400 dark:bg-red-700 mr-1"></div>
                            <span className="text-xs text-gray-500">&gt;1200</span>
                        </div>
                    </div>
                </div>

                {/* Weekly summary */}
                <div className="mt-auto pt-4">
                    <h4 className="text-xs font-medium text-gray-900 dark:text-gray-50 mb-2">
                        Weekly Pattern
                    </h4>
                    <div className="flex justify-between gap-1">
                        {hourlyData.map((dayData, i) => {
                            // Calculate average for the day
                            const sum = dayData.reduce((acc, hour) => acc + hour.value, 0);
                            const avg = Math.round(sum / dayData.length);

                            return (
                                <div key={i} className="flex flex-col items-center">
                                    <div className="text-xs text-gray-500 mb-1">{dayData[0].day}</div>
                                    <div className={cx(
                                        "h-5 w-8 rounded",
                                        getColorForValue(avg)
                                    )}>
                                        <span className={cx(
                                            "text-xs font-medium",
                                            getTextColorForValue(avg)
                                        )}>
                                            {avg}
                                        </span>
                                    </div>
                                </div>
                            );
                        })}
                    </div>
                </div>
            </div>
        </div>
    )
}
</file>

<file path="src/components/ui/data-table/columns.tsx">
"use client"

import { Badge, BadgeProps } from "@/components/Badge"
import { Checkbox } from "@/components/Checkbox"
import { statuses } from "@/data/data"
import { Usage } from "@/data/schema"
import { formatters } from "@/lib/utils"
import { ColumnDef, createColumnHelper } from "@tanstack/react-table"
import { DataTableColumnHeader } from "./DataTableColumnHeader"
import { ConditionFilter } from "./DataTableFilter"
import { DataTableRowActions } from "./DataTableRowActions"

const columnHelper = createColumnHelper<Usage>()

export const columns = [
  columnHelper.display({
    id: "select",
    header: ({ table }) => (
      <Checkbox
        checked={
          table.getIsAllPageRowsSelected()
            ? true
            : table.getIsSomeRowsSelected()
              ? "indeterminate"
              : false
        }
        onCheckedChange={() => table.toggleAllPageRowsSelected()}
        className="translate-y-0.5"
        aria-label="Select all"
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={() => row.toggleSelected()}
        className="translate-y-0.5"
        aria-label="Select row"
      />
    ),
    enableSorting: false,
    enableHiding: false,
    meta: {
      displayName: "Select",
    },
  }),
  columnHelper.accessor("owner", {
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Owner" />
    ),
    enableSorting: true,
    enableHiding: false,
    meta: {
      className: "text-left",
      displayName: "Owner",
    },
  }),
  columnHelper.accessor("status", {
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Status" />
    ),
    enableSorting: true,
    meta: {
      className: "text-left",
      displayName: "Status",
    },
    cell: ({ row }) => {
      const status = statuses.find(
        (item) => item.value === row.getValue("status"),
      )

      if (!status) {
        return null
      }

      return (
        <Badge variant={status.variant as BadgeProps["variant"]}>
          {status.label}
        </Badge>
      )
    },
  }),
  columnHelper.accessor("region", {
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Region" />
    ),
    enableSorting: false,
    meta: {
      className: "text-left",
      displayName: "Region",
    },
    filterFn: "arrIncludesSome",
  }),
  columnHelper.accessor("stability", {
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Stability" />
    ),
    enableSorting: false,
    meta: {
      className: "text-left",
      displayName: "Stability",
    },
    cell: ({ getValue }) => {
      const value = getValue()

      function Indicator({ number }: { number: number }) {
        let category
        if (number === 0) {
          category = "zero"
        } else if (number < 9) {
          category = "bad"
        } else if (number >= 9 && number <= 15) {
          category = "ok"
        } else {
          category = "good"
        }

        const getBarClass = (index: number) => {
          if (category === "zero") {
            return "bg-gray-300 dark:bg-gray-800"
          } else if (category === "good") {
            return "bg-indigo-600 dark:bg-indigo-500"
          } else if (category === "ok" && index < 2) {
            return "bg-indigo-600 dark:bg-indigo-500"
          } else if (category === "bad" && index < 1) {
            return "bg-indigo-600 dark:bg-indigo-500"
          }
          return "bg-gray-300 dark:bg-gray-800"
        }

        return (
          <div className="flex gap-0.5">
            <div className={`h-3.5 w-1 rounded-sm ${getBarClass(0)}`} />
            <div className={`h-3.5 w-1 rounded-sm ${getBarClass(1)}`} />
            <div className={`h-3.5 w-1 rounded-sm ${getBarClass(2)}`} />
          </div>
        )
      }

      return (
        <div className="flex items-center gap-0.5">
          <span className="w-6">{value}</span>
          <Indicator number={value} />
        </div>
      )
    },
  }),
  columnHelper.accessor("costs", {
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Costs" />
    ),
    enableSorting: true,
    meta: {
      className: "text-right",
      displayName: "Costs",
    },
    cell: ({ getValue }) => {
      return (
        <span className="font-medium">{formatters.currency(getValue())}</span>
      )
    },
    filterFn: (row, columnId, filterValue: ConditionFilter) => {
      const value = row.getValue(columnId) as number
      const [min, max] = filterValue.value as [number, number]

      switch (filterValue.condition) {
        case "is-equal-to":
          return value == min
        case "is-between":
          return value >= min && value <= max
        case "is-greater-than":
          return value > min
        case "is-less-than":
          return value < min
        default:
          return true
      }
    },
  }),
  columnHelper.accessor("lastEdited", {
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Last edited" />
    ),
    enableSorting: false,
    meta: {
      className: "tabular-nums",
      displayName: "Last edited",
    },
  }),
  columnHelper.display({
    id: "edit",
    header: "Edit",
    enableSorting: false,
    enableHiding: false,
    meta: {
      className: "text-right",
      displayName: "Edit",
    },
    cell: ({ row }) => <DataTableRowActions row={row} />,
  }),
] as ColumnDef<Usage>[]
</file>

<file path="src/components/ui/data-table/DataTable.tsx">
"use client"

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeaderCell,
  TableRow,
} from "@/components/Table"
import { cx } from "@/lib/utils"
import * as React from "react"

import { DataTableBulkEditor } from "./DataTableBulkEditor"
import { Filterbar } from "./DataTableFilterbar"
import { DataTablePagination } from "./DataTablePagination"

import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table"

interface DataTableProps<TData> {
  columns: ColumnDef<TData>[]
  data: TData[]
}

export function DataTable<TData>({ columns, data }: DataTableProps<TData>) {
  const pageSize = 20
  const [rowSelection, setRowSelection] = React.useState({})
  const table = useReactTable({
    data,
    columns,
    state: {
      rowSelection,
    },
    initialState: {
      pagination: {
        pageIndex: 0,
        pageSize: pageSize,
      },
    },
    enableRowSelection: true,
    getFilteredRowModel: getFilteredRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    onRowSelectionChange: setRowSelection,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
  })

  return (
    <>
      <div className="space-y-3">
        <Filterbar table={table} />
        <div className="relative overflow-hidden overflow-x-auto">
          <Table>
            <TableHead>
              {table.getHeaderGroups().map((headerGroup) => (
                <TableRow
                  key={headerGroup.id}
                  className="border-y border-gray-200 dark:border-gray-800"
                >
                  {headerGroup.headers.map((header) => (
                    <TableHeaderCell
                      key={header.id}
                      className={cx(
                        "whitespace-nowrap py-1 text-sm sm:text-xs",
                        header.column.columnDef.meta?.className,
                      )}
                    >
                      {flexRender(
                        header.column.columnDef.header,
                        header.getContext(),
                      )}
                    </TableHeaderCell>
                  ))}
                </TableRow>
              ))}
            </TableHead>
            <TableBody>
              {table.getRowModel().rows?.length ? (
                table.getRowModel().rows.map((row) => (
                  <TableRow
                    key={row.id}
                    onClick={() => row.toggleSelected(!row.getIsSelected())}
                    className="group select-none hover:bg-gray-50 hover:dark:bg-gray-900"
                  >
                    {row.getVisibleCells().map((cell, index) => (
                      <TableCell
                        key={cell.id}
                        className={cx(
                          row.getIsSelected()
                            ? "bg-gray-50 dark:bg-gray-900"
                            : "",
                          "relative whitespace-nowrap py-1 text-gray-600 first:w-10 dark:text-gray-400",
                          cell.column.columnDef.meta?.className,
                        )}
                      >
                        {index === 0 && row.getIsSelected() && (
                          <div className="absolute inset-y-0 left-0 w-0.5 bg-indigo-600 dark:bg-indigo-500" />
                        )}
                        {flexRender(
                          cell.column.columnDef.cell,
                          cell.getContext(),
                        )}
                      </TableCell>
                    ))}
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell
                    colSpan={columns.length}
                    className="h-24 text-center"
                  >
                    No results.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
          <DataTableBulkEditor table={table} rowSelection={rowSelection} />
        </div>
        <DataTablePagination table={table} pageSize={pageSize} />
      </div>
    </>
  )
}
</file>

<file path="src/components/ui/data-table/DataTableBulkEditor.tsx">
"use client"

import {
  CommandBar,
  CommandBarBar,
  CommandBarCommand,
  CommandBarSeperator,
  CommandBarValue,
} from "@/components/CommandBar"
import { RowSelectionState, Table } from "@tanstack/react-table"

type DataTableBulkEditorProps<TData> = {
  table: Table<TData>
  rowSelection: RowSelectionState
}

function DataTableBulkEditor<TData>({
  table,
  rowSelection,
}: DataTableBulkEditorProps<TData>) {
  const hasSelectedRows = Object.keys(rowSelection).length > 0
  return (
    <CommandBar open={hasSelectedRows}>
      <CommandBarBar>
        <CommandBarValue>
          {Object.keys(rowSelection).length} selected
        </CommandBarValue>
        <CommandBarSeperator />
        <CommandBarCommand
          label="Edit"
          action={() => {
            console.log("Edit")
          }}
          shortcut={{ shortcut: "e" }}
        />
        <CommandBarSeperator />
        <CommandBarCommand
          label="Delete"
          action={() => {
            console.log("Delete")
          }}
          shortcut={{ shortcut: "d" }}
        />
        <CommandBarSeperator />
        <CommandBarCommand
          label="Reset"
          action={() => {
            table.resetRowSelection()
          }}
          shortcut={{ shortcut: "Escape", label: "esc" }}
          // don't disable this command
        />
      </CommandBarBar>
    </CommandBar>
  )
}

export { DataTableBulkEditor }
</file>

<file path="src/components/ui/data-table/DataTableColumnHeader.tsx">
import { RiArrowDownSLine, RiArrowUpSLine } from "@remixicon/react"
import { Column } from "@tanstack/react-table"

import { cx } from "@/lib/utils"

interface DataTableColumnHeaderProps<TData, TValue>
  extends React.HTMLAttributes<HTMLDivElement> {
  column: Column<TData, TValue>
  title: string
}

export function DataTableColumnHeader<TData, TValue>({
  column,
  title,
  className,
}: DataTableColumnHeaderProps<TData, TValue>) {
  if (!column.getCanSort()) {
    return <div className={cx(className)}>{title}</div>
  }

  return (
    <div
      onClick={column.getToggleSortingHandler()}
      className={cx(
        column.columnDef.enableSorting === true
          ? "-mx-2 inline-flex cursor-pointer select-none items-center gap-2 rounded-md px-2 py-1 hover:bg-gray-50 hover:dark:bg-gray-900"
          : "",
      )}
    >
      <span>{title}</span>
      {column.getCanSort() ? (
        <div className="-space-y-2">
          <RiArrowUpSLine
            className={cx(
              "size-3.5 text-gray-900 dark:text-gray-50",
              column.getIsSorted() === "desc" ? "opacity-30" : "",
            )}
            aria-hidden="true"
          />
          <RiArrowDownSLine
            className={cx(
              "size-3.5 text-gray-900 dark:text-gray-50",
              column.getIsSorted() === "asc" ? "opacity-30" : "",
            )}
            aria-hidden="true"
          />
        </div>
      ) : null}
    </div>
  )
}
</file>

<file path="src/components/ui/data-table/DataTableFilter.tsx">
"use client"

import {
  RiAddLine,
  RiArrowDownSLine,
  RiCornerDownRightLine,
} from "@remixicon/react"
import { Column } from "@tanstack/react-table"

import { Button } from "@/components/Button"
import { Checkbox } from "@/components/Checkbox"
import { Input } from "@/components/Input"
import { Label } from "@/components/Label"
import {
  Popover,
  PopoverClose,
  PopoverContent,
  PopoverTrigger,
} from "@/components/Popover"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/Select"
import { cx, focusRing } from "@/lib/utils"
import React from "react"

export type ConditionFilter = {
  condition: string
  value: [number | string, number | string]
}

type FilterType = "select" | "checkbox" | "number"

interface DataTableFilterProps<TData, TValue> {
  column: Column<TData, TValue> | undefined
  title?: string
  options?: {
    label: string
    value: string
  }[]
  type?: FilterType
  formatter?: (value: any) => string
}

const ColumnFiltersLabel = ({
  columnFilterLabels,
  className,
}: {
  columnFilterLabels: string[] | undefined
  className?: string
}) => {
  if (!columnFilterLabels) return null

  if (columnFilterLabels.length < 3) {
    return (
      <span className={cx("truncate", className)}>
        {columnFilterLabels.map((value, index) => (
          <span
            key={value}
            className={cx("font-semibold text-indigo-600 dark:text-indigo-400")}
          >
            {value}
            {index < columnFilterLabels.length - 1 && ", "}
          </span>
        ))}
      </span>
    )
  }

  return (
    <>
      <span
        className={cx(
          "font-semibold text-indigo-600 dark:text-indigo-400",
          className,
        )}
      >
        {columnFilterLabels[0]} and {columnFilterLabels.length - 1} more
      </span>
    </>
  )
}

type FilterValues = string | string[] | ConditionFilter | undefined

export function DataTableFilter<TData, TValue>({
  column,
  title,
  options,
  type = "select",
  formatter = (value) => value.toString(),
}: DataTableFilterProps<TData, TValue>) {
  const columnFilters = column?.getFilterValue() as FilterValues

  const [selectedValues, setSelectedValues] =
    React.useState<FilterValues>(columnFilters)

  const columnFilterLabels = React.useMemo(() => {
    if (!selectedValues) return undefined

    if (Array.isArray(selectedValues)) {
      return selectedValues.map((value) => formatter(value))
    }

    if (typeof selectedValues === "string") {
      return [formatter(selectedValues)]
    }

    if (typeof selectedValues === "object" && "condition" in selectedValues) {
      const condition = options?.find(
        (option) => option.value === selectedValues.condition,
      )?.label
      if (!condition) return undefined
      if (!selectedValues.value?.[0] && !selectedValues.value?.[1])
        return [`${condition}`]
      if (!selectedValues.value?.[1])
        return [`${condition} ${formatter(selectedValues.value?.[0])}`]
      return [
        `${condition} ${formatter(selectedValues.value?.[0])} and ${formatter(
          selectedValues.value?.[1],
        )}`,
      ]
    }

    return undefined
  }, [selectedValues, options, formatter])

  const getDisplayedFilter = () => {
    switch (type) {
      case "select":
        return (
          <Select
            value={selectedValues as string}
            onValueChange={(value) => {
              setSelectedValues(value)
            }}
          >
            <SelectTrigger className="mt-2 sm:py-1">
              <SelectValue placeholder="Select" />
            </SelectTrigger>
            <SelectContent>
              {options?.map((item) => (
                <SelectItem key={item.value} value={item.value}>
                  {item.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        )
      case "checkbox":
        return (
          <div className="mt-2 space-y-2 overflow-y-auto sm:max-h-36">
            {options?.map((option) => {
              return (
                <div key={option.label} className="flex items-center gap-2">
                  <Checkbox
                    id={option.value}
                    checked={(selectedValues as string[])?.includes(
                      option.value,
                    )}
                    onCheckedChange={(checked) => {
                      setSelectedValues((prev) => {
                        if (checked) {
                          return prev
                            ? [...(prev as string[]), option.value]
                            : [option.value]
                        } else {
                          return (prev as string[]).filter(
                            (value) => value !== option.value,
                          )
                        }
                      })
                    }}
                  />
                  <Label
                    htmlFor={option.value}
                    className="text-base sm:text-sm"
                  >
                    {option.label}
                  </Label>
                </div>
              )
            })}
          </div>
        )
      case "number":
        const isBetween =
          (selectedValues as ConditionFilter)?.condition === "is-between"
        return (
          <div className="space-y-2">
            <Select
              value={(selectedValues as ConditionFilter)?.condition}
              onValueChange={(value) => {
                setSelectedValues((prev) => {
                  return {
                    condition: value,
                    value: [
                      value !== "" ? (prev as ConditionFilter)?.value?.[0] : "",
                      "",
                    ],
                  }
                })
              }}
            >
              <SelectTrigger className="mt-2 sm:py-1">
                <SelectValue placeholder="Select condition" />
              </SelectTrigger>
              <SelectContent>
                {options?.map((item) => (
                  <SelectItem key={item.value} value={item.value}>
                    {item.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>

            <div className="flex w-full items-center gap-2">
              <RiCornerDownRightLine
                className="size-4 shrink-0 text-gray-500"
                aria-hidden="true"
              />
              <Input
                disabled={!(selectedValues as ConditionFilter)?.condition}
                type="number"
                placeholder="$0"
                className="sm:[&>input]:py-1"
                value={(selectedValues as ConditionFilter)?.value?.[0]}
                onChange={(e) => {
                  setSelectedValues((prev) => {
                    return {
                      condition: (prev as ConditionFilter)?.condition,
                      value: [
                        e.target.value,
                        isBetween ? (prev as ConditionFilter)?.value?.[1] : "",
                      ],
                    }
                  })
                }}
              />
              {(selectedValues as ConditionFilter)?.condition ===
                "is-between" && (
                <>
                  <span className="text-xs font-medium text-gray-500">and</span>
                  <Input
                    disabled={!(selectedValues as ConditionFilter)?.condition}
                    type="number"
                    placeholder="$0"
                    className="sm:[&>input]:py-1"
                    value={(selectedValues as ConditionFilter)?.value?.[1]}
                    onChange={(e) => {
                      setSelectedValues((prev) => {
                        return {
                          condition: (prev as ConditionFilter)?.condition,
                          value: [
                            (prev as ConditionFilter)?.value?.[0],
                            e.target.value,
                          ],
                        }
                      })
                    }}
                  />
                </>
              )}
            </div>
          </div>
        )
    }
  }

  React.useEffect(() => {
    setSelectedValues(columnFilters)
  }, [columnFilters])

  return (
    <Popover>
      <PopoverTrigger asChild>
        <button
          type="button"
          className={cx(
            "flex w-full items-center gap-x-1.5 whitespace-nowrap rounded-md border border-gray-300 px-2 py-1.5 font-medium text-gray-600 hover:bg-gray-50 sm:w-fit sm:text-xs dark:border-gray-700 dark:text-gray-400 hover:dark:bg-gray-900",
            selectedValues &&
              ((typeof selectedValues === "object" &&
                "condition" in selectedValues &&
                selectedValues.condition !== "") ||
                (typeof selectedValues === "string" && selectedValues !== "") ||
                (Array.isArray(selectedValues) && selectedValues.length > 0))
              ? ""
              : "border-dashed",
            focusRing,
          )}
        >
          <span
            aria-hidden="true"
            onClick={(e) => {
              if (selectedValues) {
                e.stopPropagation()
                column?.setFilterValue("")
                setSelectedValues("")
              }
            }}
          >
            <RiAddLine
              className={cx(
                "-ml-px size-5 shrink-0 transition sm:size-4",
                selectedValues && "rotate-45 hover:text-red-500",
              )}
              aria-hidden="true"
            />
          </span>
          {/* differentiation below for better mobile view */}
          {columnFilterLabels && columnFilterLabels.length > 0 ? (
            <span>{title}</span>
          ) : (
            <span className="w-full text-left sm:w-fit">{title}</span>
          )}
          {columnFilterLabels && columnFilterLabels.length > 0 && (
            <span
              className="h-4 w-px bg-gray-300 dark:bg-gray-700"
              aria-hidden="true"
            />
          )}
          <ColumnFiltersLabel
            columnFilterLabels={columnFilterLabels}
            className="w-full text-left sm:w-fit"
          />
          <RiArrowDownSLine
            className="size-5 shrink-0 text-gray-500 sm:size-4"
            aria-hidden="true"
          />
        </button>
      </PopoverTrigger>
      <PopoverContent
        align="start"
        sideOffset={7}
        className="min-w-[calc(var(--radix-popover-trigger-width))] max-w-[calc(var(--radix-popover-trigger-width))] sm:min-w-56 sm:max-w-56"
        onInteractOutside={() => {
          if (
            !columnFilters ||
            (typeof columnFilters === "string" && columnFilters === "") ||
            (Array.isArray(columnFilters) && columnFilters.length === 0) ||
            (typeof columnFilters === "object" &&
              "condition" in columnFilters &&
              columnFilters.condition === "")
          ) {
            column?.setFilterValue("")
            setSelectedValues("")
          }
        }}
      >
        <form
          onSubmit={(e) => {
            e.preventDefault()
            column?.setFilterValue(selectedValues)
          }}
        >
          <div className="space-y-2">
            <div>
              <Label className="text-base font-medium sm:text-sm">
                Filter by {title}
              </Label>
              {getDisplayedFilter()}
            </div>
            <PopoverClose className="w-full" asChild>
              <Button type="submit" className="w-full sm:py-1">
                Apply
              </Button>
            </PopoverClose>
            {columnFilterLabels && columnFilterLabels.length > 0 && (
              <Button
                variant="secondary"
                className="w-full sm:py-1"
                type="button"
                onClick={() => {
                  column?.setFilterValue("")
                  setSelectedValues(
                    type === "checkbox"
                      ? []
                      : type === "number"
                        ? { condition: "", value: ["", ""] }
                        : "",
                  )
                }}
              >
                Reset
              </Button>
            )}
          </div>
        </form>
      </PopoverContent>
    </Popover>
  )
}
</file>

<file path="src/components/ui/data-table/DataTableFilterbar.tsx">
"use client"

import { Button } from "@/components/Button"
import { Searchbar } from "@/components/Searchbar"
import { conditions, regions, statuses } from "@/data/data"
import { formatters } from "@/lib/utils"
import { RiDownloadLine } from "@remixicon/react"
import { Table } from "@tanstack/react-table"
import { useState } from "react"
import { useDebouncedCallback } from "use-debounce"
import { DataTableFilter } from "./DataTableFilter"
import { ViewOptions } from "./DataTableViewOptions"

interface DataTableToolbarProps<TData> {
  table: Table<TData>
}

export function Filterbar<TData>({ table }: DataTableToolbarProps<TData>) {
  const isFiltered = table.getState().columnFilters.length > 0
  const [searchTerm, setSearchTerm] = useState<string>("")

  const debouncedSetFilterValue = useDebouncedCallback((value) => {
    table.getColumn("owner")?.setFilterValue(value)
  }, 300)

  const handleSearchChange = (event: any) => {
    const value = event.target.value
    setSearchTerm(value)
    debouncedSetFilterValue(value)
  }

  return (
    <div className="flex flex-wrap items-center justify-between gap-2 sm:gap-x-6">
      <div className="flex w-full flex-col gap-2 sm:w-fit sm:flex-row sm:items-center">
        {table.getColumn("status")?.getIsVisible() && (
          <DataTableFilter
            column={table.getColumn("status")}
            title="Status"
            options={statuses}
            type="select"
          />
        )}
        {table.getColumn("region")?.getIsVisible() && (
          <DataTableFilter
            column={table.getColumn("region")}
            title="Region"
            options={regions}
            type="checkbox"
          />
        )}
        {table.getColumn("costs")?.getIsVisible() && (
          <DataTableFilter
            column={table.getColumn("costs")}
            title="Costs"
            type="number"
            options={conditions}
            formatter={formatters.currency}
          />
        )}
        {table.getColumn("owner")?.getIsVisible() && (
          <Searchbar
            type="search"
            placeholder="Search by owner..."
            value={searchTerm}
            onChange={handleSearchChange}
            className="w-full sm:max-w-[250px] sm:[&>input]:h-[30px]"
          />
        )}
        {isFiltered && (
          <Button
            variant="ghost"
            onClick={() => table.resetColumnFilters()}
            className="border border-gray-200 px-2 font-semibold text-indigo-600 sm:border-none sm:py-1 dark:border-gray-800 dark:text-indigo-500"
          >
            Clear filters
          </Button>
        )}
      </div>
      <div className="flex items-center gap-2">
        <Button
          variant="secondary"
          className="hidden gap-x-2 px-2 py-1.5 text-sm sm:text-xs lg:flex"
        >
          <RiDownloadLine className="size-4 shrink-0" aria-hidden="true" />
          Export
        </Button>
        <ViewOptions table={table} />
      </div>
    </div>
  )
}
</file>

<file path="src/components/ui/data-table/DataTablePagination.tsx">
import { Button } from "@/components/Button"
import { cx } from "@/lib/utils"
import {
  RiArrowLeftDoubleLine,
  RiArrowLeftSLine,
  RiArrowRightDoubleLine,
  RiArrowRightSLine,
} from "@remixicon/react"
import { Table } from "@tanstack/react-table"

interface DataTablePaginationProps<TData> {
  table: Table<TData>
  pageSize: number
}

export function DataTablePagination<TData>({
  table,
  pageSize,
}: DataTablePaginationProps<TData>) {
  const paginationButtons = [
    {
      icon: RiArrowLeftDoubleLine,
      onClick: () => table.setPageIndex(0),
      disabled: !table.getCanPreviousPage(),
      srText: "First page",
      mobileView: "hidden sm:block",
    },
    {
      icon: RiArrowLeftSLine,
      onClick: () => table.previousPage(),
      disabled: !table.getCanPreviousPage(),
      srText: "Previous page",
      mobileView: "",
    },
    {
      icon: RiArrowRightSLine,
      onClick: () => table.nextPage(),
      disabled: !table.getCanNextPage(),
      srText: "Next page",
      mobileView: "",
    },
    {
      icon: RiArrowRightDoubleLine,
      onClick: () => table.setPageIndex(table.getPageCount() - 1),
      disabled: !table.getCanNextPage(),
      srText: "Last page",
      mobileView: "hidden sm:block",
    },
  ]

  const totalRows = table.getFilteredRowModel().rows.length
  const currentPage = table.getState().pagination.pageIndex
  const firstRowIndex = currentPage * pageSize + 1
  const lastRowIndex = Math.min(totalRows, firstRowIndex + pageSize - 1)

  return (
    <div className="flex items-center justify-between">
      <div className="text-sm tabular-nums text-gray-500">
        {table.getFilteredSelectedRowModel().rows.length} of {totalRows} row(s)
        selected.
      </div>
      <div className="flex items-center gap-x-6 lg:gap-x-8">
        <p className="hidden text-sm tabular-nums text-gray-500 sm:block">
          Showing{" "}
          <span className="font-medium text-gray-900 dark:text-gray-50">
            {firstRowIndex}-{lastRowIndex}
          </span>{" "}
          of{" "}
          <span className="font-medium text-gray-900 dark:text-gray-50">
            {totalRows}
          </span>
        </p>
        <div className="flex items-center gap-x-1.5">
          {paginationButtons.map((button, index) => (
            <Button
              key={index}
              variant="secondary"
              className={cx(button.mobileView, "p-1.5")}
              onClick={() => {
                button.onClick()
                table.resetRowSelection()
              }}
              disabled={button.disabled}
            >
              <span className="sr-only">{button.srText}</span>
              <button.icon className="size-4 shrink-0" aria-hidden="true" />
            </Button>
          ))}
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/components/ui/data-table/DataTableRowActions.tsx">
"use client"

import { Button } from "@/components/Button"
import { RiMoreFill } from "@remixicon/react"
import { Row } from "@tanstack/react-table"

import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/Dropdown"

interface DataTableRowActionsProps<TData> {
  row: Row<TData>
}

export function DataTableRowActions<
  TData,
>({}: DataTableRowActionsProps<TData>) {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="ghost"
          className="group aspect-square p-1.5 hover:border hover:border-gray-300 data-[state=open]:border-gray-300 data-[state=open]:bg-gray-50 hover:dark:border-gray-700 data-[state=open]:dark:border-gray-700 data-[state=open]:dark:bg-gray-900"
        >
          <RiMoreFill
            className="size-4 shrink-0 text-gray-500 group-hover:text-gray-700 group-data-[state=open]:text-gray-700 group-hover:dark:text-gray-300 group-data-[state=open]:dark:text-gray-300"
            aria-hidden="true"
          />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="min-w-40">
        <DropdownMenuItem>Add</DropdownMenuItem>
        <DropdownMenuItem>Edit</DropdownMenuItem>
        <DropdownMenuItem className="text-red-600 dark:text-red-500">
          Delete
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
</file>

<file path="src/components/ui/data-table/DataTableViewOptions.tsx">
"use client"

import React from "react"

import { Popover, PopoverContent, PopoverTrigger } from "@/components/Popover"
import { Column, Table } from "@tanstack/react-table"

import ReactDOM from "react-dom"
import invariant from "tiny-invariant"

import { Button } from "@/components/Button"
import { Checkbox } from "@/components/Checkbox"
import { Label } from "@/components/Label"
import { cx } from "@/lib/utils"
import { triggerPostMoveFlash } from "@atlaskit/pragmatic-drag-and-drop-flourish/trigger-post-move-flash"
import {
  attachClosestEdge,
  extractClosestEdge,
  type Edge,
} from "@atlaskit/pragmatic-drag-and-drop-hitbox/closest-edge"
import { getReorderDestinationIndex } from "@atlaskit/pragmatic-drag-and-drop-hitbox/util/get-reorder-destination-index"
import * as liveRegion from "@atlaskit/pragmatic-drag-and-drop-live-region"
import { DropIndicator } from "@atlaskit/pragmatic-drag-and-drop-react-drop-indicator/box"
import { combine } from "@atlaskit/pragmatic-drag-and-drop/combine"
import {
  draggable,
  dropTargetForElements,
  monitorForElements,
} from "@atlaskit/pragmatic-drag-and-drop/element/adapter"
import { pointerOutsideOfPreview } from "@atlaskit/pragmatic-drag-and-drop/element/pointer-outside-of-preview"
import { setCustomNativeDragPreview } from "@atlaskit/pragmatic-drag-and-drop/element/set-custom-native-drag-preview"
import { reorder } from "@atlaskit/pragmatic-drag-and-drop/reorder"
import { RiDraggable, RiEqualizer2Line } from "@remixicon/react"

type CleanupFn = () => void

type ItemEntry = { itemId: string; element: HTMLElement }

type ListContextValue = {
  getListLength: () => number
  registerItem: (entry: ItemEntry) => CleanupFn
  reorderItem: (args: {
    startIndex: number
    indexOfTarget: number
    closestEdgeOfTarget: Edge | null
  }) => void
  instanceId: symbol
}

const ListContext = React.createContext<ListContextValue | null>(null)

function useListContext() {
  const listContext = React.useContext(ListContext)
  invariant(listContext !== null)
  return listContext
}

type Item = {
  id: string
  label: string
}

const itemKey = Symbol("item")

type ItemData = {
  [itemKey]: true
  item: Item
  index: number
  instanceId: symbol
}

function getItemData({
  item,
  index,
  instanceId,
}: {
  item: Item
  index: number
  instanceId: symbol
}): ItemData {
  return {
    [itemKey]: true,
    item,
    index,
    instanceId,
  }
}

function isItemData(data: Record<string | symbol, unknown>): data is ItemData {
  return data[itemKey] === true
}

type DraggableState =
  | { type: "idle" }
  | { type: "preview"; container: HTMLElement }
  | { type: "dragging" }

const idleState: DraggableState = { type: "idle" }
const draggingState: DraggableState = { type: "dragging" }

function ListItem({
  item,
  index,
  column,
}: {
  item: Item
  index: number
  column: Column<any, unknown> | undefined
}) {
  const { registerItem, instanceId } = useListContext()

  const ref = React.useRef<HTMLDivElement>(null)
  const [closestEdge, setClosestEdge] = React.useState<Edge | null>(null)

  const dragHandleRef = React.useRef<HTMLButtonElement>(null)

  const [draggableState, setDraggableState] =
    React.useState<DraggableState>(idleState)

  React.useEffect(() => {
    const element = ref.current
    const dragHandle = dragHandleRef.current
    invariant(element)
    invariant(dragHandle)

    const data = getItemData({ item, index, instanceId })

    return combine(
      registerItem({ itemId: item.id, element }),
      draggable({
        element: dragHandle,
        getInitialData: () => data,
        onGenerateDragPreview({ nativeSetDragImage }) {
          setCustomNativeDragPreview({
            nativeSetDragImage,
            getOffset: pointerOutsideOfPreview({
              x: "10px",
              y: "10px",
            }),
            render({ container }) {
              setDraggableState({ type: "preview", container })

              return () => setDraggableState(draggingState)
            },
          })
        },
        onDragStart() {
          setDraggableState(draggingState)
        },
        onDrop() {
          setDraggableState(idleState)
        },
      }),
      dropTargetForElements({
        element,
        canDrop({ source }) {
          return (
            isItemData(source.data) && source.data.instanceId === instanceId
          )
        },
        getData({ input }) {
          return attachClosestEdge(data, {
            element,
            input,
            allowedEdges: ["top", "bottom"],
          })
        },
        onDrag({ self, source }) {
          const isSource = source.element === element
          if (isSource) {
            setClosestEdge(null)
            return
          }

          const closestEdge = extractClosestEdge(self.data)

          const sourceIndex = source.data.index
          invariant(typeof sourceIndex === "number")

          const isItemBeforeSource = index === sourceIndex - 1
          const isItemAfterSource = index === sourceIndex + 1

          const isDropIndicatorHidden =
            (isItemBeforeSource && closestEdge === "bottom") ||
            (isItemAfterSource && closestEdge === "top")

          if (isDropIndicatorHidden) {
            setClosestEdge(null)
            return
          }

          setClosestEdge(closestEdge)
        },
        onDragLeave() {
          setClosestEdge(null)
        },
        onDrop() {
          setClosestEdge(null)
        },
      }),
    )
  }, [instanceId, item, index, registerItem])

  return (
    <React.Fragment>
      <div ref={ref} className="relative border-b border-transparent">
        <div
          className={cx(
            "relative flex items-center justify-between gap-2",
            draggableState.type === "dragging" && "opacity-50",
          )}
        >
          <div className="flex items-center gap-2">
            <Checkbox
              checked={column?.getIsVisible()}
              onCheckedChange={() => column?.toggleVisibility()}
            />
            <span>{item.label}</span>
          </div>
          <Button
            aria-hidden="true"
            tabIndex={-1}
            variant="ghost"
            className="-mr-1 px-0 py-1"
            ref={dragHandleRef}
            aria-label={`Reorder ${item.label}`}
          >
            <RiDraggable className="size-5 text-gray-400 dark:text-gray-600" />
          </Button>
        </div>
        {closestEdge && <DropIndicator edge={closestEdge} gap="1px" />}
      </div>
      {draggableState.type === "preview" &&
        ReactDOM.createPortal(
          <div>{item.label}</div>,
          draggableState.container,
        )}
    </React.Fragment>
  )
}

function getItemRegistry() {
  const registry = new Map<string, HTMLElement>()

  function register({ itemId, element }: ItemEntry) {
    registry.set(itemId, element)

    return function unregister() {
      registry.delete(itemId)
    }
  }

  function getElement(itemId: string): HTMLElement | null {
    return registry.get(itemId) ?? null
  }

  return { register, getElement }
}

type ListState = {
  items: Item[]
  lastCardMoved: {
    item: Item
    previousIndex: number
    currentIndex: number
    numberOfItems: number
  } | null
}

interface DataTableViewOptionsProps<TData> {
  table: Table<TData>
}

function ViewOptions<TData>({ table }: DataTableViewOptionsProps<TData>) {
  const tableColumns: Item[] = table.getAllColumns().map((column) => ({
    id: column.id,
    label: column.columnDef.meta?.displayName as string,
  }))
  const [{ items, lastCardMoved }, setListState] = React.useState<ListState>({
    items: tableColumns,
    lastCardMoved: null,
  })
  const [registry] = React.useState(getItemRegistry)

  // Isolated instances of this component from one another
  const [instanceId] = React.useState(() => Symbol("instance-id"))

  React.useEffect(() => {
    table.setColumnOrder(items.map((item) => item.id))
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [items])

  const reorderItem = React.useCallback(
    ({
      startIndex,
      indexOfTarget,
      closestEdgeOfTarget,
    }: {
      startIndex: number
      indexOfTarget: number
      closestEdgeOfTarget: Edge | null
    }) => {
      const finishIndex = getReorderDestinationIndex({
        startIndex,
        closestEdgeOfTarget,
        indexOfTarget,
        axis: "vertical",
      })

      if (finishIndex === startIndex) {
        return
      }

      setListState((listState) => {
        const item = listState.items[startIndex]

        return {
          items: reorder({
            list: listState.items,
            startIndex,
            finishIndex,
          }),
          lastCardMoved: {
            item,
            previousIndex: startIndex,
            currentIndex: finishIndex,
            numberOfItems: listState.items.length,
          },
        }
      })
    },
    [],
  )

  React.useEffect(() => {
    return monitorForElements({
      canMonitor({ source }) {
        return isItemData(source.data) && source.data.instanceId === instanceId
      },
      onDrop({ location, source }) {
        const target = location.current.dropTargets[0]
        if (!target) {
          return
        }

        const sourceData = source.data
        const targetData = target.data
        if (!isItemData(sourceData) || !isItemData(targetData)) {
          return
        }

        const indexOfTarget = items.findIndex(
          (item) => item.id === targetData.item.id,
        )
        if (indexOfTarget < 0) {
          return
        }

        const closestEdgeOfTarget = extractClosestEdge(targetData)

        reorderItem({
          startIndex: sourceData.index,
          indexOfTarget,
          closestEdgeOfTarget,
        })
      },
    })
  }, [instanceId, items, reorderItem])

  // once a drag is finished, we have some post drop actions to take
  React.useEffect(() => {
    if (lastCardMoved === null) {
      return
    }

    const { item, previousIndex, currentIndex, numberOfItems } = lastCardMoved
    const element = registry.getElement(item.id)
    if (element) {
      triggerPostMoveFlash(element)
    }

    liveRegion.announce(
      `You've moved ${item.label} from position ${previousIndex + 1
      } to position ${currentIndex + 1} of ${numberOfItems}.`,
    )
  }, [lastCardMoved, registry])

  // cleanup the live region when this component is finished
  React.useEffect(() => {
    return function cleanup() {
      liveRegion.cleanup()
    }
  }, [])

  const getListLength = React.useCallback(() => items.length, [items.length])

  const contextValue: ListContextValue = React.useMemo(() => {
    return {
      registerItem: registry.register,
      reorderItem,
      instanceId,
      getListLength,
    }
  }, [registry.register, reorderItem, instanceId, getListLength])

  return (
    <div>
      <div className="flex justify-center">
        <Popover>
          <PopoverTrigger asChild>
            <Button
              variant="secondary"
              className={cx(
                "ml-auto hidden gap-x-2 px-2 py-1.5 text-sm sm:text-xs lg:flex",
              )}
            >
              <RiEqualizer2Line className="size-4" aria-hidden="true" />
              View
            </Button>
          </PopoverTrigger>
          <PopoverContent
            align="end"
            sideOffset={7}
            className="z-50 w-fit space-y-2"
          >
            <Label className="font-medium">Display properties</Label>
            <ListContext.Provider value={contextValue}>
              <div className="flex flex-col">
                {items.map((item, index) => {
                  const column = table.getColumn(item.id)
                  if (!column) return null
                  return (
                    <div
                      key={column.id}
                      className={cx(!column.getCanHide() && "hidden")}
                    >
                      <ListItem column={column} item={item} index={index} />
                    </div>
                  )
                })}
              </div>
            </ListContext.Provider>
          </PopoverContent>
        </Popover>
      </div>
    </div>
  )
}

export { ViewOptions }
</file>

<file path="src/components/ui/data-table/TanstackTable.d.ts">
import "@tanstack/react-table"

declare module "@tanstack/react-table" {
  interface ColumnMeta<TData extends RowData, TValue> {
    className?: string
    displayName: string
  }
}
</file>

<file path="src/components/ui/icons/ArrowAnimated.tsx">
import { cx } from "@/lib/utils"

export function ArrowAnimated({
  className,
  ...props
}: React.HTMLAttributes<SVGElement>) {
  return (
    <svg
      className={cx("-mr-1 ml-1.5 stroke-[1.5px]", className)}
      fill="none"
      stroke="currentColor"
      width="11"
      height="11"
      viewBox="0 0 10 10"
      aria-hidden="true"
      {...props}
    >
      <path
        className="opacity-0 transition group-hover:opacity-100"
        d="M0 5h7"
      />
      <path
        className="transition group-hover:translate-x-[3px]"
        d="M1 1l4 4-4 4"
      />
    </svg>
  )
}
</file>

<file path="src/components/ui/navigation/DropdownUserProfile.tsx">
"use client"

import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuSubMenu,
  DropdownMenuSubMenuContent,
  DropdownMenuSubMenuTrigger,
  DropdownMenuTrigger,
} from "@/components/Dropdown"
import {
  RiArrowRightUpLine,
  RiComputerLine,
  RiMoonLine,
  RiSunLine,
} from "@remixicon/react"
import { useTheme } from "next-themes"
import * as React from "react"

export type DropdownUserProfileProps = {
  children: React.ReactNode
  align?: "center" | "start" | "end"
}

export function DropdownUserProfile({
  children,
  align = "start",
}: DropdownUserProfileProps) {
  const [mounted, setMounted] = React.useState(false)
  const { theme, setTheme } = useTheme()
  React.useEffect(() => {
    setMounted(true)
  }, [])

  if (!mounted) {
    return null
  }
  return (
    <>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>{children}</DropdownMenuTrigger>
        <DropdownMenuContent align={align}>
          <DropdownMenuLabel>emma.stone@acme.com</DropdownMenuLabel>
          <DropdownMenuGroup>
            <DropdownMenuSubMenu>
              <DropdownMenuSubMenuTrigger>Theme</DropdownMenuSubMenuTrigger>
              <DropdownMenuSubMenuContent>
                <DropdownMenuRadioGroup
                  value={theme}
                  onValueChange={(value) => {
                    setTheme(value)
                  }}
                >
                  <DropdownMenuRadioItem
                    aria-label="Switch to Light Mode"
                    value="light"
                    iconType="check"
                  >
                    <RiSunLine className="size-4 shrink-0" aria-hidden="true" />
                    Light
                  </DropdownMenuRadioItem>
                  <DropdownMenuRadioItem
                    aria-label="Switch to Dark Mode"
                    value="dark"
                    iconType="check"
                  >
                    <RiMoonLine
                      className="size-4 shrink-0"
                      aria-hidden="true"
                    />
                    Dark
                  </DropdownMenuRadioItem>
                  <DropdownMenuRadioItem
                    aria-label="Switch to System Mode"
                    value="system"
                    iconType="check"
                  >
                    <RiComputerLine
                      className="size-4 shrink-0"
                      aria-hidden="true"
                    />
                    System
                  </DropdownMenuRadioItem>
                </DropdownMenuRadioGroup>
              </DropdownMenuSubMenuContent>
            </DropdownMenuSubMenu>
          </DropdownMenuGroup>
          <DropdownMenuSeparator />
          <DropdownMenuGroup>
            <DropdownMenuItem>
              Changelog
              <RiArrowRightUpLine
                className="mb-1 ml-1 size-2.5 shrink-0 text-gray-500"
                aria-hidden="true"
              />
            </DropdownMenuItem>
            <DropdownMenuItem>
              Documentation
              <RiArrowRightUpLine
                className="mb-1 ml-1 size-2.5 shrink-0 text-gray-500"
                aria-hidden="true"
              />
            </DropdownMenuItem>
            <DropdownMenuItem>
              Join Slack community
              <RiArrowRightUpLine
                className="mb-1 ml-1 size-2.5 shrink-0 text-gray-500"
                aria-hidden="true"
              />
            </DropdownMenuItem>
          </DropdownMenuGroup>
          <DropdownMenuSeparator />
          <DropdownMenuGroup>
            <DropdownMenuItem>Sign out</DropdownMenuItem>
          </DropdownMenuGroup>
        </DropdownMenuContent>
      </DropdownMenu>
    </>
  )
}
</file>

<file path="src/components/ui/navigation/ModalAddWorkspace.tsx">
import { Badge } from "@/components/Badge"
import { Button } from "@/components/Button"
import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/Dialog"
import { DropdownMenuItem } from "@/components/Dropdown"
import { Input } from "@/components/Input"
import { Label } from "@/components/Label"
import {
  RadioCardGroup,
  RadioCardGroupIndicator,
  RadioCardItem,
} from "@/components/RadioCard"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/Select"

export const databases: {
  label: string
  value: string
  description: string
  isRecommended: boolean
}[] = [
  {
    label: "Base performance",
    value: "base-performance",
    description: "1/8 vCPU, 1 GB RAM",
    isRecommended: true,
  },
  {
    label: "Advanced performance",
    value: "advanced-performance",
    description: "1/4 vCPU, 2 GB RAM",
    isRecommended: false,
  },
  {
    label: "Turbo performance",
    value: "turbo-performance",
    description: "1/2 vCPU, 4 GB RAM",
    isRecommended: false,
  },
]

export type ModalProps = {
  itemName: string
  onSelect: () => void
  onOpenChange: (open: boolean) => void
}

export function ModalAddWorkspace({
  itemName,
  onSelect,
  onOpenChange,
}: ModalProps) {
  return (
    <>
      <Dialog onOpenChange={onOpenChange}>
        <DialogTrigger className="w-full text-left">
          <DropdownMenuItem
            onSelect={(event) => {
              event.preventDefault()
              onSelect && onSelect()
            }}
          >
            {itemName}
          </DropdownMenuItem>
        </DialogTrigger>
        <DialogContent className="sm:max-w-2xl">
          <form>
            <DialogHeader>
              <DialogTitle>Add new workspace</DialogTitle>
              <DialogDescription className="mt-1 text-sm leading-6">
                With free plan, you can add up to 10 workspaces.
              </DialogDescription>
              <div className="mt-4 grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="workspace-name" className="font-medium">
                    Workspace name
                  </Label>
                  <Input
                    id="workspace-name"
                    name="workspace-name"
                    placeholder="my_workspace"
                    className="mt-2"
                  />
                </div>
                <div>
                  <Label htmlFor="starter-kit" className="font-medium">
                    Starter kit
                  </Label>
                  <Select defaultValue="empty-workspace">
                    <SelectTrigger
                      id="starter-kit"
                      name="starter-kit"
                      className="mt-2"
                    >
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="empty-workspace">
                        None - Empty workspace
                      </SelectItem>
                      <SelectItem value="commerce-analytics">
                        Commerce analytics
                      </SelectItem>
                      <SelectItem value="product-analytics">
                        Product analytics
                      </SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="col-span-full">
                  <Label htmlFor="database-region" className="font-medium">
                    Database region
                  </Label>
                  <Select defaultValue="europe-west-01">
                    <SelectTrigger
                      id="database-region"
                      name="database-region"
                      className="mt-2"
                    >
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="europe-west-01">
                        europe-west-01
                      </SelectItem>
                      <SelectItem value="us-east-02">us-east-02</SelectItem>
                      <SelectItem value="us-west-01">us-west-01</SelectItem>
                    </SelectContent>
                  </Select>
                  <p className="mt-2 text-xs text-gray-500">
                    For best performance, choose a region closest to your
                    application.
                  </p>
                </div>
              </div>
              <div className="mt-4">
                <Label htmlFor="database" className="font-medium">
                  Database configuration
                </Label>
                <RadioCardGroup
                  defaultValue={databases[0].value}
                  className="mt-2 grid grid-cols-1 gap-4 text-sm md:grid-cols-2"
                >
                  {databases.map((database) => (
                    <RadioCardItem key={database.value} value={database.value}>
                      <div className="flex items-start gap-3">
                        <RadioCardGroupIndicator className="mt-0.5" />
                        <div>
                          {database.isRecommended ? (
                            <div className="flex items-center gap-2">
                              <span className="leading-5">
                                {database.label}
                              </span>
                              <Badge>Recommended</Badge>
                            </div>
                          ) : (
                            <span>{database.label}</span>
                          )}
                          <p className="mt-1 text-xs text-gray-500">
                            1/8 vCPU, 1 GB RAM
                          </p>
                        </div>
                      </div>
                    </RadioCardItem>
                  ))}
                </RadioCardGroup>
              </div>
            </DialogHeader>
            <DialogFooter className="mt-6">
              <DialogClose asChild>
                <Button
                  className="mt-2 w-full sm:mt-0 sm:w-fit"
                  variant="secondary"
                >
                  Go back
                </Button>
              </DialogClose>
              <DialogClose asChild>
                <Button type="submit" className="w-full sm:w-fit">
                  Add workspace
                </Button>
              </DialogClose>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>
    </>
  )
}
</file>

<file path="src/components/ui/navigation/UserProfile.tsx">
"use client"

import { Button } from "@/components/Button"
import { cx, focusRing } from "@/lib/utils"
import { RiMore2Fill } from "@remixicon/react"

import { DropdownUserProfile } from "./DropdownUserProfile"

export const UserProfileDesktop = () => {
  return (
    <DropdownUserProfile>
      <Button
        aria-label="User settings"
        variant="ghost"
        className={cx(
          focusRing,
          "group flex w-full items-center justify-between rounded-md p-2 text-sm font-medium text-gray-900 hover:bg-gray-100 data-[state=open]:bg-gray-100 data-[state=open]:bg-gray-400/10 hover:dark:bg-gray-400/10",
        )}
      >
        <span className="flex items-center gap-3">
          <span
            className="flex size-8 shrink-0 items-center justify-center rounded-full border border-gray-300 bg-white text-xs text-gray-700 dark:border-gray-800 dark:bg-gray-950 dark:text-gray-300"
            aria-hidden="true"
          >
            ES
          </span>
          <span>Emma Stone</span>
        </span>
        <RiMore2Fill
          className="size-4 shrink-0 text-gray-500 group-hover:text-gray-700 group-hover:dark:text-gray-400"
          aria-hidden="true"
        />
      </Button>
    </DropdownUserProfile>
  )
}

export const UserProfileMobile = () => {
  return (
    <DropdownUserProfile align="end">
      <Button
        aria-label="User settings"
        variant="ghost"
        className={cx(
          "group flex items-center rounded-md p-1 text-sm font-medium text-gray-900 hover:bg-gray-100 data-[state=open]:bg-gray-100 data-[state=open]:bg-gray-400/10 hover:dark:bg-gray-400/10",
        )}
      >
        <span
          className="flex size-7 shrink-0 items-center justify-center rounded-full border border-gray-300 bg-white text-xs text-gray-700 dark:border-gray-800 dark:bg-gray-950 dark:text-gray-300"
          aria-hidden="true"
        >
          ES
        </span>
      </Button>
    </DropdownUserProfile>
  )
}
</file>

<file path="src/components/ui/overview/DashboardFilterbar.tsx">
"use client"

import {
  Select,
  SelectContent,
  SelectItemPeriod,
  SelectTrigger,
  SelectValue,
} from "@/components/Select"

import { Label } from "@/components/Label"

import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/Dialog"

import { PeriodValue } from "@/app/(main)/overview/page"
import { Button } from "@/components/Button"
import { Checkbox } from "@/components/Checkbox"
import { DateRangePicker } from "@/components/DatePicker"
import { cx } from "@/lib/utils"
import { RiSettings5Line } from "@remixicon/react"
import { eachDayOfInterval, interval, subDays, subYears } from "date-fns"
import React from "react"
import { DateRange } from "react-day-picker"
import { ChartCard } from "./DashboardChartCard"

type Period = {
  value: PeriodValue
  label: string
}

const periods: Period[] = [
  {
    value: "previous-period",
    label: "Previous period",
  },
  {
    value: "last-year",
    label: "Last year",
  },
  {
    value: "no-comparison",
    label: "No comparison",
  },
]

export const getPeriod = (
  dateRange: DateRange | undefined,
  value: PeriodValue,
): DateRange | undefined => {
  if (!dateRange) return undefined
  const from = dateRange.from
  const to = dateRange.to
  switch (value) {
    case "previous-period":
      let previousPeriodFrom
      let previousPeriodTo
      if (from && to) {
        const datesInterval = interval(from, to)
        const numberOfDaysBetween = eachDayOfInterval(datesInterval).length
        previousPeriodTo = subDays(from, 1)
        previousPeriodFrom = subDays(previousPeriodTo, numberOfDaysBetween)
      }
      return { from: previousPeriodFrom, to: previousPeriodTo }
    case "last-year":
      let lastYearFrom
      let lastYearTo
      if (from) {
        lastYearFrom = subYears(from, 1)
      }
      if (to) {
        lastYearTo = subYears(to, 1)
      }
      return { from: lastYearFrom, to: lastYearTo }
    case "no-comparison":
      return undefined
  }
}

type FilterbarProps = {
  maxDate?: Date
  minDate?: Date
  selectedDates: DateRange | undefined
  onDatesChange: (dates: DateRange | undefined) => void
  selectedPeriod: PeriodValue
  onPeriodChange: (period: PeriodValue) => void
  categories: any[]
  setSelectedCategories: any
  selectedCategories: any
}

export function Filterbar({
  maxDate,
  minDate,
  selectedDates,
  onDatesChange,
  selectedPeriod,
  onPeriodChange,
  categories,
  setSelectedCategories,
  selectedCategories,
}: FilterbarProps) {
  const [tempSelectedCategories, setTempSelectedCategories] =
    React.useState(selectedCategories)

  const handleCategoryChange = (category: string) => {
    setTempSelectedCategories((prev: any) =>
      prev.includes(category)
        ? prev.filter((item: any) => item !== category)
        : [...prev, category],
    )
  }

  const handleApply = () => {
    setSelectedCategories(tempSelectedCategories)
  }
  return (
    <div className="flex w-full justify-between">
      <div className="w-full sm:flex sm:items-center sm:gap-2">
        <DateRangePicker
          value={selectedDates}
          onChange={onDatesChange}
          className="w-full sm:w-fit"
          toDate={maxDate}
          fromDate={minDate}
          align="start"
        />
        <span className="hidden text-sm font-medium text-gray-500 sm:block">
          compared to
        </span>
        <Select
          defaultValue="no-comparison"
          value={selectedPeriod}
          onValueChange={(value) => {
            onPeriodChange(value as PeriodValue)
          }}
        >
          <SelectTrigger className="mt-2 w-full sm:mt-0 sm:w-fit">
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            {periods.map((period) => (
              <SelectItemPeriod
                key={period.value}
                value={period.value}
                period={getPeriod(selectedDates, period.value)}
              >
                {period.label}
              </SelectItemPeriod>
            ))}
          </SelectContent>
        </Select>
      </div>
      <Dialog>
        <DialogTrigger asChild>
          <Button
            variant="secondary"
            className="hidden gap-2 px-2 py-1 sm:flex"
          >
            <RiSettings5Line
              className="-ml-0.5 size-4 shrink-0"
              aria-hidden="true"
            />
            <span>Edit</span>
          </Button>
        </DialogTrigger>
        <DialogContent className="max-w-5xl">
          <DialogHeader>
            <DialogTitle>Customise overview charts</DialogTitle>
            <DialogDescription className="sr-only">
              Add or remove the charts for the overview panel.
            </DialogDescription>
          </DialogHeader>
          <div
            className={cx(
              "mt-8 grid max-h-[70vh] grid-cols-1 gap-4 overflow-y-scroll sm:grid-cols-1 md:grid-cols-2 xl:grid-cols-3",
            )}
          >
            {categories.map((category) => {
              return (
                <Label
                  htmlFor={category.title}
                  key={category.title}
                  className="relative cursor-pointer rounded-md border border-gray-200 p-4 shadow-sm dark:border-gray-800"
                >
                  <Checkbox
                    id={category.title}
                    className="absolute right-4"
                    checked={tempSelectedCategories.includes(category.title)}
                    onCheckedChange={() => handleCategoryChange(category.title)}
                  />
                  <div className="pointer-events-none">
                    <ChartCard
                      title={category.title}
                      type={category.type}
                      selectedDates={selectedDates}
                      selectedPeriod={selectedPeriod}
                      isThumbnail={true}
                    />
                  </div>
                </Label>
              )
            })}
          </div>
          <DialogFooter className="mt-6">
            <DialogClose asChild>
              <Button
                className="mt-2 w-full sm:mt-0 sm:w-fit"
                variant="secondary"
              >
                Cancel
              </Button>
            </DialogClose>
            <DialogClose asChild>
              <Button className="w-full sm:w-fit" onClick={handleApply}>
                Apply
              </Button>
            </DialogClose>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}
</file>

<file path="src/components/ui/overview/FeatureBento.tsx">
export default function FeatureBento() {
    return (
        <div className="bg-gray-50 py-24 sm:py-32">
            <div className="mx-auto max-w-2xl px-6 lg:max-w-7xl lg:px-8">
                <h2 className="text-center text-base/7 font-semibold text-indigo-600">Deploy faster</h2>
                <p className="mx-auto mt-2 max-w-lg text-balance text-center text-4xl font-semibold tracking-tight text-gray-950 sm:text-5xl">
                    Everything you need to deploy your app
                </p>
                <div className="mt-10 grid gap-4 sm:mt-16 lg:grid-cols-3 lg:grid-rows-2">
                    <div className="relative lg:row-span-2">
                        <div className="absolute inset-px rounded-lg bg-white lg:rounded-l-[2rem]"></div>
                        <div className="relative flex h-full flex-col overflow-hidden rounded-[calc(theme(borderRadius.lg)+1px)] lg:rounded-l-[calc(2rem+1px)]">
                            <div className="px-8 pb-3 pt-8 sm:px-10 sm:pb-0 sm:pt-10">
                                <p className="mt-2 text-lg font-medium tracking-tight text-gray-950 max-lg:text-center">
                                    Mobile friendly
                                </p>
                                <p className="mt-2 max-w-lg text-sm/6 text-gray-600 max-lg:text-center">
                                    Anim aute id magna aliqua ad ad non deserunt sunt. Qui irure qui lorem cupidatat commodo.
                                </p>
                            </div>
                            <div className="relative min-h-[30rem] w-full grow [container-type:inline-size] max-lg:mx-auto max-lg:max-w-sm">
                                <div className="absolute inset-x-10 bottom-0 top-10 overflow-hidden rounded-t-[12cqw] border-x-[3cqw] border-t-[3cqw] border-gray-700 bg-gray-900 shadow-2xl">
                                    <img
                                        className="size-full object-cover object-top"
                                        src="https://tailwindcss.com/plus-assets/img/component-images/bento-03-mobile-friendly.png"
                                        alt=""
                                    />
                                </div>
                            </div>
                        </div>
                        <div className="pointer-events-none absolute inset-px rounded-lg shadow ring-1 ring-black/5 lg:rounded-l-[2rem]"></div>
                    </div>
                    <div className="relative max-lg:row-start-1">
                        <div className="absolute inset-px rounded-lg bg-white max-lg:rounded-t-[2rem]"></div>
                        <div className="relative flex h-full flex-col overflow-hidden rounded-[calc(theme(borderRadius.lg)+1px)] max-lg:rounded-t-[calc(2rem+1px)]">
                            <div className="px-8 pt-8 sm:px-10 sm:pt-10">
                                <p className="mt-2 text-lg font-medium tracking-tight text-gray-950 max-lg:text-center">Performance</p>
                                <p className="mt-2 max-w-lg text-sm/6 text-gray-600 max-lg:text-center">
                                    Lorem ipsum, dolor sit amet consectetur adipisicing elit maiores impedit.
                                </p>
                            </div>
                            <div className="flex flex-1 items-center justify-center px-8 max-lg:pb-12 max-lg:pt-10 sm:px-10 lg:pb-2">
                                <img
                                    className="w-full max-lg:max-w-xs"
                                    src="https://tailwindcss.com/plus-assets/img/component-images/bento-03-performance.png"
                                    alt=""
                                />
                            </div>
                        </div>
                        <div className="pointer-events-none absolute inset-px rounded-lg shadow ring-1 ring-black/5 max-lg:rounded-t-[2rem]"></div>
                    </div>
                    <div className="relative max-lg:row-start-3 lg:col-start-2 lg:row-start-2">
                        <div className="absolute inset-px rounded-lg bg-white"></div>
                        <div className="relative flex h-full flex-col overflow-hidden rounded-[calc(theme(borderRadius.lg)+1px)]">
                            <div className="px-8 pt-8 sm:px-10 sm:pt-10">
                                <p className="mt-2 text-lg font-medium tracking-tight text-gray-950 max-lg:text-center">Security</p>
                                <p className="mt-2 max-w-lg text-sm/6 text-gray-600 max-lg:text-center">
                                    Morbi viverra dui mi arcu sed. Tellus semper adipiscing suspendisse semper morbi.
                                </p>
                            </div>
                            <div className="flex flex-1 items-center [container-type:inline-size] max-lg:py-6 lg:pb-2">
                                <img
                                    className="h-[min(152px,40cqw)] object-cover"
                                    src="https://tailwindcss.com/plus-assets/img/component-images/bento-03-security.png"
                                    alt=""
                                />
                            </div>
                        </div>
                        <div className="pointer-events-none absolute inset-px rounded-lg shadow ring-1 ring-black/5"></div>
                    </div>
                    <div className="relative lg:row-span-2">
                        <div className="absolute inset-px rounded-lg bg-white max-lg:rounded-b-[2rem] lg:rounded-r-[2rem]"></div>
                        <div className="relative flex h-full flex-col overflow-hidden rounded-[calc(theme(borderRadius.lg)+1px)] max-lg:rounded-b-[calc(2rem+1px)] lg:rounded-r-[calc(2rem+1px)]">
                            <div className="px-8 pb-3 pt-8 sm:px-10 sm:pb-0 sm:pt-10">
                                <p className="mt-2 text-lg font-medium tracking-tight text-gray-950 max-lg:text-center">
                                    Powerful APIs
                                </p>
                                <p className="mt-2 max-w-lg text-sm/6 text-gray-600 max-lg:text-center">
                                    Sit quis amet rutrum tellus ullamcorper ultricies libero dolor eget sem sodales gravida.
                                </p>
                            </div>
                            <div className="relative min-h-[30rem] w-full grow">
                                <div className="absolute bottom-0 left-10 right-0 top-10 overflow-hidden rounded-tl-xl bg-gray-900 shadow-2xl">
                                    <div className="flex bg-gray-800/40 ring-1 ring-white/5">
                                        <div className="-mb-px flex text-sm/6 font-medium text-gray-400">
                                            <div className="border-b border-r border-b-white/20 border-r-white/10 bg-white/5 px-4 py-2 text-white">
                                                NotificationSetting.jsx
                                            </div>
                                            <div className="border-r border-gray-600/10 px-4 py-2">App.jsx</div>
                                        </div>
                                    </div>
                                    <div className="px-6 pb-14 pt-6">{/* Your code example */}</div>
                                </div>
                            </div>
                        </div>
                        <div className="pointer-events-none absolute inset-px rounded-lg shadow ring-1 ring-black/5 max-lg:rounded-b-[2rem] lg:rounded-r-[2rem]"></div>
                    </div>
                </div>
            </div>
        </div>
    )
}
</file>

<file path="src/components/ui/overview/HeroGlobe.tsx">
'use client';

import createGlobe from 'cobe';
import { useEffect, useRef } from 'react';

export default function HeroGlobe() {
    const canvasRef = useRef(null);

    useEffect(() => {
        let phi = 4.7;

        if (!canvasRef.current) return;

        const globe = createGlobe(canvasRef.current, {
            devicePixelRatio: 2,
            width: 1200 * 2,
            height: 1200 * 2,
            phi: 0,
            theta: -0.3,
            dark: 1,
            diffuse: 1.2,
            mapSamples: 25000,
            mapBrightness: 13,
            mapBaseBrightness: 0.05,
            baseColor: [0.3, 0.3, 0.3],
            glowColor: [0.15, 0.15, 0.15],
            markerColor: [100, 100, 100],
            markers: [
                // { location: [37.7595, -122.4367], size: 0.03 }, // San Francisco
                // { location: [40.7128, -74.006], size: 0.03 }, // New York City
                // { location: [35.6895, 139.6917], size: 0.03 }, // Tokyo
                // { location: [28.7041, 77.1025], size: 0.03 }, // Delhi
            ],
            onRender: (state) => {
                state.phi = phi;
                phi += 0.0002;
            },
        });

        return () => {
            globe.destroy();
        };
    }, []);

    const features = [
        {
            name: 'Global Clusters',
            description: 'Enable low-latency global access, enhancing performance.',
        },
        {
            name: 'Serverless Triggers',
            description: 'Trigger functions automatically for dynamic app behavior.',
        },
        {
            name: 'Monitoring & Alerts',
            description:
                'Monitor health with key metrics or integrate third-party tools.',
        },
    ];

    return (
        <>
            <div className="sm:px-3">
                <div className="relative mx-auto flex w-full max-w-6xl flex-col items-center justify-center overflow-hidden rounded-3xl bg-gray-950 pt-24 shadow-xl shadow-black/30">
                    <div className="absolute top-[17rem] size-[40rem] rounded-full bg-blue-800 blur-3xl md:top-[20rem]" />
                    <div className="z-10 inline-block rounded-lg border border-blue-400/20 bg-blue-800/20 px-3 py-1.5 font-semibold uppercase leading-4 tracking-tight sm:text-sm">
                        <span className="bg-gradient-to-b from-blue-200 to-blue-400 bg-clip-text text-transparent">
                            Made for the cloud
                        </span>
                    </div>
                    <h2
                        id="global-database-title"
                        className="z-10 mt-6 inline-block bg-gradient-to-b from-white to-blue-100 bg-clip-text px-2 text-center text-5xl font-bold tracking-tighter text-transparent md:text-8xl"
                    >
                        The global <br className="md:bock hidden" /> cloud database
                    </h2>
                    <canvas
                        className="absolute top-[10rem] z-20 aspect-square size-full max-w-fit sm:top-[7.1rem] md:top-[12rem]"
                        ref={canvasRef}
                        style={{ width: 1200, height: 1200 }}
                    />
                    <div className="z-20 -mt-32 h-[36rem] w-full overflow-hidden md:-mt-36">
                        <div className="absolute bottom-0 h-3/5 w-full bg-gradient-to-b from-transparent via-gray-950/95 to-gray-950" />
                        <div className="absolute inset-x-6 bottom-12 m-auto max-w-4xl md:top-2/3">
                            <div className="grid grid-cols-1 gap-x-10 gap-y-6 rounded-lg border border-white/[3%] bg-white/[1%] px-6 py-6 shadow-xl backdrop-blur md:grid-cols-3 md:p-8">
                                {features.map((item) => (
                                    <div key={item.name} className="flex flex-col gap-2">
                                        <h3 className="whitespace-nowrap bg-gradient-to-b from-blue-300 to-blue-500 bg-clip-text text-lg font-semibold text-transparent md:text-xl">
                                            {item.name}
                                        </h3>
                                        <p className="text-sm leading-6 text-blue-200/40">
                                            {item.description}
                                        </p>
                                    </div>
                                ))}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </>
    );
}
</file>

<file path="src/components/ui/settings/ModalAddUser.tsx">
import { Button } from "@/components/Button"
import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/Dialog"
import { Input } from "@/components/Input"
import { Label } from "@/components/Label"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/Select"
import { roles } from "@/data/data"

export type ModalAddUserProps = {
  children: React.ReactNode
}

export function ModalAddUser({ children }: ModalAddUserProps) {
  return (
    <Dialog>
      <DialogTrigger asChild>{children}</DialogTrigger>
      <DialogContent className="sm:max-w-lg">
        <form>
          <DialogHeader>
            <DialogTitle>Invite people to your workspace</DialogTitle>
            <DialogDescription className="mt-1 text-sm leading-6">
              With free plan, you can add up to 10 users to each workspace.
            </DialogDescription>
            <div className="mt-4">
              <Label htmlFor="email-new-user" className="font-medium">
                Email
              </Label>
              <Input
                id="email-new-user"
                name="email-new-user"
                placeholder="Insert email..."
                className="mt-2"
              />
            </div>
            <div className="mt-4">
              <Label htmlFor="role-new-user" className="font-medium">
                Select role
              </Label>
              <Select>
                <SelectTrigger
                  id="role-new-user"
                  name="role-new-user"
                  className="mt-2"
                >
                  <SelectValue placeholder="Select role..." />
                </SelectTrigger>
                <SelectContent align="end">
                  {roles.map((role) => (
                    <SelectItem
                      key={role.value}
                      value={role.value}
                      disabled={role.value === "admin"}
                    >
                      {role.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </DialogHeader>
          <DialogFooter className="mt-6">
            <DialogClose asChild>
              <Button
                className="mt-2 w-full sm:mt-0 sm:w-fit"
                variant="secondary"
              >
                Go back
              </Button>
            </DialogClose>
            <DialogClose asChild>
              <Button type="submit" className="w-full sm:w-fit">
                Add user
              </Button>
            </DialogClose>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  )
}
</file>

<file path="src/components/Badge.tsx">
// Tremor Raw Badge [v0.0.0]

import React from "react"
import { tv, type VariantProps } from "tailwind-variants"

import { cx } from "@/lib/utils"

const badgeVariants = tv({
  base: cx(
    "inline-flex items-center gap-x-1 whitespace-nowrap rounded px-1.5 py-0.5 text-xs font-semibold ring-1",
  ),
  variants: {
    variant: {
      default: [
        "bg-indigo-50 text-indigo-800 ring-indigo-500/30",
        "dark:bg-indigo-400/10 dark:text-indigo-400 dark:ring-indigo-400/30",
      ],
      neutral: [
        "bg-gray-50 text-gray-700 ring-gray-500/30",
        "dark:bg-gray-400/10 dark:text-gray-300 dark:ring-gray-400/20",
      ],
      success: [
        "bg-emerald-50 text-emerald-800 ring-emerald-600/30",
        "dark:bg-emerald-400/10 dark:text-emerald-400 dark:ring-emerald-400/20",
      ],
      error: [
        "bg-red-50 text-red-800 ring-red-600/20",
        "dark:bg-red-400/10 dark:text-red-400 dark:ring-red-400/20",
      ],
      warning: [
        "bg-yellow-50 text-yellow-800 ring-yellow-600/30",
        "dark:bg-yellow-400/10 dark:text-yellow-500 dark:ring-yellow-400/20",
      ],
    },
  },
  defaultVariants: {
    variant: "default",
  },
})

interface BadgeProps
  extends React.ComponentPropsWithoutRef<"span">,
    VariantProps<typeof badgeVariants> {}

const Badge = React.forwardRef<HTMLSpanElement, BadgeProps>(
  ({ className, variant, ...props }: BadgeProps, forwardedRef) => {
    return (
      <span
        ref={forwardedRef}
        className={cx(badgeVariants({ variant }), className)}
        {...props}
      />
    )
  },
)

Badge.displayName = "Badge"

export { Badge, badgeVariants, type BadgeProps }
</file>

<file path="src/components/Button.tsx">
// Tremor Raw Button [v0.1.1]

import { Slot } from "@radix-ui/react-slot"
import { RiLoader2Fill } from "@remixicon/react"
import React from "react"
import { tv, type VariantProps } from "tailwind-variants"

import { cx, focusRing } from "@/lib/utils"

const buttonVariants = tv({
  base: [
    // base
    "relative inline-flex items-center justify-center whitespace-nowrap rounded-md border px-3 py-2 text-center text-sm font-medium shadow-sm transition-all duration-100 ease-in-out",
    // disabled
    "disabled:pointer-events-none disabled:shadow-none",
    // focus
    focusRing,
  ],
  variants: {
    variant: {
      primary: [
        // border
        "border-transparent",
        // text color
        "text-white dark:text-gray-900",
        // background color
        "bg-indigo-600 dark:bg-indigo-500",
        // hover color
        "hover:bg-indigo-500 dark:hover:bg-indigo-600",
        // disabled
        "disabled:bg-indigo-100 disabled:text-gray-400",
        "disabled:dark:bg-indigo-800 disabled:dark:text-indigo-400",
      ],
      secondary: [
        // border
        "border-gray-300 dark:border-gray-800",
        // text color
        "text-gray-900 dark:text-gray-50",
        // background color
        "bg-white dark:bg-gray-950",
        //hover color
        "hover:bg-gray-50 dark:hover:bg-gray-900/60",
        // disabled
        "disabled:text-gray-400",
        "disabled:dark:text-gray-600",
      ],
      light: [
        // base
        "shadow-none",
        // border
        "border-transparent",
        // text color
        "text-gray-900 dark:text-gray-50",
        // background color
        "bg-gray-200 dark:bg-gray-900",
        // hover color
        "hover:bg-gray-300/70 dark:hover:bg-gray-800/80",
        // disabled
        "disabled:bg-gray-100 disabled:text-gray-400",
        "disabled:dark:bg-gray-800 disabled:dark:text-gray-600",
      ],
      ghost: [
        // base
        "shadow-none",
        // border
        "border-transparent",
        // text color
        "text-gray-900 dark:text-gray-50",
        // hover color
        "bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800/80",
        // disabled
        "disabled:text-gray-400",
        "disabled:dark:text-gray-600",
      ],
      destructive: [
        // text color
        "text-white",
        // border
        "border-transparent",
        // background color
        "bg-red-600 dark:bg-red-700",
        // hover color
        "hover:bg-red-700 dark:hover:bg-red-600",
        // disabled
        "disabled:bg-red-300 disabled:text-white",
        "disabled:dark:bg-red-950 disabled:dark:text-red-400",
      ],
    },
  },
  defaultVariants: {
    variant: "primary",
  },
})

interface ButtonProps
  extends React.ComponentPropsWithoutRef<"button">,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
  isLoading?: boolean
  loadingText?: string
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  (
    {
      asChild,
      isLoading = false,
      loadingText,
      className,
      disabled,
      variant,
      children,
      ...props
    }: ButtonProps,
    forwardedRef,
  ) => {
    const Component = asChild ? Slot : "button"
    return (
      <Component
        ref={forwardedRef}
        className={cx(buttonVariants({ variant }), className)}
        disabled={disabled || isLoading}
        {...props}
      >
        {isLoading ? (
          <span className="pointer-events-none flex shrink-0 items-center justify-center gap-1.5">
            <RiLoader2Fill
              className="size-4 shrink-0 animate-spin"
              aria-hidden="true"
            />
            <span className="sr-only">
              {loadingText ? loadingText : "Loading"}
            </span>
            {loadingText ? loadingText : children}
          </span>
        ) : (
          children
        )}
      </Component>
    )
  },
)

Button.displayName = "Button"

export { Button, buttonVariants, type ButtonProps }
</file>

<file path="src/components/Calendar.tsx">
// Tremor Raw Calendar [v0.0.4]

"use client"

import {
  RiArrowLeftDoubleLine,
  RiArrowLeftSLine,
  RiArrowRightDoubleLine,
  RiArrowRightSLine,
} from "@remixicon/react"
import { addYears, format, isSameMonth } from "date-fns"
import * as React from "react"
import {
  DayPicker,
  useDayPicker,
  useDayRender,
  useNavigation,
  type DayPickerRangeProps,
  type DayPickerSingleProps,
  type DayProps,
  type Matcher,
} from "react-day-picker"

import { cx, focusRing } from "@/lib/utils"

interface NavigationButtonProps
  extends React.HTMLAttributes<HTMLButtonElement> {
  onClick: () => void
  icon: React.ElementType
  disabled?: boolean
}

const NavigationButton = React.forwardRef<
  HTMLButtonElement,
  NavigationButtonProps
>(
  (
    { onClick, icon, disabled, ...props }: NavigationButtonProps,
    forwardedRef,
  ) => {
    const Icon = icon
    return (
      <button
        ref={forwardedRef}
        type="button"
        disabled={disabled}
        className={cx(
          "flex size-8 shrink-0 select-none items-center justify-center rounded border p-1 outline-none transition sm:size-[30px]",
          // text color
          "text-gray-600 hover:text-gray-800",
          "dark:text-gray-400 hover:dark:text-gray-200",
          // border color
          "border-gray-300 dark:border-gray-800",
          // background color
          "hover:bg-gray-50 active:bg-gray-100",
          "hover:dark:bg-gray-900 active:dark:bg-gray-800",
          // disabled
          "disabled:pointer-events-none",
          "disabled:border-gray-200 disabled:dark:border-gray-800",
          "disabled:text-gray-400 disabled:dark:text-gray-600",
          focusRing,
        )}
        onClick={onClick}
        {...props}
      >
        <Icon className="size-full shrink-0" />
      </button>
    )
  },
)

NavigationButton.displayName = "NavigationButton"

type OmitKeys<T, K extends keyof T> = {
  [P in keyof T as P extends K ? never : P]: T[P]
}

type KeysToOmit = "showWeekNumber" | "captionLayout" | "mode"

type SingleProps = OmitKeys<DayPickerSingleProps, KeysToOmit>
type RangeProps = OmitKeys<DayPickerRangeProps, KeysToOmit>

type CalendarProps =
  | ({
      mode: "single"
    } & SingleProps)
  | ({
      mode?: undefined
    } & SingleProps)
  | ({
      mode: "range"
    } & RangeProps)

const Calendar = ({
  mode = "single",
  weekStartsOn = 1,
  numberOfMonths = 1,
  enableYearNavigation = false,
  disableNavigation,
  locale,
  className,
  classNames,
  ...props
}: CalendarProps & { enableYearNavigation?: boolean }) => {
  return (
    <DayPicker
      mode={mode}
      weekStartsOn={weekStartsOn}
      numberOfMonths={numberOfMonths}
      locale={locale}
      showOutsideDays={numberOfMonths === 1}
      className={cx(className)}
      classNames={{
        months: "flex space-y-0",
        month: "space-y-4 p-3",
        nav: "gap-1 flex items-center rounded-full size-full justify-between p-4",
        table: "w-full border-collapse space-y-1",
        head_cell:
          "w-9 font-medium text-sm sm:text-xs text-center text-gray-400 dark:text-gray-600 pb-2",
        row: "w-full mt-0.5",
        cell: cx(
          "relative p-0 text-center focus-within:relative",
          "text-gray-900 dark:text-gray-50",
        ),
        day: cx(
          "size-9 rounded text-sm text-gray-900 focus:z-10 dark:text-gray-50",
          "hover:bg-gray-200 hover:dark:bg-gray-700",
          focusRing,
        ),
        day_today: "font-semibold",
        day_selected: cx(
          "rounded",
          "aria-selected:bg-indigo-600 aria-selected:text-gray-50",
          "dark:aria-selected:bg-indigo-500 dark:aria-selected:text-gray-50",
        ),
        day_disabled:
          "!text-gray-300 dark:!text-gray-700 line-through disabled:hover:bg-transparent",
        day_outside: "text-gray-400 dark:text-gray-600",
        day_range_middle: cx(
          "!rounded-none",
          "aria-selected:!bg-gray-100 aria-selected:!text-gray-900",
          "dark:aria-selected:!bg-gray-900 dark:aria-selected:!text-gray-50",
        ),
        day_range_start: "rounded-r-none !rounded-l",
        day_range_end: "rounded-l-none !rounded-r",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: () => (
          <RiArrowLeftSLine aria-hidden="true" className="size-4" />
        ),
        IconRight: () => (
          <RiArrowRightSLine aria-hidden="true" className="size-4" />
        ),
        Caption: ({ ...props }) => {
          const {
            goToMonth,
            nextMonth,
            previousMonth,
            currentMonth,
            displayMonths,
          } = useNavigation()
          const { numberOfMonths, fromDate, toDate } = useDayPicker()

          const displayIndex = displayMonths.findIndex((month) =>
            isSameMonth(props.displayMonth, month),
          )
          const isFirst = displayIndex === 0
          const isLast = displayIndex === displayMonths.length - 1

          const hideNextButton = numberOfMonths > 1 && (isFirst || !isLast)
          const hidePreviousButton = numberOfMonths > 1 && (isLast || !isFirst)

          const goToPreviousYear = () => {
            const targetMonth = addYears(currentMonth, -1)
            if (
              previousMonth &&
              (!fromDate || targetMonth.getTime() >= fromDate.getTime())
            ) {
              goToMonth(targetMonth)
            }
          }

          const goToNextYear = () => {
            const targetMonth = addYears(currentMonth, 1)
            if (
              nextMonth &&
              (!toDate || targetMonth.getTime() <= toDate.getTime())
            ) {
              goToMonth(targetMonth)
            }
          }

          return (
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-1">
                {enableYearNavigation && !hidePreviousButton && (
                  <NavigationButton
                    disabled={
                      disableNavigation ||
                      !previousMonth ||
                      (fromDate &&
                        addYears(currentMonth, -1).getTime() <
                          fromDate.getTime())
                    }
                    aria-label="Go to previous year"
                    onClick={goToPreviousYear}
                    icon={RiArrowLeftDoubleLine}
                  />
                )}
                {!hidePreviousButton && (
                  <NavigationButton
                    disabled={disableNavigation || !previousMonth}
                    aria-label="Go to previous month"
                    onClick={() => previousMonth && goToMonth(previousMonth)}
                    icon={RiArrowLeftSLine}
                  />
                )}
              </div>

              <div
                role="presentation"
                aria-live="polite"
                className="text-sm font-medium capitalize tabular-nums text-gray-900 dark:text-gray-50"
              >
                {format(props.displayMonth, "LLLL yyy", { locale })}
              </div>

              <div className="flex items-center gap-1">
                {!hideNextButton && (
                  <NavigationButton
                    disabled={disableNavigation || !nextMonth}
                    aria-label="Go to next month"
                    onClick={() => nextMonth && goToMonth(nextMonth)}
                    icon={RiArrowRightSLine}
                  />
                )}
                {enableYearNavigation && !hideNextButton && (
                  <NavigationButton
                    disabled={
                      disableNavigation ||
                      !nextMonth ||
                      (toDate &&
                        addYears(currentMonth, 1).getTime() > toDate.getTime())
                    }
                    aria-label="Go to next year"
                    onClick={goToNextYear}
                    icon={RiArrowRightDoubleLine}
                  />
                )}
              </div>
            </div>
          )
        },
        Day: ({ date, displayMonth }: DayProps) => {
          const buttonRef = React.useRef<HTMLButtonElement>(null)
          const { activeModifiers, buttonProps, divProps, isButton, isHidden } =
            useDayRender(date, displayMonth, buttonRef)

          const { selected, today, disabled, range_middle } = activeModifiers

          if (isHidden) {
            return <></>
          }

          if (!isButton) {
            return (
              <div
                {...divProps}
                className={cx(
                  "flex items-center justify-center",
                  divProps.className,
                )}
              />
            )
          }

          const {
            children: buttonChildren,
            className: buttonClassName,
            ...buttonPropsRest
          } = buttonProps

          return (
            <button
              ref={buttonRef}
              {...buttonPropsRest}
              type="button"
              className={cx("relative", buttonClassName)}
            >
              {buttonChildren}
              {today && (
                <span
                  className={cx(
                    "absolute inset-x-1/2 bottom-1.5 h-0.5 w-4 -translate-x-1/2 rounded-[2px]",
                    {
                      "bg-blue-500 dark:bg-blue-500": !selected,
                      "!bg-white dark:!bg-gray-950": selected,
                      "!bg-gray-400 dark:!bg-gray-600":
                        selected && range_middle,
                      "bg-gray-400 text-gray-400 dark:bg-gray-400 dark:text-gray-600":
                        disabled,
                    },
                  )}
                />
              )}
            </button>
          )
        },
      }}
      {...(props as SingleProps & RangeProps)}
    />
  )
}

Calendar.displayName = "Calendar"

export { Calendar, type Matcher }
</file>

<file path="src/components/Card.tsx">
// Tremor Raw Card [v0.0.1]

import { Slot } from "@radix-ui/react-slot"
import React from "react"

import { cx } from "@/lib/utils"

interface CardProps extends React.ComponentPropsWithoutRef<"div"> {
  asChild?: boolean
}

const Card = React.forwardRef<HTMLDivElement, CardProps>(
  ({ className, asChild, ...props }, forwardedRef) => {
    const Component = asChild ? Slot : "div"
    return (
      <Component
        ref={forwardedRef}
        className={cx(
          // base
          "relative w-full rounded-lg border p-6 text-left shadow-sm",
          // background color
          "bg-white dark:bg-[#090E1A]",
          // border color
          "border-gray-200 dark:border-gray-900",
          className,
        )}
        {...props}
      />
    )
  },
)

Card.displayName = "Card"

export { Card, type CardProps }
</file>

<file path="src/components/Checkbox.tsx">
// Tremor Raw Checkbox [v0.0.2]

import * as CheckboxPrimitives from "@radix-ui/react-checkbox"
import React from "react"

import { cx, focusRing } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitives.Root>
>(({ className, checked, ...props }, forwardedRef) => {
  return (
    <CheckboxPrimitives.Root
      ref={forwardedRef}
      {...props}
      checked={checked}
      className={cx(
        // base
        "relative inline-flex size-4 shrink-0 appearance-none items-center justify-center rounded shadow-sm outline-none ring-1 ring-inset transition duration-100 enabled:cursor-pointer",
        // text color
        "text-white dark:text-gray-50",
        // background color
        "bg-white dark:bg-gray-950",
        // ring color
        "ring-gray-300 dark:ring-gray-800",
        // disabled
        "data-[disabled]:bg-gray-100 data-[disabled]:text-gray-400 data-[disabled]:ring-gray-300",
        "data-[disabled]:dark:bg-gray-800 data-[disabled]:dark:text-gray-500 data-[disabled]:dark:ring-gray-700",
        // checked and enabled
        "enabled:data-[state=checked]:bg-indigo-600 enabled:data-[state=checked]:ring-0 enabled:data-[state=checked]:ring-transparent",
        // indeterminate
        "enabled:data-[state=indeterminate]:bg-indigo-600 enabled:data-[state=indeterminate]:ring-0 enabled:data-[state=indeterminate]:ring-transparent",
        // focus
        focusRing,
        className,
      )}
    >
      <CheckboxPrimitives.Indicator
        asChild
        className="flex size-full items-center justify-center"
      >
        {checked === "indeterminate" ? (
          <svg
            aria-hidden="true"
            width="16"
            height="16"
            viewBox="0 0 16 16"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <line
              stroke="currentColor"
              strokeLinecap="round"
              strokeWidth="2"
              x1="4"
              x2="12"
              y1="8"
              y2="8"
            ></line>
          </svg>
        ) : (
          <svg
            aria-hidden="true"
            width="16"
            height="16"
            viewBox="0 0 16 16"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M11.2 5.59998L6.79999 9.99998L4.79999 7.99998"
              stroke="currentColor"
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
            ></path>
          </svg>
        )}
      </CheckboxPrimitives.Indicator>
    </CheckboxPrimitives.Root>
  )
})

Checkbox.displayName = "Checkbox"

export { Checkbox }
</file>

<file path="src/components/CommandBar.tsx">
"use client"

import * as Popover from "@radix-ui/react-popover"
import * as React from "react"

import { cx, focusRing } from "@/lib/utils"

const shortcutStyles = cx(
  "hidden h-6 select-none items-center justify-center rounded-md bg-gray-800 px-2 font-mono text-xs text-gray-400 ring-1 ring-inset ring-gray-700 transition sm:flex",
)

interface CommandBarProps extends React.PropsWithChildren {
  open?: boolean
  onOpenChange?: (open: boolean) => void
  defaultOpen?: boolean
  disableAutoFocus?: boolean
}

const CommandBar = ({
  open = false,
  onOpenChange,
  defaultOpen = false,
  disableAutoFocus = true,
  children,
}: CommandBarProps) => {
  return (
    <Popover.Root
      open={open}
      onOpenChange={onOpenChange}
      defaultOpen={defaultOpen}
    >
      <Popover.Anchor
        className={cx(
          "fixed inset-x-0 bottom-8 mx-auto flex w-fit items-center",
        )}
      />
      <Popover.Portal>
        <Popover.Content
          side="top"
          sideOffset={0}
          onOpenAutoFocus={(e) => {
            if (disableAutoFocus) {
              e.preventDefault()
            }
          }}
          className={cx(
            "z-50",
            "data-[state=closed]:animate-hide",
            "data-[side=top]:animate-slideUpAndFade",
          )}
        >
          {children}
        </Popover.Content>
      </Popover.Portal>
    </Popover.Root>
  )
}
CommandBar.displayName = "CommandBar"

const CommandBarValue = React.forwardRef<
  HTMLDivElement,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      className={cx(
        "px-3 py-2.5 text-sm tabular-nums text-gray-300",
        className,
      )}
      {...props}
    />
  )
})
CommandBarValue.displayName = "CommandBar.Value"

const CommandBarBar = React.forwardRef<
  HTMLDivElement,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      className={cx(
        "relative flex items-center rounded-lg bg-gray-900 px-1 shadow-lg shadow-black/30 dark:ring-1 dark:ring-white/10",
        className,
      )}
      {...props}
    />
  )
})
CommandBarBar.displayName = "CommandBarBar"

const CommandBarSeperator = React.forwardRef<
  HTMLDivElement,
  Omit<React.ComponentPropsWithoutRef<"div">, "children">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      className={cx("h-4 w-px bg-gray-700", className)}
      {...props}
    />
  )
})
CommandBarSeperator.displayName = "CommandBar.Seperator"

interface CommandProps
  extends Omit<
    React.ComponentPropsWithoutRef<"button">,
    "children" | "onClick"
  > {
  action: () => void | Promise<void>
  label: string
  shortcut: { shortcut: string; label?: string }
}

const CommandBarCommand = React.forwardRef<HTMLButtonElement, CommandProps>(
  (
    {
      className,
      type = "button",
      label,
      action,
      shortcut,
      disabled,
      ...props
    }: CommandProps,
    ref,
  ) => {
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (event.key === shortcut.shortcut) {
          event.preventDefault()
          event.stopPropagation()
          action()
        }
      }

      if (!disabled) {
        document.addEventListener("keydown", handleKeyDown)
      }

      return () => {
        document.removeEventListener("keydown", handleKeyDown)
      }
    }, [action, shortcut, disabled])

    return (
      <span
        className={cx(
          "flex items-center gap-x-2 rounded-lg bg-gray-900 p-1 text-base font-medium text-gray-50 outline-none transition focus:z-10 sm:text-sm",
          "sm:last-of-type:-mr-1",
          className,
        )}
      >
        <button
          ref={ref}
          type={type}
          onClick={action}
          disabled={disabled}
          className={cx(
            // base
            "flex items-center gap-x-2 rounded-md px-1 py-1 hover:bg-gray-800",
            // focus
            "focus-visible:bg-gray-800 focus-visible:hover:bg-gray-800",
            "disabled:text-gray-500",
            focusRing,
          )}
          {...props}
        >
          <span>{label}</span>
          <span className={shortcutStyles}>
            {shortcut.label
              ? shortcut.label.toUpperCase()
              : shortcut.shortcut.toUpperCase()}
          </span>
        </button>
      </span>
    )
  },
)
CommandBarCommand.displayName = "CommandBar.Command"

export {
  CommandBar,
  CommandBarBar,
  CommandBarCommand,
  CommandBarSeperator,
  CommandBarValue,
}
</file>

<file path="src/components/DatePicker.tsx">
// Tremor Date Picker [v1.0.5]

"use client"

import { Time } from "@internationalized/date"
import * as PopoverPrimitives from "@radix-ui/react-popover"
import {
  AriaTimeFieldProps,
  TimeValue,
  useDateSegment,
  useTimeField,
} from "@react-aria/datepicker"
import {
  useTimeFieldState,
  type DateFieldState,
  type DateSegment,
} from "@react-stately/datepicker"
import { RiCalendar2Fill, RiSubtractFill } from "@remixicon/react"
import { format, type Locale } from "date-fns"
import { enUS } from "date-fns/locale"
import * as React from "react"
import { tv, VariantProps } from "tailwind-variants"

import { cx, focusInput, focusRing, hasErrorInput } from "@/lib/utils"

import { Button } from "./Button"
import { Calendar as CalendarPrimitive, type Matcher } from "./Calendar"

//#region TimeInput
// ============================================================================

const isBrowserLocaleClockType24h = () => {
  const language =
    typeof window !== "undefined" ? window.navigator.language : "en-US"

  const hr = new Intl.DateTimeFormat(language, {
    hour: "numeric",
  }).format()

  return Number.isInteger(Number(hr))
}

type TimeSegmentProps = {
  segment: DateSegment
  state: DateFieldState
}

const TimeSegment = ({ segment, state }: TimeSegmentProps) => {
  const ref = React.useRef<HTMLDivElement>(null)

  const { segmentProps } = useDateSegment(segment, state, ref)

  const isColon = segment.type === "literal" && segment.text === ":"
  const isSpace = segment.type === "literal" && segment.text === " "

  const isDecorator = isColon || isSpace

  return (
    <div
      {...segmentProps}
      ref={ref}
      className={cx(
        // base
        "relative block w-full appearance-none rounded-md border px-2.5 py-1.5 text-left uppercase tabular-nums shadow-sm outline-none transition sm:text-sm",
        // border color
        "border-gray-300 dark:border-gray-800",
        // text color
        "text-gray-900 dark:text-gray-50",
        // background color
        "bg-white dark:bg-gray-950",
        // focus
        focusInput,
        // invalid (optional)
        "invalid:border-red-500 invalid:ring-2 invalid:ring-red-200 group-aria-[invalid=true]/time-input:border-red-500 group-aria-[invalid=true]/time-input:ring-2 group-aria-[invalid=true]/time-input:ring-red-200 group-aria-[invalid=true]/time-input:dark:ring-red-400/20",
        {
          "!w-fit border-none bg-transparent px-0 text-gray-400 shadow-none":
            isDecorator,
          hidden: isSpace,
          "border-gray-300 bg-gray-100 text-gray-400 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-500":
            state.isDisabled,
          "!bg-transparent !text-gray-400": !segment.isEditable,
        },
      )}
    >
      <span
        aria-hidden="true"
        className={cx(
          "pointer-events-none block w-full text-left text-gray-700 sm:text-sm",
          {
            hidden: !segment.isPlaceholder,
            "h-0": !segment.isPlaceholder,
          },
        )}
      >
        {segment.placeholder}
      </span>
      {segment.isPlaceholder ? " " : segment.text}
    </div>
  )
}

type TimeInputProps = Omit<
  AriaTimeFieldProps<TimeValue>,
  "label" | "shouldForceLeadingZeros" | "description" | "errorMessage"
>

const TimeInput = React.forwardRef<HTMLDivElement, TimeInputProps>(
  ({ hourCycle, ...props }: TimeInputProps, ref) => {
    const innerRef = React.useRef<HTMLDivElement>(null)

    React.useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(
      ref,
      () => innerRef?.current,
    )

    const locale = window !== undefined ? window.navigator.language : "en-US"

    const state = useTimeFieldState({
      hourCycle: hourCycle,
      locale: locale,
      shouldForceLeadingZeros: true,
      autoFocus: true,
      ...props,
    })

    const { fieldProps } = useTimeField(
      {
        ...props,
        hourCycle: hourCycle,
        shouldForceLeadingZeros: true,
      },
      state,
      innerRef,
    )

    return (
      <div
        {...fieldProps}
        ref={innerRef}
        className="group/time-input inline-flex w-full gap-x-2"
      >
        {state.segments.map((segment, i) => (
          <TimeSegment key={i} segment={segment} state={state} />
        ))}
      </div>
    )
  },
)
TimeInput.displayName = "TimeInput"

//#region Trigger
// ============================================================================

const triggerStyles = tv({
  base: [
    // base
    "peer flex w-full cursor-pointer appearance-none items-center gap-x-2 truncate rounded-md border px-3 py-2 shadow-sm outline-none transition-all sm:text-sm",
    // background color
    "bg-white dark:bg-gray-950",
    // border color
    "border-gray-300 dark:border-gray-800",
    // text color
    "text-gray-900 dark:text-gray-50",
    // placeholder color
    "placeholder-gray-400 dark:placeholder-gray-500",
    // hover
    "hover:bg-gray-50 hover:dark:bg-gray-950/50",
    // disabled
    "disabled:pointer-events-none",
    "disabled:bg-gray-100 disabled:text-gray-400",
    "disabled:dark:border-gray-800 disabled:dark:bg-gray-800 disabled:dark:text-gray-500",
    // focus
    focusInput,
    // invalid (optional)
    // "aria-[invalid=true]:dark:ring-red-400/20 aria-[invalid=true]:ring-2 aria-[invalid=true]:ring-red-200 aria-[invalid=true]:border-red-500 invalid:ring-2 invalid:ring-red-200 invalid:border-red-500"
  ],
  variants: {
    hasError: {
      true: hasErrorInput,
    },
  },
})

interface TriggerProps
  extends React.ComponentProps<"button">,
    VariantProps<typeof triggerStyles> {
  placeholder?: string
}

const Trigger = React.forwardRef<HTMLButtonElement, TriggerProps>(
  (
    { className, children, placeholder, hasError, ...props }: TriggerProps,
    forwardedRef,
  ) => {
    return (
      <PopoverPrimitives.Trigger asChild>
        <button
          ref={forwardedRef}
          className={cx(triggerStyles({ hasError }), className)}
          {...props}
        >
          <RiCalendar2Fill className="size-5 shrink-0 text-gray-400 dark:text-gray-600" />
          <span className="flex-1 overflow-hidden text-ellipsis whitespace-nowrap text-left text-gray-900 dark:text-gray-50">
            {children ? (
              children
            ) : placeholder ? (
              <span className="text-gray-400 dark:text-gray-600">
                {placeholder}
              </span>
            ) : null}
          </span>
        </button>
      </PopoverPrimitives.Trigger>
    )
  },
)

Trigger.displayName = "DatePicker.Trigger"

//#region Popover
// ============================================================================

const CalendarPopover = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitives.Content>,
  React.ComponentProps<typeof PopoverPrimitives.Content>
>(({ align, className, children, ...props }, forwardedRef) => {
  return (
    <PopoverPrimitives.Portal>
      <PopoverPrimitives.Content
        ref={forwardedRef}
        sideOffset={10}
        side="bottom"
        align={align}
        avoidCollisions
        onOpenAutoFocus={(e) => e.preventDefault()}
        className={cx(
          // base
          "relative z-50 w-fit rounded-md border text-sm shadow-xl shadow-black/[2.5%]",
          // widths
          "min-w-[calc(var(--radix-select-trigger-width)-2px)] max-w-[95vw]",
          // border color
          "border-gray-200 dark:border-gray-800",
          // background color
          "bg-white dark:bg-gray-950",
          // transition
          "will-change-[transform,opacity]",
          "data-[state=closed]:animate-hide",
          "data-[state=open]:data-[side=bottom]:animate-slideDownAndFade data-[state=open]:data-[side=left]:animate-slideLeftAndFade data-[state=open]:data-[side=right]:animate-slideRightAndFade data-[state=open]:data-[side=top]:animate-slideUpAndFade",
          className,
        )}
        {...props}
      >
        {children}
      </PopoverPrimitives.Content>
    </PopoverPrimitives.Portal>
  )
})

CalendarPopover.displayName = "DatePicker.CalendarPopover"

//#region Preset
// ============================================================================

type DateRange = {
  from: Date | undefined
  to?: Date | undefined
}

interface Preset {
  label: string
}

interface DatePreset extends Preset {
  date: Date
}

interface DateRangePreset extends Preset {
  dateRange: DateRange
}

type PresetContainerProps<TPreset extends Preset, TValue> = {
  presets: TPreset[]
  onSelect: (value: TValue) => void
  currentValue?: TValue
}

const PresetContainer = <TPreset extends Preset, TValue>({
  // Available preset configurations
  presets,
  // Event handler when a preset is selected
  onSelect,
  // Currently selected preset
  currentValue,
}: PresetContainerProps<TPreset, TValue>) => {
  const isDateRangePresets = (preset: any): preset is DateRangePreset => {
    return "dateRange" in preset
  }
  const isDatePresets = (preset: any): preset is DatePreset => {
    return "date" in preset
  }

  const handleClick = (preset: TPreset) => {
    if (isDateRangePresets(preset)) {
      onSelect(preset.dateRange as TValue)
    } else if (isDatePresets(preset)) {
      onSelect(preset.date as TValue)
    }
  }

  const compareDates = (date1: Date, date2: Date) => {
    return (
      date1.getDate() === date2.getDate() &&
      date1.getMonth() === date2.getMonth() &&
      date1.getFullYear() === date2.getFullYear()
    )
  }

  const compareRanges = (range1: DateRange, range2: DateRange) => {
    const from1 = range1.from
    const from2 = range2.from

    let equalFrom = false

    if (from1 && from2) {
      const sameFrom = compareDates(from1, from2)

      if (sameFrom) {
        equalFrom = true
      }
    }

    const to1 = range1.to
    const to2 = range2.to

    let equalTo = false

    if (to1 && to2) {
      const sameTo = compareDates(to1, to2)

      if (sameTo) {
        equalTo = true
      }
    }

    return equalFrom && equalTo
  }

  const matchesCurrent = (preset: TPreset) => {
    if (isDateRangePresets(preset)) {
      const value = currentValue as DateRange | undefined

      return value && compareRanges(value, preset.dateRange)
    } else if (isDatePresets(preset)) {
      const value = currentValue as Date | undefined

      return value && compareDates(value, preset.date)
    }

    return false
  }

  return (
    <ul className="flex items-start gap-x-2 sm:flex-col">
      {presets.map((preset, index) => {
        return (
          <li key={index} className="sm:w-full sm:py-px">
            <button
              title={preset.label}
              className={cx(
                // base
                "relative w-full overflow-hidden text-ellipsis whitespace-nowrap rounded border px-2.5 py-1.5 text-left text-base shadow-sm outline-none transition-all sm:border-none sm:py-2 sm:text-sm sm:shadow-none",
                // text color
                "text-gray-700 dark:text-gray-300",
                // border color
                "border-gray-200 dark:border-gray-800",
                // focus
                focusRing,
                // background color
                "focus-visible:bg-gray-100 focus-visible:dark:bg-gray-900",
                "hover:bg-gray-100 hover:dark:bg-gray-900",
                {
                  "bg-gray-100 dark:bg-gray-900": matchesCurrent(preset),
                },
              )}
              onClick={() => handleClick(preset)}
              aria-label={`Select ${preset.label}`}
            >
              <span>{preset.label}</span>
            </button>
          </li>
        )
      })}
    </ul>
  )
}

PresetContainer.displayName = "DatePicker.PresetContainer"

//#region Date Picker Shared
// ============================================================================

const formatDate = (
  date: Date,
  locale: Locale,
  includeTime?: boolean,
): string => {
  const usesAmPm = !isBrowserLocaleClockType24h()
  let dateString: string

  if (includeTime) {
    dateString = usesAmPm
      ? format(date, "dd MMM, yyyy h:mm a", { locale })
      : format(date, "dd MMM, yyyy HH:mm", { locale })
  } else {
    dateString = format(date, "dd MMM, yyyy", { locale })
  }

  return dateString
}

type CalendarProps = {
  fromYear?: number
  toYear?: number
  fromMonth?: Date
  toMonth?: Date
  fromDay?: Date
  toDay?: Date
  fromDate?: Date
  toDate?: Date
  locale?: Locale
}

type Translations = {
  cancel?: string
  apply?: string
  start?: string
  end?: string
  range?: string
}

interface PickerProps extends CalendarProps {
  className?: string
  disabled?: boolean
  disabledDays?: Matcher | Matcher[] | undefined
  required?: boolean
  showTimePicker?: boolean
  placeholder?: string
  enableYearNavigation?: boolean
  disableNavigation?: boolean
  hasError?: boolean
  id?: string
  // Customize the date picker for different languages.
  translations?: Translations
  align?: "center" | "end" | "start"
  "aria-invalid"?: boolean
  "aria-label"?: string
  "aria-labelledby"?: string
  "aria-required"?: boolean
}

//#region Single Date Picker
// ============================================================================

interface SingleProps extends Omit<PickerProps, "translations"> {
  presets?: DatePreset[]
  defaultValue?: Date
  value?: Date
  onChange?: (date: Date | undefined) => void
  translations?: Omit<Translations, "range">
}

const SingleDatePicker = ({
  defaultValue,
  value,
  onChange,
  presets,
  disabled,
  disabledDays,
  disableNavigation,
  className,
  showTimePicker,
  placeholder = "Select date",
  hasError,
  translations,
  enableYearNavigation = false,
  locale = enUS,
  align = "center",
  ...props
}: SingleProps) => {
  const [open, setOpen] = React.useState(false)
  const [date, setDate] = React.useState<Date | undefined>(
    value ?? defaultValue ?? undefined,
  )
  const [month, setMonth] = React.useState<Date | undefined>(date)

  const [time, setTime] = React.useState<TimeValue | null>(
    value
      ? new Time(value.getHours(), value.getMinutes())
      : defaultValue
        ? new Time(defaultValue.getHours(), defaultValue.getMinutes())
        : new Time(0, 0),
  )

  const initialDate = React.useMemo(() => {
    return date
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [open])

  React.useEffect(() => {
    setDate(value ?? defaultValue ?? undefined)
  }, [value, defaultValue])

  React.useEffect(() => {
    if (date) {
      setMonth(date)
    }
  }, [date])

  React.useEffect(() => {
    if (!open) {
      setMonth(date)
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [open])

  const onCancel = () => {
    setDate(initialDate)
    setTime(
      initialDate
        ? new Time(initialDate.getHours(), initialDate.getMinutes())
        : new Time(0, 0),
    )
    setOpen(false)
  }

  const onOpenChange = (open: boolean) => {
    if (!open) {
      onCancel()
    }

    setOpen(open)
  }

  const onDateChange = (date: Date | undefined) => {
    const newDate = date
    if (showTimePicker) {
      if (newDate && !time) {
        setTime(new Time(0, 0))
      }
      if (newDate && time) {
        newDate.setHours(time.hour)
        newDate.setMinutes(time.minute)
      }
    }
    setDate(newDate)
  }

  const onTimeChange = (time: TimeValue | null) => {
    setTime(time)

    if (!date) {
      return
    }

    const newDate = new Date(date.getTime())

    if (!time) {
      newDate.setHours(0)
      newDate.setMinutes(0)
    } else {
      newDate.setHours(time.hour)
      newDate.setMinutes(time.minute)
    }

    setDate(newDate)
  }

  const formattedDate = React.useMemo(() => {
    if (!date) {
      return null
    }

    return formatDate(date, locale, showTimePicker)
  }, [date, locale, showTimePicker])

  const onApply = () => {
    setOpen(false)
    onChange?.(date)
  }

  React.useEffect(() => {
    setDate(value ?? defaultValue ?? undefined)
    setTime(
      value
        ? new Time(value.getHours(), value.getMinutes())
        : defaultValue
          ? new Time(defaultValue.getHours(), defaultValue.getMinutes())
          : new Time(0, 0),
    )
  }, [value, defaultValue])

  return (
    <PopoverPrimitives.Root
      tremor-id="tremor-raw"
      open={open}
      onOpenChange={onOpenChange}
    >
      <Trigger
        placeholder={placeholder}
        disabled={disabled}
        className={className}
        hasError={hasError}
        aria-required={props.required || props["aria-required"]}
        aria-invalid={props["aria-invalid"]}
        aria-label={props["aria-label"]}
        aria-labelledby={props["aria-labelledby"]}
      >
        {formattedDate}
      </Trigger>
      <CalendarPopover align={align}>
        <div className="flex">
          <div className="flex flex-col sm:flex-row sm:items-start">
            {presets && presets.length > 0 && (
              <div
                className={cx(
                  "relative flex h-14 w-full items-center sm:h-full sm:w-40",
                  "border-b border-gray-200 sm:border-b-0 sm:border-r dark:border-gray-800",
                  "overflow-auto",
                )}
              >
                <div className="absolute px-2 pr-2 sm:inset-0 sm:left-0 sm:py-2">
                  <PresetContainer
                    currentValue={date}
                    presets={presets}
                    onSelect={onDateChange}
                  />
                </div>
              </div>
            )}
            <div>
              <CalendarPrimitive
                mode="single"
                month={month}
                onMonthChange={setMonth}
                selected={date}
                onSelect={onDateChange}
                disabled={disabledDays}
                locale={locale}
                enableYearNavigation={enableYearNavigation}
                disableNavigation={disableNavigation}
                initialFocus
                {...props}
              />
              {showTimePicker && (
                <div className="border-t border-gray-200 p-3 dark:border-gray-800">
                  <TimeInput
                    aria-label="Time"
                    onChange={onTimeChange}
                    isDisabled={!date}
                    value={time}
                    isRequired={props.required}
                  />
                </div>
              )}
              <div className="flex items-center gap-x-2 border-t border-gray-200 p-3 dark:border-gray-800">
                <Button
                  variant="secondary"
                  className="h-8 w-full"
                  type="button"
                  onClick={onCancel}
                >
                  {translations?.cancel ?? "Cancel"}
                </Button>
                <Button
                  variant="primary"
                  className="h-8 w-full"
                  type="button"
                  onClick={onApply}
                >
                  {translations?.apply ?? "Apply"}
                </Button>
              </div>
            </div>
          </div>
        </div>
      </CalendarPopover>
    </PopoverPrimitives.Root>
  )
}

//#region Range Date Picker
// ============================================================================

interface RangeProps extends PickerProps {
  presets?: DateRangePreset[]
  defaultValue?: DateRange
  value?: DateRange
  onChange?: (dateRange: DateRange | undefined) => void
}

const RangeDatePicker = ({
  defaultValue,
  value,
  onChange,
  presets,
  disabled,
  disableNavigation,
  disabledDays,
  enableYearNavigation = false,
  locale = enUS,
  showTimePicker,
  placeholder = "Select date range",
  hasError,
  translations,
  align = "center",
  className,
  ...props
}: RangeProps) => {
  const [open, setOpen] = React.useState(false)
  const [range, setRange] = React.useState<DateRange | undefined>(
    value ?? defaultValue ?? undefined,
  )
  const [month, setMonth] = React.useState<Date | undefined>(range?.from)

  const [startTime, setStartTime] = React.useState<TimeValue | null>(
    value?.from
      ? new Time(value.from.getHours(), value.from.getMinutes())
      : defaultValue?.from
        ? new Time(defaultValue.from.getHours(), defaultValue.from.getMinutes())
        : new Time(0, 0),
  )
  const [endTime, setEndTime] = React.useState<TimeValue | null>(
    value?.to
      ? new Time(value.to.getHours(), value.to.getMinutes())
      : defaultValue?.to
        ? new Time(defaultValue.to.getHours(), defaultValue.to.getMinutes())
        : new Time(0, 0),
  )

  const initialRange = React.useMemo(() => {
    return range
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [open])

  React.useEffect(() => {
    setRange(value ?? defaultValue ?? undefined)
  }, [value, defaultValue])

  React.useEffect(() => {
    if (range) {
      setMonth(range.from)
    }
  }, [range])

  React.useEffect(() => {
    if (!open) {
      setMonth(range?.from)
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [open])

  const onRangeChange = (range: DateRange | undefined) => {
    const newRange = range
    if (showTimePicker) {
      if (newRange?.from && !startTime) {
        setStartTime(new Time(0, 0))
      }

      if (newRange?.to && !endTime) {
        setEndTime(new Time(0, 0))
      }

      if (newRange?.from && startTime) {
        newRange.from.setHours(startTime.hour)
        newRange.from.setMinutes(startTime.minute)
      }

      if (newRange?.to && endTime) {
        newRange.to.setHours(endTime.hour)
        newRange.to.setMinutes(endTime.minute)
      }
    }

    setRange(newRange)
  }

  const onCancel = () => {
    setRange(initialRange)
    setStartTime(
      initialRange?.from
        ? new Time(initialRange.from.getHours(), initialRange.from.getMinutes())
        : new Time(0, 0),
    )
    setEndTime(
      initialRange?.to
        ? new Time(initialRange.to.getHours(), initialRange.to.getMinutes())
        : new Time(0, 0),
    )
    setOpen(false)
  }

  const onOpenChange = (open: boolean) => {
    if (!open) {
      onCancel()
    }

    setOpen(open)
  }

  const onTimeChange = (time: TimeValue | null, pos: "start" | "end") => {
    switch (pos) {
      case "start":
        setStartTime(time)
        break
      case "end":
        setEndTime(time)
        break
    }

    if (!range) {
      return
    }

    if (pos === "start") {
      if (!range.from) {
        return
      }

      const newDate = new Date(range.from.getTime())

      if (!time) {
        newDate.setHours(0)
        newDate.setMinutes(0)
      } else {
        newDate.setHours(time.hour)
        newDate.setMinutes(time.minute)
      }

      setRange({
        ...range,
        from: newDate,
      })
    }

    if (pos === "end") {
      if (!range.to) {
        return
      }

      const newDate = new Date(range.to.getTime())

      if (!time) {
        newDate.setHours(0)
        newDate.setMinutes(0)
      } else {
        newDate.setHours(time.hour)
        newDate.setMinutes(time.minute)
      }

      setRange({
        ...range,
        to: newDate,
      })
    }
  }

  React.useEffect(() => {
    setRange(value ?? defaultValue ?? undefined)

    setStartTime(
      value?.from
        ? new Time(value.from.getHours(), value.from.getMinutes())
        : defaultValue?.from
          ? new Time(
              defaultValue.from.getHours(),
              defaultValue.from.getMinutes(),
            )
          : new Time(0, 0),
    )
    setEndTime(
      value?.to
        ? new Time(value.to.getHours(), value.to.getMinutes())
        : defaultValue?.to
          ? new Time(defaultValue.to.getHours(), defaultValue.to.getMinutes())
          : new Time(0, 0),
    )
  }, [value, defaultValue])

  const displayRange = React.useMemo(() => {
    if (!range) {
      return null
    }

    return `${range.from ? formatDate(range.from, locale, showTimePicker) : ""} - ${
      range.to ? formatDate(range.to, locale, showTimePicker) : ""
    }`
  }, [range, locale, showTimePicker])

  const onApply = () => {
    setOpen(false)
    onChange?.(range)
  }

  return (
    <PopoverPrimitives.Root
      tremor-id="tremor-raw"
      open={open}
      onOpenChange={onOpenChange}
    >
      <Trigger
        placeholder={placeholder}
        disabled={disabled}
        className={className}
        hasError={hasError}
        aria-required={props.required || props["aria-required"]}
        aria-invalid={props["aria-invalid"]}
        aria-label={props["aria-label"]}
        aria-labelledby={props["aria-labelledby"]}
      >
        {displayRange}
      </Trigger>
      <CalendarPopover align={align}>
        <div className="flex">
          <div className="flex flex-col overflow-x-auto sm:flex-row sm:items-start">
            {presets && presets.length > 0 && (
              <div
                className={cx(
                  "relative flex h-16 w-full items-center sm:h-full sm:w-40",
                  "border-b border-gray-200 sm:border-b-0 sm:border-r dark:border-gray-800",
                  "overflow-auto",
                )}
              >
                <div className="absolute px-3 sm:inset-0 sm:left-0 sm:p-2">
                  <PresetContainer
                    currentValue={range}
                    presets={presets}
                    onSelect={onRangeChange}
                  />
                </div>
              </div>
            )}
            <div className="overflow-x-auto">
              <CalendarPrimitive
                mode="range"
                selected={range}
                onSelect={onRangeChange}
                month={month}
                onMonthChange={setMonth}
                numberOfMonths={2}
                disabled={disabledDays}
                disableNavigation={disableNavigation}
                enableYearNavigation={enableYearNavigation}
                locale={locale}
                initialFocus
                classNames={{
                  months:
                    "flex flex-row divide-x divide-gray-200 dark:divide-gray-800 overflow-x-auto",
                }}
                {...props}
              />
              {showTimePicker && (
                <div className="flex items-center justify-evenly gap-x-3 border-t border-gray-200 p-3 dark:border-gray-800">
                  <div className="flex flex-1 items-center gap-x-2">
                    <span className="dark:text-gray-30 text-gray-700">
                      {translations?.start ?? "Start"}:
                    </span>
                    <TimeInput
                      value={startTime}
                      onChange={(v) => onTimeChange(v, "start")}
                      aria-label="Start date time"
                      isDisabled={!range?.from}
                      isRequired={props.required}
                    />
                  </div>
                  <RiSubtractFill className="size-4 shrink-0 text-gray-400" />
                  <div className="flex flex-1 items-center gap-x-2">
                    <span className="dark:text-gray-30 text-gray-700">
                      {translations?.end ?? "End"}:
                    </span>
                    <TimeInput
                      value={endTime}
                      onChange={(v) => onTimeChange(v, "end")}
                      aria-label="End date time"
                      isDisabled={!range?.to}
                      isRequired={props.required}
                    />
                  </div>
                </div>
              )}
              <div className="border-t border-gray-200 p-3 sm:flex sm:items-center sm:justify-between dark:border-gray-800">
                <p className="tabular-nums text-gray-900 dark:text-gray-50">
                  <span className="text-gray-700 dark:text-gray-300">
                    {translations?.range ?? "Range"}:
                  </span>{" "}
                  <span className="font-medium">{displayRange}</span>
                </p>
                <div className="mt-2 flex items-center gap-x-2 sm:mt-0">
                  <Button
                    variant="secondary"
                    className="h-8 w-full sm:w-fit"
                    type="button"
                    onClick={onCancel}
                  >
                    {translations?.cancel ?? "Cancel"}
                  </Button>
                  <Button
                    variant="primary"
                    className="h-8 w-full sm:w-fit"
                    type="button"
                    onClick={onApply}
                  >
                    {translations?.apply ?? "Apply"}
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </CalendarPopover>
    </PopoverPrimitives.Root>
  )
}

//#region Preset Validation
// ============================================================================

const validatePresets = (
  presets: DateRangePreset[] | DatePreset[],
  rules: PickerProps,
) => {
  const { toYear, fromYear, fromMonth, toMonth, fromDay, toDay } = rules

  if (presets && presets.length > 0) {
    const fromYearToUse = fromYear
    const toYearToUse = toYear

    presets.forEach((preset) => {
      if ("date" in preset) {
        const presetYear = preset.date.getFullYear()

        if (fromYear && presetYear < fromYear) {
          throw new Error(
            `Preset ${preset.label} is before fromYear ${fromYearToUse}.`,
          )
        }

        if (toYear && presetYear > toYear) {
          throw new Error(
            `Preset ${preset.label} is after toYear ${toYearToUse}.`,
          )
        }

        if (fromMonth) {
          const presetMonth = preset.date.getMonth()

          if (presetMonth < fromMonth.getMonth()) {
            throw new Error(
              `Preset ${preset.label} is before fromMonth ${fromMonth}.`,
            )
          }
        }

        if (toMonth) {
          const presetMonth = preset.date.getMonth()

          if (presetMonth > toMonth.getMonth()) {
            throw new Error(
              `Preset ${preset.label} is after toMonth ${toMonth}.`,
            )
          }
        }

        if (fromDay) {
          const presetDay = preset.date.getDate()

          if (presetDay < fromDay.getDate()) {
            throw new Error(
              `Preset ${preset.label} is before fromDay ${fromDay}.`,
            )
          }
        }

        if (toDay) {
          const presetDay = preset.date.getDate()

          if (presetDay > toDay.getDate()) {
            throw new Error(
              `Preset ${preset.label} is after toDay ${format(
                toDay,
                "MMM dd, yyyy",
              )}.`,
            )
          }
        }
      }

      if ("dateRange" in preset) {
        const presetFromYear = preset.dateRange.from?.getFullYear()
        const presetToYear = preset.dateRange.to?.getFullYear()

        if (presetFromYear && fromYear && presetFromYear < fromYear) {
          throw new Error(
            `Preset ${preset.label}'s 'from' is before fromYear ${fromYearToUse}.`,
          )
        }

        if (presetToYear && toYear && presetToYear > toYear) {
          throw new Error(
            `Preset ${preset.label}'s 'to' is after toYear ${toYearToUse}.`,
          )
        }

        if (fromMonth) {
          const presetMonth = preset.dateRange.from?.getMonth()

          if (presetMonth && presetMonth < fromMonth.getMonth()) {
            throw new Error(
              `Preset ${preset.label}'s 'from' is before fromMonth ${format(
                fromMonth,
                "MMM, yyyy",
              )}.`,
            )
          }
        }

        if (toMonth) {
          const presetMonth = preset.dateRange.to?.getMonth()

          if (presetMonth && presetMonth > toMonth.getMonth()) {
            throw new Error(
              `Preset ${preset.label}'s 'to' is after toMonth ${format(
                toMonth,
                "MMM, yyyy",
              )}.`,
            )
          }
        }

        if (fromDay) {
          const presetDay = preset.dateRange.from?.getDate()

          if (presetDay && presetDay < fromDay.getDate()) {
            throw new Error(
              `Preset ${
                preset.dateRange.from
              }'s 'from' is before fromDay ${format(fromDay, "MMM dd, yyyy")}.`,
            )
          }
        }

        if (toDay) {
          const presetDay = preset.dateRange.to?.getDate()

          if (presetDay && presetDay > toDay.getDate()) {
            throw new Error(
              `Preset ${preset.label}'s 'to' is after toDay ${format(
                toDay,
                "MMM dd, yyyy",
              )}.`,
            )
          }
        }
      }
    })
  }
}

//#region Types & Exports
// ============================================================================

type SingleDatePickerProps = {
  presets?: DatePreset[]
  defaultValue?: Date
  value?: Date
  onChange?: (date: Date | undefined) => void
} & PickerProps

const DatePicker = ({ presets, ...props }: SingleDatePickerProps) => {
  if (presets) {
    validatePresets(presets, props)
  }

  return <SingleDatePicker presets={presets} {...(props as SingleProps)} />
}

DatePicker.displayName = "DatePicker"

type RangeDatePickerProps = {
  presets?: DateRangePreset[]
  defaultValue?: DateRange
  value?: DateRange
  onChange?: (dateRange: DateRange | undefined) => void
} & PickerProps

const DateRangePicker = ({ presets, ...props }: RangeDatePickerProps) => {
  if (presets) {
    validatePresets(presets, props)
  }

  return <RangeDatePicker presets={presets} {...(props as RangeProps)} />
}

DateRangePicker.displayName = "DateRangePicker"

export {
  DatePicker,
  DateRangePicker,
  type DatePreset, type DateRange, type DateRangePreset
}
</file>

<file path="src/components/Dialog.tsx">
// Tremor Raw Dialog [v0.0.0]

import * as DialogPrimitives from "@radix-ui/react-dialog"
import React from "react"

import { cx, focusRing } from "@/lib/utils"

const Dialog = (
  props: React.ComponentPropsWithoutRef<typeof DialogPrimitives.Root>,
) => {
  return <DialogPrimitives.Root {...props} />
}
Dialog.displayName = "Dialog"

const DialogTrigger = DialogPrimitives.Trigger

DialogTrigger.displayName = "DialogTrigger"

const DialogClose = DialogPrimitives.Close

DialogClose.displayName = "DialogClose"

const DialogPortal = DialogPrimitives.Portal

DialogPortal.displayName = "DialogPortal"

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitives.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitives.Overlay>
>(({ className, ...props }, forwardedRef) => {
  return (
    <DialogPrimitives.Overlay
      ref={forwardedRef}
      className={cx(
        // base
        "fixed inset-0 z-50 overflow-y-auto",
        // background color
        "bg-black/70",
        // transition
        "data-[state=open]:animate-dialogOverlayShow",
        className,
      )}
      {...props}
    />
  )
})

DialogOverlay.displayName = "DialogOverlay"

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitives.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitives.Content>
>(({ className, ...props }, forwardedRef) => {
  return (
    <DialogPortal>
      <DialogOverlay>
        <DialogPrimitives.Content
          ref={forwardedRef}
          className={cx(
            // base
            "fixed left-1/2 top-1/2 z-50 w-[95vw] max-w-lg -translate-x-1/2 -translate-y-1/2 overflow-y-auto rounded-md border p-6 shadow-lg",
            // border color
            "border-gray-200 dark:border-gray-900",
            // background color
            "bg-white dark:bg-[#090E1A]",
            // transition
            "data-[state=open]:animate-dialogContentShow",
            focusRing,
            className,
          )}
          {...props}
        />
      </DialogOverlay>
    </DialogPortal>
  )
})

DialogContent.displayName = "DialogContent"

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => {
  return <div className={cx("flex flex-col gap-y-1", className)} {...props} />
}

DialogHeader.displayName = "DialogHeader"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitives.Title>
>(({ className, ...props }, forwardedRef) => (
  <DialogPrimitives.Title
    ref={forwardedRef}
    className={cx(
      // base
      "text-lg font-semibold",
      // text color
      "text-gray-900 dark:text-gray-50",
      className,
    )}
    {...props}
  />
))

DialogTitle.displayName = "DialogTitle"

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitives.Description>
>(({ className, ...props }, forwardedRef) => {
  return (
    <DialogPrimitives.Description
      ref={forwardedRef}
      className={cx("text-gray-500 dark:text-gray-500", className)}
      {...props}
    />
  )
})

DialogDescription.displayName = "DialogDescription"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => {
  return (
    <div
      className={cx(
        "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
        className,
      )}
      {...props}
    />
  )
}

DialogFooter.displayName = "DialogFooter"

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
}
</file>

<file path="src/components/Divider.tsx">
// Tremor Raw Divider [v0.0.1]

import React from "react"

import { cx } from "@/lib/utils"

interface DividerProps extends React.ComponentPropsWithoutRef<"div"> {}

const Divider = React.forwardRef<HTMLDivElement, DividerProps>(
  ({ className, children, ...props }, forwardedRef) => (
    <div
      ref={forwardedRef}
      className={cx(
        // base
        "mx-auto my-6 flex w-full items-center justify-between gap-3 text-sm",
        // text color
        "text-gray-500 dark:text-gray-500",
        className,
      )}
      {...props}
    >
      {children ? (
        <>
          <div
            className={cx(
              // base
              "h-[1px] w-full",
              // background color
              "bg-gray-200 dark:bg-gray-800",
            )}
          />
          <div className="whitespace-nowrap text-inherit">{children}</div>
          <div
            className={cx(
              // base
              "h-[1px] w-full",
              // background color
              "bg-gray-200 dark:bg-gray-800",
            )}
          />
        </>
      ) : (
        <div
          className={cx(
            // base
            "h-[1px] w-full",
            // background color
            "bg-gray-200 dark:bg-gray-800",
          )}
        />
      )}
    </div>
  ),
)

Divider.displayName = "Divider"

export { Divider }
</file>

<file path="src/components/Drawer.tsx">
// Tremor Raw Drawer [v0.0.0]

import * as DrawerPrimitives from "@radix-ui/react-dialog"
import { RiCloseLine } from "@remixicon/react"
import * as React from "react"

import { cx, focusRing } from "@/lib/utils"

import { Button } from "./Button"

const Drawer = (
  props: React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Root>,
) => {
  return <DrawerPrimitives.Root {...props} />
}
Drawer.displayName = "Drawer"

const DrawerTrigger = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitives.Trigger>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Trigger>
>(({ className, ...props }, ref) => {
  return (
    <DrawerPrimitives.Trigger ref={ref} className={cx(className)} {...props} />
  )
})
DrawerTrigger.displayName = "Drawer.Trigger"

const DrawerClose = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Close>
>(({ className, ...props }, ref) => {
  return (
    <DrawerPrimitives.Close ref={ref} className={cx(className)} {...props} />
  )
})
DrawerClose.displayName = "Drawer.Close"

const DrawerPortal = DrawerPrimitives.Portal

DrawerPortal.displayName = "DrawerPortal"

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitives.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Overlay>
>(({ className, ...props }, forwardedRef) => {
  return (
    <DrawerPrimitives.Overlay
      ref={forwardedRef}
      className={cx(
        // base
        "fixed inset-0 z-50 overflow-y-auto",
        // background color
        "bg-black/30",
        // transition
        "data-[state=closed]:animate-hide data-[state=open]:animate-dialogOverlayShow",
        className,
      )}
      {...props}
      style={{
        animationDuration: "400ms",
        animationFillMode: "backwards",
      }}
    />
  )
})

DrawerOverlay.displayName = "DrawerOverlay"

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitives.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Content>
>(({ className, ...props }, forwardedRef) => {
  return (
    <DrawerPortal>
      <DrawerOverlay>
        <DrawerPrimitives.Content
          ref={forwardedRef}
          className={cx(
            // base
            "fixed inset-y-2 mx-auto flex w-[95vw] flex-1 flex-col overflow-y-auto rounded-md border p-4 shadow-lg focus:outline-none max-sm:inset-x-2 sm:inset-y-2 sm:right-2 sm:max-w-lg sm:p-6",
            // border color
            "border-gray-200 dark:border-gray-900",
            // background color
            "bg-white dark:bg-[#090E1A]",
            // transition
            "data-[state=closed]:animate-drawerSlideRightAndFade data-[state=open]:animate-drawerSlideLeftAndFade",
            focusRing,
            className,
          )}
          {...props}
        />
      </DrawerOverlay>
    </DrawerPortal>
  )
})

DrawerContent.displayName = "DrawerContent"

const DrawerHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentPropsWithoutRef<"div">
>(({ children, className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      className="flex items-start justify-between gap-x-4 border-b border-gray-200 pb-4 dark:border-gray-900"
      {...props}
    >
      <div className={cx("mt-1 flex flex-col gap-y-1", className)}>
        {children}
      </div>
      <DrawerPrimitives.Close asChild>
        <Button
          variant="ghost"
          className="aspect-square p-1 hover:bg-gray-100 hover:dark:bg-gray-400/10"
        >
          <RiCloseLine className="size-6" aria-hidden="true" />
        </Button>
      </DrawerPrimitives.Close>
    </div>
  )
})

DrawerHeader.displayName = "Drawer.Header"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Title>
>(({ className, ...props }, forwardedRef) => (
  <DrawerPrimitives.Title
    ref={forwardedRef}
    className={cx(
      // base
      "text-base font-semibold",
      // text color
      "text-gray-900 dark:text-gray-50",
      className,
    )}
    {...props}
  />
))

DrawerTitle.displayName = "DrawerTitle"

const DrawerBody = React.forwardRef<
  HTMLDivElement,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => {
  return <div ref={ref} className={cx("flex-1 py-4", className)} {...props} />
})

DrawerBody.displayName = "Drawer.Body"

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Description>
>(({ className, ...props }, forwardedRef) => {
  return (
    <DrawerPrimitives.Description
      ref={forwardedRef}
      className={cx("text-gray-500 dark:text-gray-500", className)}
      {...props}
    />
  )
})

DrawerDescription.displayName = "DrawerDescription"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => {
  return (
    <div
      className={cx(
        "flex flex-col-reverse border-t border-gray-200 pt-4 sm:flex-row sm:justify-end sm:space-x-2 dark:border-gray-900",
        className,
      )}
      {...props}
    />
  )
}

DrawerFooter.displayName = "DrawerFooter"

export {
  Drawer,
  DrawerBody,
  DrawerClose,
  DrawerContent,
  DrawerDescription,
  DrawerFooter,
  DrawerHeader,
  DrawerTitle,
  DrawerTrigger,
}
</file>

<file path="src/components/Dropdown.tsx">
// Tremor Raw Dropdown Menu [v0.0.0]

"use client"

import * as DropdownMenuPrimitives from "@radix-ui/react-dropdown-menu"
import {
  RiArrowRightSLine,
  RiCheckboxBlankCircleLine,
  RiCheckLine,
  RiRadioButtonFill,
} from "@remixicon/react"
import * as React from "react"

import { cx } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitives.Root
DropdownMenu.displayName = "DropdownMenu"

const DropdownMenuTrigger = DropdownMenuPrimitives.Trigger
DropdownMenuTrigger.displayName = "DropdownMenuTrigger"

const DropdownMenuGroup = DropdownMenuPrimitives.Group
DropdownMenuGroup.displayName = "DropdownMenuGroup"

const DropdownMenuSubMenu = DropdownMenuPrimitives.Sub
DropdownMenuSubMenu.displayName = "DropdownMenuSubMenu"

const DropdownMenuRadioGroup = DropdownMenuPrimitives.RadioGroup
DropdownMenuRadioGroup.displayName = "DropdownMenuRadioGroup"

const DropdownMenuSubMenuTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitives.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.SubTrigger>
>(({ className, children, ...props }, forwardedRef) => (
  <DropdownMenuPrimitives.SubTrigger
    ref={forwardedRef}
    className={cx(
      // base
      "relative flex cursor-default select-none items-center rounded py-1.5 pl-2 pr-1 outline-none transition-colors data-[state=checked]:font-semibold sm:text-sm",
      // text color
      "text-gray-900 dark:text-gray-50",
      // disabled
      "data-[disabled]:pointer-events-none data-[disabled]:text-gray-400 data-[disabled]:hover:bg-none dark:data-[disabled]:text-gray-600",
      // focus
      "focus-visible:bg-gray-100 data-[state=open]:bg-gray-100 focus-visible:dark:bg-gray-900 data-[state=open]:dark:bg-gray-900",
      // hover
      "hover:bg-gray-100 hover:dark:bg-gray-900",
      //
      className,
    )}
    {...props}
  >
    {children}
    <RiArrowRightSLine
      className="ml-auto size-4 shrink-0 text-gray-500"
      aria-hidden="true"
    />
  </DropdownMenuPrimitives.SubTrigger>
))
DropdownMenuSubMenuTrigger.displayName = "DropdownMenuSubMenuTrigger"

const DropdownMenuSubMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitives.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.SubContent>
>(({ className, collisionPadding = 8, ...props }, forwardedRef) => (
  <DropdownMenuPrimitives.Portal>
    <DropdownMenuPrimitives.SubContent
      ref={forwardedRef}
      collisionPadding={collisionPadding}
      className={cx(
        // base
        "relative z-50 overflow-hidden rounded-md border p-1 shadow-xl shadow-black/[2.5%]",
        // widths
        "min-w-32",
        // heights
        "max-h-[var(--radix-popper-available-height)]",
        // background color
        "bg-white dark:bg-gray-950",
        // text color
        "text-gray-900 dark:text-gray-50",
        // border color
        "border-gray-200 dark:border-gray-800",
        // transition
        "will-change-[transform,opacity]",
        // "data-[state=open]:animate-slideDownAndFade",
        "data-[state=closed]:animate-hide",
        "data-[side=bottom]:animate-slideDownAndFade data-[side=left]:animate-slideLeftAndFade data-[side=right]:animate-slideRightAndFade data-[side=top]:animate-slideUpAndFade",
        className,
      )}
      {...props}
    />
  </DropdownMenuPrimitives.Portal>
))
DropdownMenuSubMenuContent.displayName = "DropdownMenuSubMenuContent"

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitives.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.Content>
>(
  (
    {
      className,
      sideOffset = 8,
      collisionPadding = 8,
      align = "center",
      loop = true,
      ...props
    },
    forwardedRef,
  ) => (
    <DropdownMenuPrimitives.Portal>
      <DropdownMenuPrimitives.Content
        ref={forwardedRef}
        className={cx(
          // base
          "relative z-50 overflow-hidden rounded-md border p-1 shadow-xl shadow-black/[2.5%]",
          // widths
          "min-w-[calc(var(--radix-dropdown-menu-trigger-width))]",
          // heights
          "max-h-[var(--radix-popper-available-height)]",
          // background color
          "bg-white dark:bg-gray-950",
          // text color
          "text-gray-900 dark:text-gray-50",
          // border color
          "border-gray-200 dark:border-gray-800",
          // transition
          "will-change-[transform,opacity]",
          "data-[state=closed]:animate-hide",
          "data-[side=bottom]:animate-slideDownAndFade data-[side=left]:animate-slideLeftAndFade data-[side=right]:animate-slideRightAndFade data-[side=top]:animate-slideUpAndFade",
          className,
        )}
        sideOffset={sideOffset}
        align={align}
        collisionPadding={collisionPadding}
        loop={loop}
        {...props}
      />
    </DropdownMenuPrimitives.Portal>
  ),
)
DropdownMenuContent.displayName = "DropdownMenuContent"

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitives.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.Item> & {
    shortcut?: string
    hint?: string
  }
>(({ className, shortcut, hint, children, ...props }, forwardedRef) => (
  <DropdownMenuPrimitives.Item
    ref={forwardedRef}
    className={cx(
      // base
      "group/DropdownMenuItem relative flex cursor-pointer select-none items-center rounded py-1.5 pl-2 pr-1 outline-none transition-colors data-[state=checked]:font-semibold sm:text-sm",
      // text color
      "text-gray-900 dark:text-gray-50",
      // disabled
      "data-[disabled]:pointer-events-none data-[disabled]:text-gray-400 data-[disabled]:hover:bg-none dark:data-[disabled]:text-gray-600",
      // focus
      "focus-visible:bg-gray-100 focus-visible:dark:bg-gray-900",
      // hover
      "hover:bg-gray-100 hover:dark:bg-gray-900",
      className,
    )}
    {...props}
  >
    {children}
    {hint && (
      <span
        className={cx("ml-auto pl-2 text-sm text-gray-400 dark:text-gray-600")}
      >
        {hint}
      </span>
    )}
    {shortcut && (
      <span
        className={cx("ml-auto pl-2 text-sm text-gray-400 dark:text-gray-600")}
      >
        {shortcut}
      </span>
    )}
  </DropdownMenuPrimitives.Item>
))
DropdownMenuItem.displayName = "DropdownMenuItem"

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitives.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.CheckboxItem> & {
    shortcut?: string
    hint?: string
  }
>(
  (
    { className, hint, shortcut, children, checked, ...props },
    forwardedRef,
  ) => (
    <DropdownMenuPrimitives.CheckboxItem
      ref={forwardedRef}
      className={cx(
        // base
        "relative flex cursor-pointer select-none items-center gap-x-2 rounded py-1.5 pl-8 pr-1 outline-none transition-colors data-[state=checked]:font-semibold sm:text-sm",
        // text color
        "text-gray-900 dark:text-gray-50",
        // disabled
        "data-[disabled]:pointer-events-none data-[disabled]:text-gray-400 data-[disabled]:hover:bg-none dark:data-[disabled]:text-gray-600",
        // focus
        "focus-visible:bg-gray-100 focus-visible:dark:bg-gray-900",
        // hover
        "hover:bg-gray-100 hover:dark:bg-gray-900",
        className,
      )}
      checked={checked}
      {...props}
    >
      <span className="absolute left-2 flex size-4 items-center justify-center">
        <DropdownMenuPrimitives.ItemIndicator>
          <RiCheckLine
            aria-hidden="true"
            className="size-full shrink-0 text-gray-800 dark:text-gray-200"
          />
        </DropdownMenuPrimitives.ItemIndicator>
      </span>
      {children}
      {hint && (
        <span
          className={cx(
            "ml-auto text-sm font-normal text-gray-400 dark:text-gray-600",
          )}
        >
          {hint}
        </span>
      )}
      {shortcut && (
        <span
          className={cx(
            "ml-auto text-sm font-normal tracking-widest text-gray-400 dark:border-gray-800 dark:text-gray-600",
          )}
        >
          {shortcut}
        </span>
      )}
    </DropdownMenuPrimitives.CheckboxItem>
  ),
)
DropdownMenuCheckboxItem.displayName = "DropdownMenuCheckboxItem"

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitives.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.RadioItem> & {
    shortcut?: string
    hint?: string
    iconType?: "check" | "radio"
  }
>(
  (
    { className, hint, shortcut, children, iconType = "radio", ...props },
    forwardedRef,
  ) => (
    <DropdownMenuPrimitives.RadioItem
      ref={forwardedRef}
      className={cx(
        // base
        "group/DropdownMenuRadioItem relative flex cursor-pointer select-none items-center gap-x-2 rounded py-1.5 pl-8 pr-1 outline-none transition-colors data-[state=checked]:font-semibold sm:text-sm",
        // text color
        "text-gray-900 dark:text-gray-50",
        // disabled
        "data-[disabled]:pointer-events-none data-[disabled]:text-gray-400 data-[disabled]:hover:bg-none dark:data-[disabled]:text-gray-600",
        // focus
        "focus-visible:bg-gray-100 focus-visible:dark:bg-gray-900",
        // hover
        "hover:bg-gray-100 hover:dark:bg-gray-900",
        className,
      )}
      {...props}
    >
      {iconType === "radio" ? (
        <span className="absolute left-2 flex size-4 items-center justify-center">
          <RiRadioButtonFill
            aria-hidden="true"
            className="size-full shrink-0 text-blue-500 group-data-[state=checked]/DropdownMenuRadioItem:flex group-data-[state=unchecked]/DropdownMenuRadioItem:hidden dark:text-blue-500"
          />
          <RiCheckboxBlankCircleLine
            aria-hidden="true"
            className="size-full shrink-0 text-gray-300 group-data-[state=unchecked]/DropdownMenuRadioItem:flex group-data-[state=checked]/DropdownMenuRadioItem:hidden dark:text-gray-700"
          />
        </span>
      ) : iconType === "check" ? (
        <span className="absolute left-2 flex size-4 items-center justify-center">
          <RiCheckLine
            aria-hidden="true"
            className="size-full shrink-0 text-gray-800 group-data-[state=checked]/DropdownMenuRadioItem:flex group-data-[state=unchecked]/DropdownMenuRadioItem:hidden dark:text-gray-200"
          />
        </span>
      ) : null}
      {children}
      {hint && (
        <span
          className={cx(
            "ml-auto text-sm font-normal text-gray-400 dark:text-gray-600",
          )}
        >
          {hint}
        </span>
      )}
      {shortcut && (
        <span
          className={cx(
            "ml-auto text-sm font-normal tracking-widest text-gray-400 dark:border-gray-800 dark:text-gray-600",
          )}
        >
          {shortcut}
        </span>
      )}
    </DropdownMenuPrimitives.RadioItem>
  ),
)
DropdownMenuRadioItem.displayName = "DropdownMenuRadioItem"

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitives.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.Label>
>(({ className, ...props }, forwardedRef) => (
  <DropdownMenuPrimitives.Label
    ref={forwardedRef}
    className={cx(
      // base
      "px-2 py-2 text-xs font-medium tracking-wide",
      // text color
      "text-gray-500 dark:text-gray-500",
      className,
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = "DropdownMenuLabel"

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitives.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.Separator>
>(({ className, ...props }, forwardedRef) => (
  <DropdownMenuPrimitives.Separator
    ref={forwardedRef}
    className={cx(
      "-mx-1 my-1 h-px border-t border-gray-200 dark:border-gray-800",
      className,
    )}
    {...props}
  />
))
DropdownMenuSeparator.displayName = "DropdownMenuSeparator"

const DropdownMenuIconWrapper = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <div
      className={cx(
        // text color
        "text-gray-600 dark:text-gray-400",
        // disabled
        "group-data-[disabled]/DropdownMenuItem:text-gray-400 group-data-[disabled]/DropdownMenuItem:dark:text-gray-700",
        className,
      )}
      {...props}
    />
  )
}
DropdownMenuIconWrapper.displayName = "DropdownMenuIconWrapper"

export {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuIconWrapper,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuSubMenu,
  DropdownMenuSubMenuContent,
  DropdownMenuSubMenuTrigger,
  DropdownMenuTrigger,
}
</file>

<file path="src/components/Input.tsx">
// Tremor Raw Input [v1.0.3]

import { RiEyeFill, RiEyeOffFill, RiSearchLine } from "@remixicon/react"
import React from "react"
import { tv, type VariantProps } from "tailwind-variants"

import { cx, focusInput, focusRing, hasErrorInput } from "@/lib/utils"

const inputStyles = tv({
  base: [
    // base
    "relative block w-full appearance-none truncate rounded-md border px-2.5 py-2 shadow-sm outline-none transition sm:text-sm",
    // border color
    "border-gray-300 dark:border-gray-800",
    // text color
    "text-gray-900 dark:text-gray-50",
    // placeholder color
    "placeholder-gray-400 dark:placeholder-gray-500",
    // background color
    "bg-white dark:bg-gray-950",
    // disabled
    "disabled:border-gray-300 disabled:bg-gray-100 disabled:text-gray-400",
    "disabled:dark:border-gray-700 disabled:dark:bg-gray-800 disabled:dark:text-gray-500",
    // file
    [
      "file:-my-2 file:-ml-2.5 file:cursor-pointer file:rounded-l-[5px] file:rounded-r-none file:border-0 file:px-3 file:py-2 file:outline-none focus:outline-none disabled:pointer-events-none file:disabled:pointer-events-none",
      "file:border-solid file:border-gray-300 file:bg-gray-50 file:text-gray-500 file:hover:bg-gray-100 file:dark:border-gray-800 file:dark:bg-gray-950 file:hover:dark:bg-gray-900/20 file:disabled:dark:border-gray-700",
      "file:[border-inline-end-width:1px] file:[margin-inline-end:0.75rem]",
      "file:disabled:bg-gray-100 file:disabled:text-gray-500 file:disabled:dark:bg-gray-800",
    ],
    // focus
    focusInput,
    // invalid (optional)
    // "aria-[invalid=true]:dark:ring-red-400/20 aria-[invalid=true]:ring-2 aria-[invalid=true]:ring-red-200 aria-[invalid=true]:border-red-500 invalid:ring-2 invalid:ring-red-200 invalid:border-red-500"
    // remove search cancel button (optional)
    "[&::--webkit-search-cancel-button]:hidden [&::-webkit-search-cancel-button]:hidden [&::-webkit-search-decoration]:hidden",
  ],
  variants: {
    hasError: {
      true: hasErrorInput,
    },
    // number input
    enableStepper: {
      false:
        "[appearance:textfield] [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-outer-spin-button]:appearance-none",
    },
  },
})

interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement>,
    VariantProps<typeof inputStyles> {
  inputClassName?: string
}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  (
    {
      className,
      inputClassName,
      hasError,
      enableStepper = true,
      type,
      ...props
    }: InputProps,
    forwardedRef,
  ) => {
    const [typeState, setTypeState] = React.useState(type)

    const isPassword = type === "password"
    const isSearch = type === "search"

    return (
      <div className={cx("relative w-full", className)}>
        <input
          ref={forwardedRef}
          type={isPassword ? typeState : type}
          className={cx(
            inputStyles({ hasError, enableStepper }),
            {
              "pl-8": isSearch,
              "pr-10": isPassword,
            },
            inputClassName,
          )}
          {...props}
        />
        {isSearch && (
          <div
            className={cx(
              // base
              "pointer-events-none absolute bottom-0 left-2 flex h-full items-center justify-center",
              // text color
              "text-gray-400 dark:text-gray-600",
            )}
          >
            <RiSearchLine
              className="size-[1.125rem] shrink-0"
              aria-hidden="true"
            />
          </div>
        )}
        {isPassword && (
          <div
            className={cx(
              "absolute bottom-0 right-0 flex h-full items-center justify-center px-3",
            )}
          >
            <button
              aria-label="Change password visibility"
              className={cx(
                // base
                "h-fit w-fit rounded-sm outline-none transition-all",
                // text
                "text-gray-400 dark:text-gray-600",
                // hover
                "hover:text-gray-500 hover:dark:text-gray-500",
                focusRing,
              )}
              type="button"
              onClick={() => {
                setTypeState(typeState === "password" ? "text" : "password")
              }}
            >
              <span className="sr-only">
                {typeState === "password" ? "Show password" : "Hide password"}
              </span>
              {typeState === "password" ? (
                <RiEyeFill aria-hidden="true" className="size-5 shrink-0" />
              ) : (
                <RiEyeOffFill aria-hidden="true" className="size-5 shrink-0" />
              )}
            </button>
          </div>
        )}
      </div>
    )
  },
)

Input.displayName = "Input"

export { Input, inputStyles, type InputProps }
</file>

<file path="src/components/Label.tsx">
// Tremor Raw Label [v0.0.0]

import * as LabelPrimitives from "@radix-ui/react-label"
import * as React from "react"

import { cx } from "@/lib/utils"

interface CheckboxProps
  extends React.ComponentPropsWithoutRef<typeof LabelPrimitives.Root> {
  disabled?: boolean
}

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitives.Root>,
  CheckboxProps
>(({ className, disabled, ...props }, forwardedRef) => (
  <LabelPrimitives.Root
    ref={forwardedRef}
    className={cx(
      // base
      "text-sm leading-none",
      // text color
      "text-gray-900 dark:text-gray-50",
      // disabled
      {
        "text-gray-400 dark:text-gray-600": disabled,
      },
      className,
    )}
    aria-disabled={disabled}
    {...props}
  />
))
Label.displayName = "Label"

export { Label }
</file>

<file path="src/components/LineChart.tsx">
// Tremor Raw LineChart [v0.0.0]

"use client"

import { RiArrowLeftSLine, RiArrowRightSLine } from "@remixicon/react"
import React from "react"
import {
  CartesianGrid,
  Dot,
  Label,
  Line,
  Legend as RechartsLegend,
  LineChart as RechartsLineChart,
  ResponsiveContainer,
  Tooltip,
  XAxis,
  YAxis,
} from "recharts"
import { AxisDomain } from "recharts/types/util/types"

import {
  AvailableChartColors,
  AvailableChartColorsKeys,
  constructCategoryColors,
  getColorClassName,
  getYAxisDomain,
  hasOnlyOneValueForKey,
} from "@/lib/chartUtils"
import { useOnWindowResize } from "@/lib/useOnWindowResize"
import { cx, percentageFormatter } from "@/lib/utils"
import { Badge } from "./Badge"
import { getBadgeType } from "./ui/overview/DashboardChartCard"

//#region Legend

interface LegendItemProps {
  name: string
  color: AvailableChartColorsKeys
  onClick?: (name: string, color: AvailableChartColorsKeys) => void
  activeLegend?: string
}

const LegendItem = ({
  name,
  color,
  onClick,
  activeLegend,
}: LegendItemProps) => {
  const hasOnValueChange = !!onClick
  return (
    <li
      className={cx(
        // base
        "group inline-flex flex-nowrap items-center gap-1.5 whitespace-nowrap rounded px-2 py-1 transition",
        hasOnValueChange
          ? "bg-transpaent cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800"
          : "cursor-default",
      )}
      onClick={(e) => {
        e.stopPropagation()
        onClick?.(name, color)
      }}
    >
      <span
        className={cx(
          "h-[3px] w-3.5 shrink-0 rounded-full",
          getColorClassName(color, "bg"),
          activeLegend && activeLegend !== name ? "opacity-40" : "opacity-100",
        )}
        aria-hidden="true"
      />
      <p
        className={cx(
          // base
          "truncate whitespace-nowrap text-xs",
          // text color
          "text-gray-700 dark:text-gray-300",
          hasOnValueChange &&
            "group-hover:text-gray-900 dark:group-hover:text-gray-50",
          activeLegend && activeLegend !== name ? "opacity-40" : "opacity-100",
        )}
      >
        {name}
      </p>
    </li>
  )
}

interface ScrollButtonProps {
  icon: React.ElementType
  onClick?: () => void
  disabled?: boolean
}

const ScrollButton = ({ icon, onClick, disabled }: ScrollButtonProps) => {
  const Icon = icon
  const [isPressed, setIsPressed] = React.useState(false)
  const intervalRef = React.useRef<NodeJS.Timeout | null>(null)

  React.useEffect(() => {
    if (isPressed) {
      intervalRef.current = setInterval(() => {
        onClick?.()
      }, 300)
    } else {
      clearInterval(intervalRef.current as NodeJS.Timeout)
    }
    return () => clearInterval(intervalRef.current as NodeJS.Timeout)
  }, [isPressed, onClick])

  React.useEffect(() => {
    if (disabled) {
      clearInterval(intervalRef.current as NodeJS.Timeout)
      setIsPressed(false)
    }
  }, [disabled])

  return (
    <button
      type="button"
      className={cx(
        // base
        "group inline-flex size-5 items-center truncate rounded transition",
        disabled
          ? "cursor-not-allowed text-gray-400 dark:text-gray-600"
          : "cursor-pointer text-gray-700 hover:bg-gray-100 hover:text-gray-900 dark:text-gray-300 dark:hover:bg-gray-800 dark:hover:text-gray-50",
      )}
      disabled={disabled}
      onClick={(e) => {
        e.stopPropagation()
        onClick?.()
      }}
      onMouseDown={(e) => {
        e.stopPropagation()
        setIsPressed(true)
      }}
      onMouseUp={(e) => {
        e.stopPropagation()
        setIsPressed(false)
      }}
    >
      <Icon className="size-full" aria-hidden="true" />
    </button>
  )
}

interface LegendProps extends React.OlHTMLAttributes<HTMLOListElement> {
  categories: string[]
  colors?: AvailableChartColorsKeys[]
  onClickLegendItem?: (category: string, color: string) => void
  activeLegend?: string
  enableLegendSlider?: boolean
}

type HasScrollProps = {
  left: boolean
  right: boolean
}

const Legend = React.forwardRef<HTMLOListElement, LegendProps>((props, ref) => {
  const {
    categories,
    colors = AvailableChartColors,
    className,
    onClickLegendItem,
    activeLegend,
    enableLegendSlider = false,
    ...other
  } = props
  const scrollableRef = React.useRef<HTMLInputElement>(null)
  const [hasScroll, setHasScroll] = React.useState<HasScrollProps | null>(null)
  const [isKeyDowned, setIsKeyDowned] = React.useState<string | null>(null)
  const intervalRef = React.useRef<NodeJS.Timeout | null>(null)

  const checkScroll = React.useCallback(() => {
    const scrollable = scrollableRef?.current
    if (!scrollable) return

    const hasLeftScroll = scrollable.scrollLeft > 0
    const hasRightScroll =
      scrollable.scrollWidth - scrollable.clientWidth > scrollable.scrollLeft

    setHasScroll({ left: hasLeftScroll, right: hasRightScroll })
  }, [setHasScroll])

  const scrollToTest = React.useCallback(
    (direction: "left" | "right") => {
      const element = scrollableRef?.current
      const width = element?.clientWidth ?? 0

      if (element && enableLegendSlider) {
        element.scrollTo({
          left:
            direction === "left"
              ? element.scrollLeft - width
              : element.scrollLeft + width,
          behavior: "smooth",
        })
        setTimeout(() => {
          checkScroll()
        }, 400)
      }
    },
    [enableLegendSlider, checkScroll],
  )

  React.useEffect(() => {
    const keyDownHandler = (key: string) => {
      if (key === "ArrowLeft") {
        scrollToTest("left")
      } else if (key === "ArrowRight") {
        scrollToTest("right")
      }
    }
    if (isKeyDowned) {
      keyDownHandler(isKeyDowned)
      intervalRef.current = setInterval(() => {
        keyDownHandler(isKeyDowned)
      }, 300)
    } else {
      clearInterval(intervalRef.current as NodeJS.Timeout)
    }
    return () => clearInterval(intervalRef.current as NodeJS.Timeout)
  }, [isKeyDowned, scrollToTest])

  const keyDown = (e: KeyboardEvent) => {
    e.stopPropagation()
    if (e.key === "ArrowLeft" || e.key === "ArrowRight") {
      e.preventDefault()
      setIsKeyDowned(e.key)
    }
  }
  const keyUp = (e: KeyboardEvent) => {
    e.stopPropagation()
    setIsKeyDowned(null)
  }

  React.useEffect(() => {
    const scrollable = scrollableRef?.current
    if (enableLegendSlider) {
      checkScroll()
      scrollable?.addEventListener("keydown", keyDown)
      scrollable?.addEventListener("keyup", keyUp)
    }

    return () => {
      scrollable?.removeEventListener("keydown", keyDown)
      scrollable?.removeEventListener("keyup", keyUp)
    }
  }, [checkScroll, enableLegendSlider])

  return (
    <ol
      ref={ref}
      className={cx("relative overflow-hidden", className)}
      {...other}
    >
      <div
        ref={scrollableRef}
        tabIndex={0}
        className={cx(
          "flex h-full",
          enableLegendSlider
            ? hasScroll?.right || hasScroll?.left
              ? "snap-mandatory items-center overflow-auto pl-4 pr-12 [scrollbar-width:none] [&::-webkit-scrollbar]:hidden"
              : ""
            : "flex-wrap",
        )}
      >
        {categories.map((category, index) => (
          <LegendItem
            key={`item-${index}`}
            name={category}
            color={colors[index] as AvailableChartColorsKeys}
            onClick={onClickLegendItem}
            activeLegend={activeLegend}
          />
        ))}
      </div>
      {enableLegendSlider && (hasScroll?.right || hasScroll?.left) ? (
        <>
          <div
            className={cx(
              // base
              "absolute bottom-0 right-0 top-0 flex h-full items-center justify-center pr-1",
              // background color
              "bg-white dark:bg-gray-950",
            )}
          >
            <ScrollButton
              icon={RiArrowLeftSLine}
              onClick={() => {
                setIsKeyDowned(null)
                scrollToTest("left")
              }}
              disabled={!hasScroll?.left}
            />
            <ScrollButton
              icon={RiArrowRightSLine}
              onClick={() => {
                setIsKeyDowned(null)
                scrollToTest("right")
              }}
              disabled={!hasScroll?.right}
            />
          </div>
        </>
      ) : null}
    </ol>
  )
})

Legend.displayName = "Legend"

const ChartLegend = (
  { payload }: any,
  categoryColors: Map<string, AvailableChartColorsKeys>,
  setLegendHeight: React.Dispatch<React.SetStateAction<number>>,
  activeLegend: string | undefined,
  onClick?: (category: string, color: string) => void,
  enableLegendSlider?: boolean,
) => {
  const legendRef = React.useRef<HTMLDivElement>(null)

  useOnWindowResize(() => {
    const calculateHeight = (height: number | undefined) =>
      height ? Number(height) + 15 : 60
    setLegendHeight(calculateHeight(legendRef.current?.clientHeight))
  })

  const filteredPayload = payload.filter((item: any) => item.type !== "none")

  return (
    <div ref={legendRef} className="flex items-center justify-end">
      <Legend
        categories={filteredPayload.map((entry: any) => entry.value)}
        colors={filteredPayload.map((entry: any) =>
          categoryColors.get(entry.value),
        )}
        onClickLegendItem={onClick}
        activeLegend={activeLegend}
        enableLegendSlider={enableLegendSlider}
      />
    </div>
  )
}

//#region Tooltip

interface ChartTooltipRowProps {
  value: string
  name: string
  color: string
}

const ChartTooltipRow = ({ value, name, color }: ChartTooltipRowProps) => (
  <div className="flex items-center justify-between space-x-8">
    <div className="flex items-center space-x-2">
      <span
        aria-hidden="true"
        className={cx("h-[3px] w-3.5 shrink-0 rounded-full", color)}
      />
      <p
        className={cx(
          // commmon
          "whitespace-nowrap text-right",
          // text color
          "text-gray-700 dark:text-gray-300",
        )}
      >
        {name}
      </p>
    </div>
    <p
      className={cx(
        // base
        "whitespace-nowrap text-right font-medium tabular-nums",
        // text color
        "text-gray-900 dark:text-gray-50",
      )}
    >
      {value}
    </p>
  </div>
)

interface ChartTooltipProps {
  active: boolean | undefined
  payload: any
  label: string
  categoryColors: Map<string, string>
  valueFormatter: (value: number) => string
}

const OverviewChartTooltip = ({
  active,
  payload,
  categoryColors,
  valueFormatter,
}: ChartTooltipProps) => {
  if (active && payload) {
    const filteredPayload = payload.filter((item: any) => item.type !== "none")

    if (!active || !payload) return null

    const title = payload[0].payload.title
    const evolution = payload[0].payload.evolution
    if (!title) return null

    return (
      <div
        className={cx(
          // base
          "rounded-md border text-sm shadow-md",
          // border color
          "border-gray-200 dark:border-gray-800",
          // background color
          "bg-white dark:bg-gray-950",
        )}
      >
        <div className="flex items-start justify-between gap-2 border-b border-inherit p-2">
          <p
            className={cx(
              // base
              "font-medium",
              // text color
              "text-gray-900 dark:text-gray-50",
            )}
          >
            {title}
          </p>
          {evolution !== undefined && (
            <Badge variant={getBadgeType(evolution)}>
              {percentageFormatter(evolution)}
            </Badge>
          )}
        </div>
        <div className={cx("space-y-1 p-2")}>
          {filteredPayload.map((payload: any, index: number) => {
            const payloadData = payload.payload
            return (
              <ChartTooltipRow
                key={`id-${index}`}
                value={valueFormatter(payload.value)}
                name={
                  index === 0
                    ? payloadData.formattedDate
                    : payloadData.previousFormattedDate
                }
                color={getColorClassName(
                  categoryColors.get(payload.name) as AvailableChartColorsKeys,
                  "bg",
                )}
              />
            )
          })}
        </div>
      </div>
    )
  }
  return null
}

//#region LineChart

interface ActiveDot {
  index?: number
  dataKey?: string
}

type BaseEventProps = {
  eventType: "dot" | "category"
  categoryClicked: string
  [key: string]: number | string
}

type LineChartEventProps = BaseEventProps | null | undefined

interface LineChartProps extends React.HTMLAttributes<HTMLDivElement> {
  data: Record<string, any>[]
  index: string
  categories: string[]
  colors?: AvailableChartColorsKeys[]
  valueFormatter?: (value: number) => string
  startEndOnly?: boolean
  showXAxis?: boolean
  showYAxis?: boolean
  showGridLines?: boolean
  yAxisWidth?: number
  intervalType?: "preserveStartEnd" | "equidistantPreserveStart"
  showTooltip?: boolean
  showLegend?: boolean
  autoMinValue?: boolean
  minValue?: number
  maxValue?: number
  allowDecimals?: boolean
  onValueChange?: (value: LineChartEventProps) => void
  enableLegendSlider?: boolean
  tickGap?: number
  connectNulls?: boolean
  xAxisLabel?: string
  yAxisLabel?: string
}

const LineChart = React.forwardRef<HTMLDivElement, LineChartProps>(
  (props, ref) => {
    const {
      data = [],
      categories = [],
      index,
      colors = AvailableChartColors,
      valueFormatter = (value: number) => value.toString(),
      startEndOnly = false,
      showXAxis = true,
      showYAxis = true,
      showGridLines = true,
      yAxisWidth = 56,
      intervalType = "equidistantPreserveStart",
      showTooltip = true,
      showLegend = true,
      autoMinValue = false,
      minValue,
      maxValue,
      allowDecimals = true,
      connectNulls = false,
      className,
      onValueChange,
      enableLegendSlider = false,
      tickGap = 5,
      xAxisLabel,
      yAxisLabel,
      ...other
    } = props
    const paddingValue = !showXAxis && !showYAxis ? 0 : 20
    const [legendHeight, setLegendHeight] = React.useState(60)
    const [activeDot, setActiveDot] = React.useState<ActiveDot | undefined>(
      undefined,
    )
    const [activeLegend, setActiveLegend] = React.useState<string | undefined>(
      undefined,
    )
    const categoryColors = constructCategoryColors(categories, colors)

    const yAxisDomain = getYAxisDomain(autoMinValue, minValue, maxValue)
    const hasOnValueChange = !!onValueChange

    function onDotClick(itemData: any, event: React.MouseEvent) {
      event.stopPropagation()

      if (!hasOnValueChange) return
      if (
        (itemData.index === activeDot?.index &&
          itemData.dataKey === activeDot?.dataKey) ||
        (hasOnlyOneValueForKey(data, itemData.dataKey) &&
          activeLegend &&
          activeLegend === itemData.dataKey)
      ) {
        setActiveLegend(undefined)
        setActiveDot(undefined)
        onValueChange?.(null)
      } else {
        setActiveLegend(itemData.dataKey)
        setActiveDot({
          index: itemData.index,
          dataKey: itemData.dataKey,
        })
        onValueChange?.({
          eventType: "dot",
          categoryClicked: itemData.dataKey,
          ...itemData.payload,
        })
      }
    }

    function onCategoryClick(dataKey: string) {
      if (!hasOnValueChange) return
      if (
        (dataKey === activeLegend && !activeDot) ||
        (hasOnlyOneValueForKey(data, dataKey) &&
          activeDot &&
          activeDot.dataKey === dataKey)
      ) {
        setActiveLegend(undefined)
        onValueChange?.(null)
      } else {
        setActiveLegend(dataKey)
        onValueChange?.({
          eventType: "category",
          categoryClicked: dataKey,
        })
      }
      setActiveDot(undefined)
    }

    return (
      <div ref={ref} className={cx("h-80 w-full", className)} {...other}>
        <ResponsiveContainer>
          <RechartsLineChart
            data={data}
            onClick={
              hasOnValueChange && (activeLegend || activeDot)
                ? () => {
                    setActiveDot(undefined)
                    setActiveLegend(undefined)
                    onValueChange?.(null)
                  }
                : undefined
            }
            margin={{
              bottom: xAxisLabel ? 30 : undefined,
              left: yAxisLabel ? 20 : undefined,
              right: yAxisLabel ? 5 : undefined,
              top: 0,
            }}
          >
            {showGridLines ? (
              <CartesianGrid
                className={cx("stroke-gray-200 stroke-1 dark:stroke-gray-800")}
                horizontal={true}
                vertical={false}
              />
            ) : null}
            <XAxis
              padding={{ left: paddingValue, right: paddingValue }}
              hide={!showXAxis}
              dataKey={index}
              interval={startEndOnly ? "preserveStartEnd" : intervalType}
              tick={{ transform: "translate(0, 6)" }}
              ticks={
                startEndOnly
                  ? [data[0][index], data[data.length - 1][index]]
                  : undefined
              }
              fill=""
              stroke=""
              className={cx(
                // base
                "text-xs",
                // text fill
                "fill-gray-500 dark:fill-gray-500",
              )}
              tickLine={false}
              axisLine={false}
              minTickGap={tickGap}
            >
              {xAxisLabel && (
                <Label
                  position="insideBottom"
                  offset={-20}
                  className="fill-gray-800 text-sm font-medium dark:fill-gray-200"
                >
                  {xAxisLabel}
                </Label>
              )}
            </XAxis>
            <YAxis
              width={yAxisWidth}
              hide={!showYAxis}
              axisLine={false}
              tickLine={false}
              type="number"
              domain={yAxisDomain as AxisDomain}
              tick={{ transform: "translate(-3, 0)" }}
              fill=""
              stroke=""
              className={cx(
                // base
                "text-xs",
                // text fill
                "fill-gray-500 dark:fill-gray-500",
              )}
              tickFormatter={valueFormatter}
              allowDecimals={allowDecimals}
            >
              {yAxisLabel && (
                <Label
                  position="insideLeft"
                  style={{ textAnchor: "middle" }}
                  angle={-90}
                  offset={-15}
                  className="fill-gray-800 text-sm font-medium dark:fill-gray-200"
                >
                  {yAxisLabel}
                </Label>
              )}
            </YAxis>
            <Tooltip
              wrapperStyle={{ outline: "none" }}
              isAnimationActive={true}
              animationDuration={100}
              cursor={{ stroke: "#d1d5db", strokeWidth: 1 }}
              offset={20}
              position={{ y: 0 }}
              content={
                showTooltip ? (
                  ({ active, payload, label }) => (
                    <OverviewChartTooltip
                      active={active}
                      payload={payload}
                      label={label}
                      valueFormatter={valueFormatter}
                      categoryColors={categoryColors}
                    />
                  )
                ) : (
                  <></>
                )
              }
            />
            {showLegend ? (
              <RechartsLegend
                verticalAlign="top"
                height={legendHeight}
                content={({ payload }) =>
                  ChartLegend(
                    { payload },
                    categoryColors,
                    setLegendHeight,
                    activeLegend,
                    hasOnValueChange
                      ? (clickedLegendItem: string) =>
                          onCategoryClick(clickedLegendItem)
                      : undefined,
                    enableLegendSlider,
                  )
                }
              />
            ) : null}
            {categories.map((category) => (
              <Line
                className={cx(
                  getColorClassName(
                    categoryColors.get(category) as AvailableChartColorsKeys,
                    "stroke",
                  ),
                )}
                strokeOpacity={
                  activeDot || (activeLegend && activeLegend !== category)
                    ? 0.3
                    : 1
                }
                activeDot={(props: any) => {
                  const {
                    cx: cxCoord,
                    cy: cyCoord,
                    stroke,
                    strokeLinecap,
                    strokeLinejoin,
                    strokeWidth,
                    dataKey,
                  } = props
                  return (
                    <Dot
                      className={cx(
                        "stroke-white dark:stroke-gray-950",
                        onValueChange ? "cursor-pointer" : "",
                        getColorClassName(
                          categoryColors.get(
                            dataKey,
                          ) as AvailableChartColorsKeys,
                          "fill",
                        ),
                      )}
                      cx={cxCoord}
                      cy={cyCoord}
                      r={5}
                      fill=""
                      stroke={stroke}
                      strokeLinecap={strokeLinecap}
                      strokeLinejoin={strokeLinejoin}
                      strokeWidth={strokeWidth}
                      onClick={(_, event) => onDotClick(props, event)}
                    />
                  )
                }}
                dot={(props: any) => {
                  const {
                    stroke,
                    strokeLinecap,
                    strokeLinejoin,
                    strokeWidth,
                    cx: cxCoord,
                    cy: cyCoord,
                    dataKey,
                    index,
                  } = props

                  if (
                    (hasOnlyOneValueForKey(data, category) &&
                      !(
                        activeDot ||
                        (activeLegend && activeLegend !== category)
                      )) ||
                    (activeDot?.index === index &&
                      activeDot?.dataKey === category)
                  ) {
                    return (
                      <Dot
                        key={index}
                        cx={cxCoord}
                        cy={cyCoord}
                        r={5}
                        stroke={stroke}
                        fill=""
                        strokeLinecap={strokeLinecap}
                        strokeLinejoin={strokeLinejoin}
                        strokeWidth={strokeWidth}
                        className={cx(
                          "stroke-white dark:stroke-gray-950",
                          onValueChange ? "cursor-pointer" : "",
                          getColorClassName(
                            categoryColors.get(
                              dataKey,
                            ) as AvailableChartColorsKeys,
                            "fill",
                          ),
                        )}
                      />
                    )
                  }
                  return <React.Fragment key={index}></React.Fragment>
                }}
                key={category}
                name={category}
                type="linear"
                dataKey={category}
                stroke=""
                strokeWidth={2}
                strokeLinejoin="round"
                strokeLinecap="round"
                isAnimationActive={false}
                connectNulls={connectNulls}
              />
            ))}
            {/* hidden lines to increase clickable target area */}
            {onValueChange
              ? categories.map((category) => (
                  <Line
                    className={cx("cursor-pointer")}
                    strokeOpacity={0}
                    key={category}
                    name={category}
                    type="linear"
                    dataKey={category}
                    stroke="transparent"
                    fill="transparent"
                    legendType="none"
                    tooltipType="none"
                    strokeWidth={12}
                    connectNulls={connectNulls}
                    onClick={(props: any, event) => {
                      event.stopPropagation()
                      const { name } = props
                      onCategoryClick(name)
                    }}
                  />
                ))
              : null}
          </RechartsLineChart>
        </ResponsiveContainer>
      </div>
    )
  },
)

LineChart.displayName = "LineChart"

export { LineChart, type LineChartEventProps }
</file>

<file path="src/components/Popover.tsx">
// Tremor Raw Popover [v0.0.0]

import * as PopoverPrimitives from "@radix-ui/react-popover"
import * as React from "react"

import { cx } from "@/lib/utils"

const Popover = (
  props: React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Root>,
) => {
  return <PopoverPrimitives.Root {...props} />
}

Popover.displayName = "Popover"

const PopoverTrigger = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitives.Trigger>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Trigger>
>((props, forwardedRef) => {
  return <PopoverPrimitives.Trigger ref={forwardedRef} {...props} />
})

PopoverTrigger.displayName = "PopoverTrigger"

const PopoverAnchor = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitives.Anchor>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Anchor>
>((props, forwardedRef) => {
  return <PopoverPrimitives.Anchor ref={forwardedRef} {...props} />
})

PopoverAnchor.displayName = "PopoverAnchor"

const PopoverClose = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Close>
>((props, forwardedRef) => {
  return <PopoverPrimitives.Close ref={forwardedRef} {...props} />
})

PopoverClose.displayName = "PopoverClose"

interface ContentProps
  extends React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Content> {}

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitives.Content>,
  ContentProps
>(
  (
    {
      className,
      sideOffset = 10,
      side = "bottom",
      align = "center",
      collisionPadding,
      avoidCollisions,
      ...props
    }: ContentProps,
    forwardedRef,
  ) => {
    return (
      <PopoverPrimitives.Portal>
        <PopoverPrimitives.Content
          ref={forwardedRef}
          sideOffset={sideOffset}
          side={side}
          align={align}
          collisionPadding={collisionPadding}
          avoidCollisions
          className={cx(
            // base
            "max-h-[var(--radix-popper-available-height)] min-w-60 overflow-hidden rounded-md border p-2.5 text-sm shadow-md",
            // border color
            "border-gray-200 dark:border-gray-800",
            // text color
            "text-gray-900 dark:text-gray-50",
            // background color
            "bg-white dark:bg-gray-950",
            // transition
            "will-change-[transform,opacity]",
            "data-[state=closed]:animate-hide",
            "data-[state=open]:data-[side=bottom]:animate-slideDownAndFade data-[state=open]:data-[side=left]:animate-slideLeftAndFade data-[state=open]:data-[side=right]:animate-slideRightAndFade data-[state=open]:data-[side=top]:animate-slideUpAndFade",

            className,
          )}
          // https://github.com/radix-ui/primitives/issues/1159
          onWheel={(event) => {
            event.stopPropagation()
            const isScrollingDown = event.deltaY > 0
            if (isScrollingDown) {
              event.currentTarget.dispatchEvent(
                new KeyboardEvent("keydown", { key: "ArrowDown" }),
              )
            } else {
              event.currentTarget.dispatchEvent(
                new KeyboardEvent("keydown", { key: "ArrowUp" }),
              )
            }
          }}
          {...props}
        />
      </PopoverPrimitives.Portal>
    )
  },
)
PopoverContent.displayName = "PopoverContent"

export { Popover, PopoverAnchor, PopoverClose, PopoverContent, PopoverTrigger }
</file>

<file path="src/components/ProgressBar.tsx">
// Tremor Raw ProgressBar [v0.0.1]

import React from "react"
import { tv, type VariantProps } from "tailwind-variants"

import { cx } from "@/lib/utils"

const progressBarVariants = tv({
  slots: {
    background: "",
    bar: "",
  },
  variants: {
    variant: {
      default: {
        background: "bg-indigo-100 dark:bg-indigo-500/30",
        bar: "bg-indigo-600 dark:bg-indigo-500",
      },
      neutral: {
        background: "bg-gray-200 dark:bg-gray-500/40",
        bar: "bg-gray-500 dark:bg-gray-500",
      },
      warning: {
        background: "bg-yellow-200 dark:bg-yellow-500/30",
        bar: "bg-yellow-500 dark:bg-yellow-500",
      },
      error: {
        background: "bg-red-200 dark:bg-red-500/30",
        bar: "bg-red-500 dark:bg-red-500",
      },
      success: {
        background: "bg-emerald-200 dark:bg-emerald-500/30",
        bar: "bg-emerald-500 dark:bg-emerald-500",
      },
    },
  },
  defaultVariants: {
    variant: "default",
  },
})

interface ProgressBarProps
  extends React.HTMLProps<HTMLDivElement>,
    VariantProps<typeof progressBarVariants> {
  value?: number
  max?: number
  showAnimation?: boolean
  label?: string
}

const ProgressBar = React.forwardRef<HTMLDivElement, ProgressBarProps>(
  (
    {
      value = 0,
      max = 100,
      label,
      showAnimation = false,
      variant,
      className,
      ...props
    }: ProgressBarProps,
    forwardedRef,
  ) => {
    const safeValue = Math.min(max, Math.max(value, 0))
    const { background, bar } = progressBarVariants({ variant })
    return (
      <div
        ref={forwardedRef}
        className={cx("flex w-full items-center", className)}
        {...props}
      >
        <div
          className={cx(
            "relative flex h-2 w-full items-center rounded-full",
            background(),
          )}
          aria-label="progress bar"
          aria-valuenow={value}
          aria-valuemax={max}
        >
          <div
            className={cx(
              "h-full flex-col rounded-full",
              bar(),
              showAnimation &&
                "transform-gpu transition-all duration-300 ease-in-out",
            )}
            style={{
              width: max ? `${(safeValue / max) * 100}%` : `${safeValue}%`,
            }}
          />
        </div>
        {label ? (
          <span
            className={cx(
              // base
              "ml-2 whitespace-nowrap text-sm font-medium leading-none",
              // text color
              "text-gray-900 dark:text-gray-50",
            )}
          >
            {label}
          </span>
        ) : null}
      </div>
    )
  },
)

ProgressBar.displayName = "ProgressBar"

export { ProgressBar, progressBarVariants, type ProgressBarProps }
</file>

<file path="src/components/ProgressCircle.tsx">
// Tremor Raw ProgressCircle [v0.0.1]

import React from "react"
import { tv, VariantProps } from "tailwind-variants"

import { cx } from "@/lib/utils"

const progressCircleVariants = tv({
  slots: {
    background: "",
    circle: "",
  },
  variants: {
    variant: {
      default: {
        background: "stroke-indigo-200 dark:stroke-indigo-500/30",
        circle: "stroke-indigo-600 dark:stroke-indigo-500",
      },
      neutral: {
        background: "stroke-gray-200 dark:stroke-gray-500/40",
        circle: "stroke-gray-500 dark:stroke-gray-500",
      },
      warning: {
        background: "stroke-yellow-200 dark:stroke-yellow-500/30",
        circle: "stroke-yellow-500 dark:stroke-yellow-500",
      },
      error: {
        background: "stroke-red-200 dark:stroke-red-500/30",
        circle: "stroke-red-500 dark:stroke-red-500",
      },
      success: {
        background: "stroke-emerald-200 dark:stroke-emerald-500/30",
        circle: "stroke-emerald-500 dark:stroke-emerald-500",
      },
    },
  },
  defaultVariants: {
    variant: "default",
  },
})

interface ProgressCircleProps
  extends Omit<React.SVGProps<SVGSVGElement>, "value">,
    VariantProps<typeof progressCircleVariants> {
  value?: number
  max?: number
  showAnimation?: boolean
  radius?: number
  strokeWidth?: number
  children?: React.ReactNode
}

const ProgressCircle = React.forwardRef<SVGSVGElement, ProgressCircleProps>(
  (
    {
      value = 0,
      max = 100,
      radius = 32,
      strokeWidth = 6,
      showAnimation = true,
      variant,
      className,
      children,
      ...props
    }: ProgressCircleProps,
    forwardedRef,
  ) => {
    const safeValue = Math.min(max, Math.max(value, 0))
    const normalizedRadius = radius - strokeWidth / 2
    const circumference = normalizedRadius * 2 * Math.PI
    const offset = circumference - (safeValue / max) * circumference

    const { background, circle } = progressCircleVariants({ variant })
    return (
      <>
        <div className={cx("relative")}>
          <svg
            ref={forwardedRef}
            width={radius * 2}
            height={radius * 2}
            viewBox={`0 0 ${radius * 2} ${radius * 2}`}
            className={cx("-rotate-90 transform", className)}
            role="progress circle"
            aria-label="progress bar"
            aria-valuenow={value}
            aria-valuemin={0}
            aria-valuemax={max}
            data-max={max}
            data-value={safeValue ?? null}
            {...props}
          >
            <circle
              r={normalizedRadius}
              cx={radius}
              cy={radius}
              strokeWidth={strokeWidth}
              fill="transparent"
              stroke=""
              strokeLinecap="round"
              className={cx("transition-colors ease-linear", background())}
            />
            {safeValue >= 0 ? (
              <circle
                r={normalizedRadius}
                cx={radius}
                cy={radius}
                strokeWidth={strokeWidth}
                strokeDasharray={`${circumference} ${circumference}`}
                strokeDashoffset={offset}
                fill="transparent"
                stroke=""
                strokeLinecap="round"
                className={cx(
                  "transition-colors ease-linear",
                  circle(),
                  showAnimation &&
                    "transform-gpu transition-all duration-300 ease-in-out",
                )}
              />
            ) : null}
          </svg>
          <div
            className={cx("absolute inset-0 flex items-center justify-center")}
          >
            {children}
          </div>
        </div>
      </>
    )
  },
)

ProgressCircle.displayName = "ProgressCircle"

export { ProgressCircle, type ProgressCircleProps }
</file>

<file path="src/components/RadioCard.tsx">
// Tremor Raw Radio Card [v0.0.0]

import * as RadioGroupPrimitives from "@radix-ui/react-radio-group"
import * as React from "react"

import { cx, focusInput, focusRing } from "@/lib/utils"

const RadioCardGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitives.Root>
>(({ className, ...props }, forwardedRef) => {
  return (
    <RadioGroupPrimitives.Root
      ref={forwardedRef}
      className={cx("grid gap-2", className)}
      {...props}
    />
  )
})
RadioCardGroup.displayName = "RadioCardGroup"

const RadioCardGroupIndicator = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitives.Indicator>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitives.Indicator>
>(({ className, ...props }, forwardedRef) => {
  return (
    <div
      className={cx(
        // base
        "relative flex size-4 shrink-0 appearance-none items-center justify-center rounded-full border shadow-sm outline-none",
        // border color
        "border-gray-300 dark:border-gray-800",
        // background color
        "bg-white dark:bg-gray-950",
        // checked
        "group-data-[state=checked]:border-0 group-data-[state=checked]:border-transparent group-data-[state=checked]:bg-indigo-600",
        // disabled
        "group-data-[disabled]:border",
        "group-data-[disabled]:border-gray-300 group-data-[disabled]:bg-gray-100 group-data-[disabled]:text-gray-400",
        "group-data-[disabled]:dark:border-gray-700 group-data-[disabled]:dark:bg-gray-800",
        // focus
        focusRing,
        className,
      )}
    >
      <RadioGroupPrimitives.Indicator
        ref={forwardedRef}
        className="flex items-center justify-center"
        {...props}
      >
        <div
          className={cx(
            // base
            "size size-1.5 shrink-0 rounded-full",
            // indicator
            "bg-white",
            // disabled
            "group-data-[disabled]:bg-gray-400 group-data-[disabled]:dark:bg-gray-500",
          )}
        />
      </RadioGroupPrimitives.Indicator>
    </div>
  )
})
RadioCardGroupIndicator.displayName = "RadioCardGroupIndicator"

const RadioCardItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitives.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitives.Item>
>(({ className, children, ...props }, forwardedRef) => {
  return (
    <RadioGroupPrimitives.Item
      ref={forwardedRef}
      className={cx(
        // base
        "group relative w-full rounded-md border p-4 text-left shadow-sm transition-all focus:outline-none",
        // background color
        "bg-white dark:bg-gray-950",
        // border color
        "border-gray-200 dark:border-gray-800",
        "data-[state=checked]:border-indigo-600 data-[state=checked]:dark:border-indigo-600",
        focusInput,
        className,
      )}
      {...props}
    >
      {children}
    </RadioGroupPrimitives.Item>
  )
})
RadioCardItem.displayName = "RadioCardItem"

export { RadioCardGroup, RadioCardGroupIndicator, RadioCardItem }
</file>

<file path="src/components/Searchbar.tsx">
// Tremor Raw Input [v1.0.0]

import { RiSearchLine } from "@remixicon/react"
import * as React from "react"
import { tv, type VariantProps } from "tailwind-variants"

import { cx, focusInput, hasErrorInput } from "@/lib/utils"

const inputStyles = tv({
  base: [
    // base
    "relative block w-full appearance-none rounded-md border px-2.5 py-1.5 outline-none transition sm:text-sm",
    // border color (border only used in dark mode for better aesthetics in filterbar)
    "border-transparent dark:border-gray-800",
    // text color
    "text-gray-900 dark:text-gray-50",
    // placeholder color
    "placeholder-gray-400 dark:placeholder-gray-500",
    // background color
    "bg-gray-100 dark:bg-gray-950",
    // disabled
    "disabled:border-gray-300 disabled:bg-gray-100 disabled:text-gray-400",
    "disabled:dark:border-gray-700 disabled:dark:bg-gray-800 disabled:dark:text-gray-500",
    // focus
    focusInput,
    // invalid (optional)
    // "aria-[invalid=true]:dark:ring-red-400/20 aria-[invalid=true]:ring-2 aria-[invalid=true]:ring-red-200 aria-[invalid=true]:border-red-500 invalid:ring-2 invalid:ring-red-200 invalid:border-red-500"
    // remove search cancel button (optional)
    "[&::--webkit-search-cancel-button]:hidden [&::-webkit-search-cancel-button]:hidden [&::-webkit-search-decoration]:hidden",
  ],
  variants: {
    hasError: {
      true: hasErrorInput,
    },
    // number input
    enableStepper: {
      true: "[appearance:textfield] [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-outer-spin-button]:appearance-none",
    },
  },
})

interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement>,
    VariantProps<typeof inputStyles> {
  inputClassName?: string
}

const Searchbar = React.forwardRef<HTMLInputElement, InputProps>(
  (
    {
      className,
      inputClassName,
      hasError,
      enableStepper,
      type = "search",
      ...props
    }: InputProps,
    forwardedRef,
  ) => {
    return (
      <div className={cx("relative w-full", className)}>
        <input
          ref={forwardedRef}
          type={type}
          className={cx(
            inputStyles({ hasError, enableStepper }),
            "pl-8",
            inputClassName,
          )}
          {...props}
        />
        <div
          className={cx(
            // base
            "pointer-events-none absolute bottom-0 left-2 flex h-full items-center justify-center",
            // text color
            "text-gray-400 dark:text-gray-600",
          )}
        >
          <RiSearchLine
            className="size-[1.125rem] shrink-0"
            aria-hidden="true"
          />
        </div>
      </div>
    )
  },
)

Searchbar.displayName = "Searchbar"

export { Searchbar }
</file>

<file path="src/components/Select.tsx">
// Custom Select [v0.0.0]

import * as SelectPrimitives from "@radix-ui/react-select"
import { RiArrowDownSLine, RiArrowUpSLine, RiCheckLine } from "@remixicon/react"
import { format } from "date-fns"
import React from "react"

import { cx, focusInput, hasErrorInput } from "@/lib/utils"
import { DateRange } from "react-day-picker"

const Select = SelectPrimitives.Root
Select.displayName = "Select"

const SelectGroup = SelectPrimitives.Group
SelectGroup.displayName = "SelectGroup"

const SelectValue = SelectPrimitives.Value
SelectValue.displayName = "SelectValue"

const selectTriggerStyles = [
  cx(
    // base
    "group/trigger flex w-full select-none items-center justify-between gap-2 truncate rounded-md border px-3 py-2 shadow-sm outline-none transition sm:text-sm",
    // border color
    "border-gray-300 dark:border-gray-800",
    // text color
    "text-gray-900 dark:text-gray-50",
    // placeholder
    "data-[placeholder]:text-gray-500 data-[placeholder]:dark:text-gray-500",
    // background color
    "bg-white dark:bg-gray-950",
    // hover
    "hover:bg-gray-50 hover:dark:bg-gray-950/50",
    // disabled
    "data-[disabled]:bg-gray-100 data-[disabled]:text-gray-400",
    "data-[disabled]:dark:border-gray-700 data-[disabled]:dark:bg-gray-800 data-[disabled]:dark:text-gray-500",
    focusInput,
    // invalid (optional)
    // "aria-[invalid=true]:dark:ring-red-400/20 aria-[invalid=true]:ring-2 aria-[invalid=true]:ring-red-200 aria-[invalid=true]:border-red-500 invalid:ring-2 invalid:ring-red-200 invalid:border-red-500"
  ),
]

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitives.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitives.Trigger> & {
    hasError?: boolean
  }
>(({ className, hasError, children, ...props }, forwardedRef) => {
  return (
    <SelectPrimitives.Trigger
      ref={forwardedRef}
      className={cx(
        selectTriggerStyles,
        hasError ? hasErrorInput : "",
        className,
      )}
      {...props}
    >
      <span className="truncate">{children}</span>
      <SelectPrimitives.Icon asChild>
        <RiArrowDownSLine
          className={cx(
            // base
            "-mr-1 size-5 shrink-0",
            // text color
            "text-gray-400 dark:text-gray-600",
            // disabled
            "group-data-[disabled]/trigger:text-gray-300 group-data-[disabled]/trigger:dark:text-gray-600",
          )}
        />
      </SelectPrimitives.Icon>
    </SelectPrimitives.Trigger>
  )
})

SelectTrigger.displayName = "SelectTrigger"

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitives.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitives.ScrollUpButton>
>(({ className, ...props }, forwardedRef) => (
  <SelectPrimitives.ScrollUpButton
    ref={forwardedRef}
    className={cx(
      "flex cursor-default items-center justify-center py-1",
      className,
    )}
    {...props}
  >
    <RiArrowUpSLine className="size-3 shrink-0" aria-hidden="true" />
  </SelectPrimitives.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitives.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitives.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitives.ScrollDownButton>
>(({ className, ...props }, forwardedRef) => (
  <SelectPrimitives.ScrollDownButton
    ref={forwardedRef}
    className={cx(
      "flex cursor-default items-center justify-center py-1",
      className,
    )}
    {...props}
  >
    <RiArrowDownSLine className="size-3 shrink-0" aria-hidden="true" />
  </SelectPrimitives.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitives.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitives.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitives.Content>
>(
  (
    {
      className,
      position = "popper",
      children,
      sideOffset = 8,
      collisionPadding = 10,
      ...props
    },
    forwardedRef,
  ) => (
    <SelectPrimitives.Portal>
      <SelectPrimitives.Content
        ref={forwardedRef}
        className={cx(
          // base
          "relative z-50 overflow-hidden rounded-md border shadow-xl shadow-black/[2.5%]",
          // widths
          "min-w-[calc(var(--radix-select-trigger-width)-2px)] max-w-[95vw]",
          // heights
          "max-h-[--radix-select-content-available-height]",
          // background color
          "bg-white dark:bg-gray-950",
          // text color
          "text-gray-900 dark:text-gray-50",
          // border color
          "border-gray-200 dark:border-gray-800",
          // transition
          "will-change-[transform,opacity]",
          // "data-[state=open]:animate-slideDownAndFade",
          "data-[state=closed]:animate-hide",
          "data-[side=bottom]:animate-slideDownAndFade data-[side=left]:animate-slideLeftAndFade data-[side=right]:animate-slideRightAndFade data-[side=top]:animate-slideUpAndFade",
          className,
        )}
        sideOffset={sideOffset}
        position={position}
        collisionPadding={collisionPadding}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitives.Viewport
          className={cx(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[calc(var(--radix-select-trigger-width))]",
          )}
        >
          {children}
        </SelectPrimitives.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitives.Content>
    </SelectPrimitives.Portal>
  ),
)

SelectContent.displayName = "SelectContent"

const SelectGroupLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitives.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitives.Label>
>(({ className, ...props }, forwardedRef) => (
  <SelectPrimitives.Label
    ref={forwardedRef}
    className={cx(
      // base
      "px-3 py-2 text-xs font-medium tracking-wide",
      // text color
      "text-gray-500 dark:text-gray-500",
      className,
    )}
    {...props}
  />
))

SelectGroupLabel.displayName = "SelectGroupLabel"

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitives.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitives.Item>
>(({ className, children, ...props }, forwardedRef) => {
  return (
    <SelectPrimitives.Item
      ref={forwardedRef}
      className={cx(
        // base
        "grid cursor-pointer grid-cols-[1fr_20px] gap-x-2 rounded px-3 py-2 outline-none transition-colors data-[state=checked]:font-semibold sm:text-sm",
        // text color
        "text-gray-900 dark:text-gray-50",
        // disabled
        "data-[disabled]:pointer-events-none data-[disabled]:text-gray-400 data-[disabled]:hover:bg-none dark:data-[disabled]:text-gray-600",
        // focus
        "focus-visible:bg-gray-100 focus-visible:dark:bg-gray-900",
        // hover
        "hover:bg-gray-100 hover:dark:bg-gray-900",
        className,
      )}
      {...props}
    >
      <SelectPrimitives.ItemText className="flex-1 truncate">
        {children}
      </SelectPrimitives.ItemText>
      <SelectPrimitives.ItemIndicator>
        <RiCheckLine
          className="size-5 shrink-0 text-gray-800 dark:text-gray-200"
          aria-hidden="true"
        />
      </SelectPrimitives.ItemIndicator>
    </SelectPrimitives.Item>
  )
})

SelectItem.displayName = "SelectItem"

const SelectItemPeriod = React.forwardRef<
  React.ElementRef<typeof SelectPrimitives.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitives.Item> & {
    period?: DateRange | undefined
  }
>(({ className, children, period, ...props }, forwardedRef) => {
  return (
    <SelectPrimitives.Item
      ref={forwardedRef}
      className={cx(
        // base
        "relative flex cursor-pointer items-center rounded py-2 pl-8 pr-3 outline-none transition-colors data-[state=checked]:font-semibold sm:text-sm",
        // text color
        "text-gray-900 dark:text-gray-50",
        // disabled
        "data-[disabled]:pointer-events-none data-[disabled]:text-gray-400 data-[disabled]:hover:bg-none dark:data-[disabled]:text-gray-600",
        // focus
        "focus-visible:bg-gray-100 focus-visible:dark:bg-gray-900",
        // hover
        "hover:bg-gray-100 hover:dark:bg-gray-900",
        className,
      )}
      {...props}
    >
      <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
        <SelectPrimitives.ItemIndicator>
          <RiCheckLine
            className="size-5 shrink-0 text-gray-800 dark:text-gray-200"
            aria-hidden="true"
          />
        </SelectPrimitives.ItemIndicator>
      </span>
      <div className="flex w-full items-center">
        {/* adapt width accordingly if you use longer names for periods */}
        <span className="w-40 sm:w-32">
          <SelectPrimitives.ItemText>{children}</SelectPrimitives.ItemText>
        </span>
        <span>
          {period?.from && period?.to && (
            <span className="whitespace-nowrap font-normal text-gray-400">
              {format(period.from, "MMM d, yyyy")} –{" "}
              {format(period.to, "MMM d, yyyy")}
            </span>
          )}
        </span>
      </div>
    </SelectPrimitives.Item>
  )
})

SelectItemPeriod.displayName = "SelectItemPeriod"

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitives.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitives.Separator>
>(({ className, ...props }, forwardedRef) => (
  <SelectPrimitives.Separator
    ref={forwardedRef}
    className={cx(
      // base
      "-mx-1 my-1 h-px",
      // background color
      "bg-gray-300 dark:bg-gray-700",
      className,
    )}
    {...props}
  />
))

SelectSeparator.displayName = "SelectSeparator"

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectGroupLabel,
  SelectItem,
  SelectItemPeriod,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}
</file>

<file path="src/components/Switch.tsx">
// Tremor Raw Switch [v0.0.0]

import * as SwitchPrimitives from "@radix-ui/react-switch"
import React from "react"
import { tv, VariantProps } from "tailwind-variants"

import { cx, focusRing } from "@/lib/utils"

const switchVariants = tv({
  slots: {
    root: [
      // base
      "group relative isolate inline-flex shrink-0 cursor-pointer items-center rounded-full p-0.5 shadow-inner outline-none ring-1 ring-inset transition-all",
      "bg-gray-200 dark:bg-gray-950",
      // ring color
      "ring-black/5 dark:ring-gray-800",
      // checked
      "data-[state=checked]:bg-indigo-600 data-[state=checked]:dark:bg-indigo-600",
      // disabled
      "data-[disabled]:cursor-default",
      // disabled checked
      "data-[disabled]:data-[state=checked]:bg-indigo-200",
      "data-[disabled]:data-[state=checked]:ring-gray-300",
      // disabled checked dark
      "data-[disabled]:data-[state=checked]:dark:ring-gray-900",
      "data-[disabled]:data-[state=checked]:dark:bg-indigo-900",
      // disabled unchecked
      "data-[disabled]:data-[state=unchecked]:ring-gray-300",
      "data-[disabled]:data-[state=unchecked]:bg-gray-100",
      // disabled unchecked dark
      "data-[disabled]:data-[state=unchecked]:dark:ring-gray-700",
      "data-[disabled]:data-[state=unchecked]:dark:bg-gray-800",
      focusRing,
    ],
    thumb: [
      // base
      "pointer-events-none relative inline-block transform appearance-none rounded-full border-none shadow-lg outline-none transition-all duration-150 ease-in-out focus:border-none focus:outline-none focus:outline-transparent",
      // background color
      "bg-white dark:bg-gray-50",
      // disabled
      "group-data-[disabled]:shadow-none",
      "group-data-[disabled]:bg-gray-50 group-data-[disabled]:dark:bg-gray-500",
    ],
  },
  variants: {
    size: {
      default: {
        root: "h-5 w-9",
        thumb:
          "h-4 w-4 data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0",
      },
      small: {
        root: "h-4 w-7",
        thumb:
          "h-3 w-3 data-[state=checked]:translate-x-3 data-[state=unchecked]:translate-x-0",
      },
    },
  },
  defaultVariants: {
    size: "default",
  },
})

interface SwitchProps
  extends Omit<
      React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>,
      "asChild"
    >,
    VariantProps<typeof switchVariants> {}

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  SwitchProps
>(({ className, size, ...props }: SwitchProps, forwardedRef) => {
  const { root, thumb } = switchVariants({ size })
  return (
    <SwitchPrimitives.Root
      ref={forwardedRef}
      className={cx(root(), className)}
      {...props}
    >
      <SwitchPrimitives.Thumb className={cx(thumb())} />
    </SwitchPrimitives.Root>
  )
})

Switch.displayName = "Switch"

export { Switch }
</file>

<file path="src/components/Table.tsx">
// Tremor Raw Table [v0.0.2]

import React from "react"

import { cx } from "@/lib/utils"

const TableRoot = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, children, ...props }, forwardedRef) => (
  <div
    ref={forwardedRef}
    // Activate if table is used in a float environment
    // className="flow-root"
  >
    <div
      // make table scrollable on mobile
      className={cx("w-full overflow-auto whitespace-nowrap", className)}
      {...props}
    >
      {children}
    </div>
  </div>
))

TableRoot.displayName = "TableRoot"

const Table = React.forwardRef<
  HTMLTableElement,
  React.TableHTMLAttributes<HTMLTableElement>
>(({ className, ...props }, forwardedRef) => (
  <table
    ref={forwardedRef}
    className={cx(
      // base
      "w-full caption-bottom border-b",
      // border color
      "border-gray-200 dark:border-gray-800",
      className,
    )}
    {...props}
  />
))

Table.displayName = "Table"

const TableHead = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, forwardedRef) => (
  <thead ref={forwardedRef} className={cx(className)} {...props} />
))

TableHead.displayName = "TableHead"

const TableHeaderCell = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, forwardedRef) => (
  <th
    ref={forwardedRef}
    className={cx(
      // base
      "border-b px-4 py-3.5 text-left text-sm font-semibold",
      // text color
      "text-gray-900 dark:text-gray-50",
      // border color
      "border-gray-200 dark:border-gray-800",
      className,
    )}
    {...props}
  />
))

TableHeaderCell.displayName = "TableHeaderCell"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, forwardedRef) => (
  <tbody
    ref={forwardedRef}
    className={cx(
      // base
      "divide-y",
      // divide color
      "divide-gray-200 dark:divide-gray-800",
      className,
    )}
    {...props}
  />
))

TableBody.displayName = "TableBody"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, forwardedRef) => (
  <tr
    ref={forwardedRef}
    className={cx(
      "[&_td:last-child]:pr-4 [&_th:last-child]:pr-4",
      "[&_td:first-child]:pl-4 [&_th:first-child]:pl-4",
      className,
    )}
    {...props}
  />
))

TableRow.displayName = "TableRow"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, forwardedRef) => (
  <td
    ref={forwardedRef}
    className={cx(
      // base
      "p-4 text-sm",
      // text color
      "text-gray-600 dark:text-gray-400",
      className,
    )}
    {...props}
  />
))

TableCell.displayName = "TableCell"

const TableFoot = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, forwardedRef) => {
  return (
    <tfoot
      ref={forwardedRef}
      className={cx(
        // base
        "border-t text-left font-medium",
        // text color
        "text-gray-900 dark:text-gray-50",
        // border color
        "border-gray-200 dark:border-gray-800",
        className,
      )}
      {...props}
    />
  )
})

TableFoot.displayName = "TableFoot"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, forwardedRef) => (
  <caption
    ref={forwardedRef}
    className={cx(
      // base
      "mt-3 px-3 text-center text-sm",
      // text color
      "text-gray-500 dark:text-gray-500",
      className,
    )}
    {...props}
  />
))

TableCaption.displayName = "TableCaption"

export {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableFoot,
  TableHead,
  TableHeaderCell,
  TableRoot,
  TableRow,
}
</file>

<file path="src/components/TabNavigation.tsx">
// Tremor Raw TabNavigation [v0.0.1]

import * as NavigationMenuPrimitives from "@radix-ui/react-navigation-menu"
import React from "react"

import { cx, focusRing } from "@/lib/utils"

function getSubtree(
  options: { asChild: boolean | undefined; children: React.ReactNode },
  content: React.ReactNode | ((children: React.ReactNode) => React.ReactNode),
) {
  const { asChild, children } = options
  if (!asChild)
    return typeof content === "function" ? content(children) : content

  const firstChild = React.Children.only(children) as React.ReactElement
  return React.cloneElement(firstChild, {
    children:
      typeof content === "function"
        ? content(firstChild.props.children)
        : content,
  })
}

const TabNavigation = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitives.Root>,
  Omit<
    React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitives.Root>,
    "orientation" | "defaultValue" | "dir"
  >
>(({ className, children, ...props }, forwardedRef) => (
  <NavigationMenuPrimitives.Root ref={forwardedRef} {...props} asChild={false}>
    <NavigationMenuPrimitives.List
      className={cx(
        // base
        "flex items-center justify-start whitespace-nowrap border-b [scrollbar-width:none] [&::-webkit-scrollbar]:hidden",
        // border color
        "border-gray-200 dark:border-gray-800",
        className,
      )}
    >
      {children}
    </NavigationMenuPrimitives.List>
  </NavigationMenuPrimitives.Root>
))

TabNavigation.displayName = "TabNavigation"

const TabNavigationLink = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitives.Link>,
  Omit<
    React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitives.Link>,
    "onSelect"
  > & { disabled?: boolean }
>(({ asChild, disabled, className, children, ...props }, forwardedRef) => (
  <NavigationMenuPrimitives.Item className="flex" aria-disabled={disabled}>
    <NavigationMenuPrimitives.Link
      aria-disabled={disabled}
      className={cx(
        "group relative flex shrink-0 select-none items-center justify-center",
        disabled ? "pointer-events-none" : "",
      )}
      ref={forwardedRef}
      onSelect={() => {}}
      asChild={asChild}
      {...props}
    >
      {getSubtree({ asChild, children }, (children) => (
        <span
          className={cx(
            // base
            "-mb-px flex items-center justify-center whitespace-nowrap border-b-2 border-transparent px-3 pb-2 text-sm font-medium transition-all",
            // text color
            "text-gray-500 dark:text-gray-500",
            // hover
            "group-hover:text-gray-700 group-hover:dark:text-gray-400",
            // border hover
            "group-hover:border-gray-300 group-hover:dark:border-gray-400",
            // selected
            "group-data-[active]:border-indigo-600 group-data-[active]:text-indigo-600",
            "group-data-[active]:dark:border-indigo-500 group-data-[active]:dark:text-indigo-500",
            // disabled
            disabled
              ? "pointer-events-none text-gray-300 dark:text-gray-700"
              : "",
            focusRing,
            className,
          )}
        >
          {children}
        </span>
      ))}
    </NavigationMenuPrimitives.Link>
  </NavigationMenuPrimitives.Item>
))

TabNavigationLink.displayName = "TabNavigationLink"

export { TabNavigation, TabNavigationLink }
</file>

<file path="src/components/Tooltip.tsx">
// Tremor Raw Tooltip [v0.0.1]

"use client"

import * as TooltipPrimitives from "@radix-ui/react-tooltip"
import React from "react"

import { cx } from "@/lib/utils"

interface TooltipProps
  extends Omit<TooltipPrimitives.TooltipContentProps, "content" | "onClick">,
    Pick<
      TooltipPrimitives.TooltipProps,
      "open" | "defaultOpen" | "onOpenChange" | "delayDuration"
    > {
  content: React.ReactNode
  onClick?: React.MouseEventHandler<HTMLButtonElement>
  side?: "bottom" | "left" | "top" | "right"
  showArrow?: boolean
  triggerAsChild?: boolean
}

const Tooltip = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitives.Content>,
  TooltipProps
>(
  (
    {
      children,
      className,
      content,
      delayDuration,
      defaultOpen,
      open,
      onClick,
      onOpenChange,
      showArrow = true,
      side,
      sideOffset = 10,
      triggerAsChild = false,
      ...props
    }: TooltipProps,
    forwardedRef,
  ) => {
    return (
      <TooltipPrimitives.Provider delayDuration={150}>
        <TooltipPrimitives.Root
          open={open}
          defaultOpen={defaultOpen}
          onOpenChange={onOpenChange}
          delayDuration={delayDuration}
        >
          <TooltipPrimitives.Trigger onClick={onClick} asChild={triggerAsChild}>
            {children}
          </TooltipPrimitives.Trigger>
          <TooltipPrimitives.Portal>
            <TooltipPrimitives.Content
              ref={forwardedRef}
              side={side}
              sideOffset={sideOffset}
              align="center"
              className={cx(
                // base
                "max-w-60 select-none rounded-md px-2.5 py-1.5 text-sm leading-5 shadow-md",
                // text color
                "text-gray-50 dark:text-gray-900",
                // background color
                "bg-gray-900 dark:bg-gray-50",
                // transition
                "will-change-[transform,opacity]",
                "data-[side=bottom]:animate-slideDownAndFade data-[side=left]:animate-slideLeftAndFade data-[side=right]:animate-slideRightAndFade data-[side=top]:animate-slideUpAndFade data-[state=closed]:animate-hide",
                className,
              )}
              {...props}
            >
              {content}
              {showArrow ? (
                <TooltipPrimitives.Arrow
                  className="border-none fill-gray-900 dark:fill-gray-50"
                  width={12}
                  height={7}
                  aria-hidden="true"
                />
              ) : null}
            </TooltipPrimitives.Content>
          </TooltipPrimitives.Portal>
        </TooltipPrimitives.Root>
      </TooltipPrimitives.Provider>
    )
  },
)

Tooltip.displayName = "Tooltip"

export { Tooltip, type TooltipProps }
</file>

<file path="src/data/air-quality-data.ts">
import { addHours, format, subDays } from "date-fns"
import { AirQualityData } from "./schema"

// Generate sample air quality data for the last 30 days
export const airQualityData: AirQualityData[] = Array.from({ length: 30 }).map((_, index) => {
    const date = subDays(new Date(), 30 - index)

    // Base values
    const baseCO2 = 450
    const baseTemp = 21
    const baseHumidity = 40
    const basePM2_5 = 8
    const basePM10 = 15
    const baseVOC = 120
    const basePressure = 1013

    // Add some random variation to simulate real data
    // Time of day variation (higher CO2 during day, lower at night)
    const hourOfDay = date.getHours()
    const isDaytime = hourOfDay >= 8 && hourOfDay <= 20
    const dayFactor = isDaytime ? 1.2 : 0.8

    // Weekly variation (higher on weekdays, lower on weekends)
    const dayOfWeek = date.getDay()
    const isWeekday = dayOfWeek >= 1 && dayOfWeek <= 5
    const weekdayFactor = isWeekday ? 1.1 : 0.9

    // Random variation
    const randomFactor = () => 0.8 + Math.random() * 0.4 // 0.8-1.2 variation

    return {
        date: format(date, "yyyy-MM-dd"),
        CO2: Math.round(baseCO2 * dayFactor * weekdayFactor * randomFactor()),
        Temperature: +(baseTemp * randomFactor()).toFixed(1),
        Humidity: Math.round(baseHumidity * randomFactor()),
        PM2_5: +(basePM2_5 * randomFactor()).toFixed(1),
        PM10: +(basePM10 * randomFactor()).toFixed(1),
        VOC: Math.round(baseVOC * randomFactor()),
        Pressure: Math.round(basePressure * randomFactor()),
    }
})

// Generate hourly data for the heatmap (24 hours x 7 days)
export const hourlyData = Array.from({ length: 7 }).map((_, dayIndex) => {
    const day = subDays(new Date(), 6 - dayIndex)

    return Array.from({ length: 24 }).map((_, hourIndex) => {
        const datetime = addHours(day, hourIndex)
        const hourFactor = hourIndex >= 8 && hourIndex <= 18 ? 1.3 : 0.8 // Higher during working hours
        const randomValue = Math.random() * 0.4 // Random variation

        let co2Value = 450 // Base CO2 value

        // Add peaks during specific times (e.g., lunch, dinner)
        if (hourIndex === 12 || hourIndex === 18) {
            co2Value += 200
        }

        // Apply factors
        co2Value = Math.round(co2Value * hourFactor * (0.8 + randomValue))

        return {
            day: format(day, "EEE"),
            hour: hourIndex,
            value: co2Value,
            datetime,
        }
    })
})

// Generate today's hourly data for real-time charts
export const todaysHourlyData = Array.from({ length: 24 }).map((_, hourIndex) => {
    const now = new Date()
    const hour = now.getHours()
    const isPast = hourIndex <= hour

    let datetime
    if (isPast) {
        datetime = addHours(now, hourIndex - hour)
    } else {
        // Future hours are from yesterday
        datetime = addHours(subDays(now, 1), 24 + hourIndex - hour)
    }

    // Working hours have higher values
    const isWorkHour = hourIndex >= 8 && hourIndex <= 18
    const hourFactor = isWorkHour ? 1.3 : 0.8

    // Lunch and dinner spikes
    const isMealTime = hourIndex === 12 || hourIndex === 18
    const mealFactor = isMealTime ? 1.4 : 1

    // Random variation
    const randomFactor = 0.9 + Math.random() * 0.2

    const baseValue = isPast ? (400 + hourIndex * 2) : null // Only show values for past hours

    return {
        hour: format(datetime, "HH:mm"),
        CO2: baseValue ? Math.round(baseValue * hourFactor * mealFactor * randomFactor) : null,
        Temperature: baseValue ? +(21 + (hourIndex / 10) * randomFactor).toFixed(1) : null,
        Humidity: baseValue ? Math.round(40 * randomFactor) : null,
    }
})
</file>

<file path="src/data/data.ts">
import { Usage } from "./schema"

export const roles: { value: string; label: string }[] = [
  {
    value: "admin",
    label: "Admin",
  },
  {
    value: "member",
    label: "Member",
  },
  {
    value: "viewer",
    label: "Viewer",
  },
  {
    value: "contributor",
    label: "Contributor",
  },
]

export const statuses: { value: string; label: string; variant: string }[] = [
  {
    value: "live",
    label: "Live",
    variant: "success",
  },
  {
    value: "inactive",
    label: "Inactive",
    variant: "neutral",
  },
  {
    value: "archived",
    label: "Archived",
    variant: "warning",
  },
]

export const regions: { value: string; label: string }[] = [
  {
    value: "US-West 1",
    label: "US-West 1",
  },
  {
    value: "US-West 2",
    label: "US-West 2",
  },
  {
    value: "US-East 1",
    label: "US-East 1",
  },
  {
    value: "US-East 2",
    label: "US-East 2",
  },
  {
    value: "EU-West 1",
    label: "EU-West 1",
  },
  {
    value: "EU-North 1",
    label: "EU-North 1",
  },
  {
    value: "EU-Central 1",
    label: "EU-Central 1",
  },
]

export const conditions: { value: string; label: string }[] = [
  {
    value: "is-equal-to",
    label: "is equal to",
  },
  {
    value: "is-between",
    label: "is between",
  },
  {
    value: "is-greater-than",
    label: "is greater than",
  },
  {
    value: "is-less-than",
    label: "is less than",
  },
]

export const users: {
  name: string
  initials: string
  email: string
  role: string
}[] = [
  {
    name: "Emma Stone",
    initials: "ES",
    email: "a.stone@gmail.com",
    role: "viewer",
  },
  {
    name: "Alissia McCalister",
    initials: "AM",
    email: "a.stone@gmail.com",
    role: "viewer",
  },
  {
    name: "Emily Luisa Bernacle",
    initials: "EB",
    email: "e.luis.bernacle@gmail.com",
    role: "member",
  },
  {
    name: "Aaron Wave",
    initials: "AW",
    email: "a.flow@acme.com",
    role: "contributor",
  },
  {
    name: "Thomas Palstein",
    initials: "TP",
    email: "t.palstein@acme.com",
    role: "viewer",
  },
  {
    name: "Sarah Johnson",
    initials: "SJ",
    email: "s.johnson@gmail.com",
    role: "admin",
  },
  {
    name: "Megan Katherina Brown",
    initials: "MB",
    email: "m.lovelybrown@gmail.com",
    role: "contributor",
  },
]

export const invitedUsers: {
  initials: string
  email: string
  role: string
  expires: number
}[] = [
  {
    initials: "LP",
    email: "lydia.posh@gmail.com",
    role: "viewer",
    expires: 12,
  },
  {
    initials: "AW",
    email: "awidburg@bluewin.ch",
    role: "viewer",
    expires: 8,
  },
]

export const usage: Usage[] = [
  {
    owner: "John Doe",
    status: "live",
    costs: 5422.35,
    region: "US-West 1",
    stability: 99,
    lastEdited: "23/09/2023 13:00",
  },
  {
    owner: "Jane Smith",
    status: "live",
    costs: 6087.11,
    region: "US-East 2",
    stability: 91,
    lastEdited: "22/09/2023 10:45",
  },
  {
    owner: "Alejandro Garcia",
    status: "live",
    costs: 7234.56,
    region: "EU-West 1",
    stability: 12,
    lastEdited: "17/05/2021 08:32",
  },
  {
    owner: "Wei Zhang",
    status: "inactive",
    costs: 0,
    region: "US-West 2",
    stability: 0,
    lastEdited: "10/11/2022 15:24",
  },
  {
    owner: "Maria Rossi",
    status: "live",
    costs: 8190.77,
    region: "US-East 1",
    stability: 8,
    lastEdited: "05/06/2023 12:16",
  },
  {
    owner: "Nina Müller",
    status: "archived",
    costs: 7609.32,
    region: "EU-North 1",
    stability: 20,
    lastEdited: "23/01/2022 11:11",
  },
  {
    owner: "Liam O'Sullivan",
    status: "live",
    costs: 5204.98,
    region: "US-West 1",
    stability: 18,
    lastEdited: "14/03/2023 14:45",
  },
  {
    owner: "Amir Fleischlin",
    status: "inactive",
    costs: 0,
    region: "EU-Central 1",
    stability: 0,
    lastEdited: "12/02/2023 09:12",
  },
  {
    owner: "Yuki Tanaka",
    status: "live",
    costs: 9874.56,
    region: "US-East 1",
    stability: 6,
    lastEdited: "19/08/2022 16:03",
  },
  {
    owner: "Fatima Al-Farsi",
    status: "live",
    costs: 5486.99,
    region: "EU-West 1",
    stability: 12,
    lastEdited: "29/11/2021 17:25",
  },
  {
    owner: "Olga Ivanova",
    status: "live",
    costs: 6120.45,
    region: "US-West 2",
    stability: 9,
    lastEdited: "07/12/2023 07:14",
  },
  {
    owner: "Pierre Dubois",
    status: "live",
    costs: 4834.11,
    region: "EU-Central 1",
    stability: 15,
    lastEdited: "28/04/2023 10:45",
  },
  {
    owner: "Sara Johansson",
    status: "live",
    costs: 5302.22,
    region: "US-East 2",
    stability: 97,
    lastEdited: "03/10/2022 08:33",
  },
  {
    owner: "Ahmed Hassan",
    status: "live",
    costs: 6221.54,
    region: "US-West 1",
    stability: 11,
    lastEdited: "22/07/2022 14:16",
  },
  {
    owner: "Emily Brown",
    status: "archived",
    costs: 6129.99,
    region: "EU-North 1",
    stability: 22,
    lastEdited: "18/01/2022 12:45",
  },
  {
    owner: "Carlos Sanchez",
    status: "live",
    costs: 4850.33,
    region: "US-East 1",
    stability: 13,
    lastEdited: "05/06/2021 18:33",
  },
  {
    owner: "Hannah Kim",
    status: "live",
    costs: 7902.11,
    region: "EU-West 1",
    stability: 91,
    lastEdited: "11/05/2023 11:00",
  },
  {
    owner: "David Johnson",
    status: "live",
    costs: 6789.77,
    region: "US-West 2",
    stability: 10,
    lastEdited: "19/09/2023 17:17",
  },
  {
    owner: "Linda Anderson",
    status: "live",
    costs: 7434.22,
    region: "US-East 2",
    stability: 9,
    lastEdited: "27/03/2023 14:28",
  },
  {
    owner: "Michael Lee",
    status: "archived",
    costs: 7290.01,
    region: "EU-Central 1",
    stability: 12,
    lastEdited: "23/11/2022 15:13",
  },
  {
    owner: "Sophia Lopez",
    status: "live",
    costs: 8921.34,
    region: "EU-North 1",
    stability: 16,
    lastEdited: "08/05/2023 08:56",
  },
  {
    owner: "Robert White",
    status: "live",
    costs: 6834.23,
    region: "US-West 1",
    stability: 8,
    lastEdited: "29/04/2022 19:27",
  },
  {
    owner: "Mia Wang",
    status: "inactive",
    costs: 0,
    region: "US-West 2",
    stability: 14,
    lastEdited: "30/12/2023 13:01",
  },
  {
    owner: "James Taylor",
    status: "live",
    costs: 4321.56,
    region: "EU-West 1",
    stability: 5,
    lastEdited: "18/06/2021 10:49",
  },
  {
    owner: "Victoria Martinez",
    status: "archived",
    costs: 5120.33,
    region: "US-East 1",
    stability: 19,
    lastEdited: "24/02/2022 14:02",
  },
  {
    owner: "William Harris",
    status: "live",
    costs: 9211.42,
    region: "EU-North 1",
    stability: 11,
    lastEdited: "22/07/2021 12:33",
  },
  {
    owner: "Isabella Clark",
    status: "inactive",
    costs: 0,
    region: "US-East 2",
    stability: 6,
    lastEdited: "13/09/2022 16:22",
  },
  {
    owner: "Alexander Young",
    status: "live",
    costs: 4534.88,
    region: "US-West 1",
    stability: 17,
    lastEdited: "09/10/2023 17:44",
  },
  {
    owner: "Grace Patel",
    status: "live",
    costs: 8245.99,
    region: "EU-Central 1",
    stability: 9,
    lastEdited: "29/07/2022 11:56",
  },
  {
    owner: "Daniel Wilson",
    status: "archived",
    costs: 7890.77,
    region: "EU-West 1",
    stability: 14,
    lastEdited: "10/11/2021 15:08",
  },
  {
    owner: "Charlotte Thompson",
    status: "live",
    costs: 8911.44,
    region: "US-East 1",
    stability: 10,
    lastEdited: "06/08/2021 09:17",
  },
  {
    owner: "Olivia Anderson",
    status: "inactive",
    costs: 0,
    region: "EU-West 1",
    stability: 12,
    lastEdited: "25/05/2022 10:05",
  },
  {
    owner: "Henry Brown",
    status: "live",
    costs: 5500.12,
    region: "US-West 2",
    stability: 15,
    lastEdited: "07/01/2023 08:33",
  },
  {
    owner: "Ethan Davis",
    status: "live",
    costs: 7200.98,
    region: "EU-Central 1",
    stability: 8,
    lastEdited: "21/09/2023 13:00",
  },
  {
    owner: "Amelia Wilson",
    status: "live",
    costs: 8321.56,
    region: "US-East 2",
    stability: 18,
    lastEdited: "12/06/2021 11:45",
  },
  {
    owner: "Lucas Martin",
    status: "live",
    costs: 4534.99,
    region: "US-West 1",
    stability: 11,
    lastEdited: "30/03/2022 14:14",
  },
  {
    owner: "Mason Clark",
    status: "live",
    costs: 6890.11,
    region: "EU-North 1",
    stability: 7,
    lastEdited: "14/05/2023 12:36",
  },
  {
    owner: "Emma Robinson",
    status: "live",
    costs: 7990.01,
    region: "US-East 1",
    stability: 13,
    lastEdited: "18/10/2022 09:25",
  },
  {
    owner: "Benjamin Lewis",
    status: "archived",
    costs: 5412.23,
    region: "EU-Central 1",
    stability: 20,
    lastEdited: "22/02/2022 15:55",
  },
  {
    owner: "Ava Walker",
    status: "live",
    costs: 7123.98,
    region: "US-West 2",
    stability: 9,
    lastEdited: "27/08/2023 18:33",
  },
  {
    owner: "Elijah Young",
    status: "live",
    costs: 6445.33,
    region: "EU-West 1",
    stability: 8,
    lastEdited: "02/07/2021 17:14",
  },
  {
    owner: "Sophia Hall",
    status: "inactive",
    costs: 0,
    region: "US-East 1",
    stability: 10,
    lastEdited: "15/04/2023 10:45",
  },
  {
    owner: "Matthew Harris",
    status: "live",
    costs: 7634.67,
    region: "EU-North 1",
    stability: 11,
    lastEdited: "06/09/2023 11:23",
  },
  {
    owner: "Aiden Thompson",
    status: "archived",
    costs: 4900.88,
    region: "US-West 1",
    stability: 14,
    lastEdited: "20/10/2021 16:05",
  },
  {
    owner: "Chloe Martinez",
    status: "live",
    costs: 5234.44,
    region: "US-East 2",
    stability: 17,
    lastEdited: "11/11/2023 08:55",
  },
  {
    owner: "Oliver Davis",
    status: "inactive",
    costs: 0,
    region: "EU-West 1",
    stability: 12,
    lastEdited: "18/08/2022 14:34",
  },
  {
    owner: "Emily Clark",
    status: "live",
    costs: 7688.55,
    region: "EU-Central 1",
    stability: 9,
    lastEdited: "22/04/2023 12:11",
  },
  {
    owner: "Jack Lewis",
    status: "archived",
    costs: 6344.89,
    region: "US-West 2",
    stability: 19,
    lastEdited: "10/02/2021 11:45",
  },
  {
    owner: "Lily Walker",
    status: "live",
    costs: 5003.78,
    region: "EU-West 1",
    stability: 8,
    lastEdited: "23/07/2022 14:33",
  },
  {
    owner: "Jackson Martinez",
    status: "inactive",
    costs: 0,
    region: "US-East 1",
    stability: 7,
    lastEdited: "07/05/2023 09:27",
  },
  {
    owner: "Avery Hall",
    status: "live",
    costs: 8432.45,
    region: "EU-Central 1",
    stability: 11,
    lastEdited: "16/03/2022 15:44",
  },
  {
    owner: "Logan Harris",
    status: "archived",
    costs: 7120.39,
    region: "EU-North 1",
    stability: 21,
    lastEdited: "01/01/2022 16:18",
  },
]
</file>

<file path="src/data/generateData.js">
const fs = require("fs")
const path = require("path")

function generateRandomData(
  previousValue,
  min,
  max,
  variance,
  isWeekend,
  weekendReduction,
  momentum,
) {
  let drift = (Math.random() - 0.5) * 2 * variance
  drift += momentum // Apply momentum

  let randomValue = previousValue * (1 + drift)

  // Ensure the value stays within the specified min and max bounds with stronger correction
  if (randomValue < min) {
    randomValue = min + (min - randomValue) * 0.2 // Apply stronger correction if below min
  } else if (randomValue > max) {
    randomValue = max - (randomValue - max) * 0.2 // Apply stronger correction if above max
  }

  if (isWeekend && weekendReduction) {
    const reductionFactor = 1 - (Math.random() * 0.15 + 0.1) // Reduce by 10-25%
    randomValue *= reductionFactor
  }

  // Calculate new momentum based on the current drift
  momentum = drift * 0.5 // Adjust momentum scaling factor as needed

  return {
    value: Math.round(randomValue),
    momentum,
  }
}

function generateData(startDate, endDate, categories) {
  const overviews = []
  let currentDate = new Date(startDate)
  const endDateObj = new Date(endDate)

  // Initialize previous values with average values for each category
  const previousValues = {}
  const momenta = {} // Track momentum for each category
  categories.forEach((category) => {
    previousValues[category.name] = (category.min + category.max) / 2 // Initialize with mid-point value
    momenta[category.name] = 0 // Initialize momentum
  })

  while (currentDate <= endDateObj) {
    const isWeekend = currentDate.getDay() === 0 || currentDate.getDay() === 6 // 0 = Sunday, 6 = Saturday
    const dataEntry = {
      date: currentDate.toISOString().split("T")[0] + "T00:00:00",
    }

    categories.forEach((category) => {
      const result = generateRandomData(
        previousValues[category.name],
        category.min,
        category.max,
        category.variance,
        isWeekend,
        category.weekendReduction,
        momenta[category.name],
      )
      dataEntry[category.name] = result.value
      previousValues[category.name] = result.value
      momenta[category.name] = result.momentum
    })

    overviews.push(dataEntry)
    currentDate.setDate(currentDate.getDate() + 1)
  }

  return overviews
}

const categories = [
  {
    name: "Rows written",
    min: 2500,
    max: 3700,
    variance: 0.01,
    weekendReduction: false,
  },
  {
    name: "Rows read",
    min: 18000,
    max: 28000,
    variance: 0.03,
    weekendReduction: false,
  },
  {
    name: "Queries",
    min: 478,
    max: 612,
    variance: 0.01,
    weekendReduction: true,
  },
  {
    name: "Payments completed",
    min: 80,
    max: 125,
    variance: 0.5,
    weekendReduction: true,
  },
  {
    name: "Sign ups",
    min: 60,
    max: 80,
    variance: 0.5,
    weekendReduction: true,
  },
  {
    name: "Logins",
    min: 844,
    max: 2048,
    variance: 0.2,
    weekendReduction: false,
  },
  {
    name: "Sign outs",
    min: 900,
    max: 1200,
    variance: 0.1,
    weekendReduction: false,
  },
  {
    name: "Support calls",
    min: 2,
    max: 19,
    variance: 0.5,
    weekendReduction: true,
  },
]

const startDate = "2023-01-01"
const endDate = "2024-05-17"

const overviews = generateData(startDate, endDate, categories)

const dataString = `import { OverviewData } from "./schema";

export const overviews: OverviewData[] = ${JSON.stringify(overviews, null, 2)};
`

const outputPath = path.join(__dirname, "overview-data.ts")

fs.writeFile(outputPath, dataString, (err) => {
  if (err) throw err
  console.log(`Data has been written to ${outputPath}`)
})
</file>

<file path="src/data/overview-data.ts">
import { OverviewData } from "./schema"

export const overviews: OverviewData[] = [
  {
    date: "2023-01-01T00:00:00",
    "Rows written": 3093,
    "Rows read": 22633,
    Queries: 448,
    "Payments completed": 71,
    "Sign ups": 60,
    Logins: 1664,
    "Sign outs": 1133,
    "Support calls": 5,
  },
  {
    date: "2023-01-02T00:00:00",
    "Rows written": 3061,
    "Rows read": 22587,
    Queries: 484,
    "Payments completed": 88,
    "Sign ups": 79,
    Logins: 1642,
    "Sign outs": 1104,
    "Support calls": 5,
  },
  {
    date: "2023-01-03T00:00:00",
    "Rows written": 3062,
    "Rows read": 22079,
    Queries: 487,
    "Payments completed": 100,
    "Sign ups": 75,
    Logins: 1525,
    "Sign outs": 1083,
    "Support calls": 6,
  },
  {
    date: "2023-01-04T00:00:00",
    "Rows written": 3076,
    "Rows read": 21412,
    Queries: 487,
    "Payments completed": 122,
    "Sign ups": 61,
    Logins: 1211,
    "Sign outs": 1017,
    "Support calls": 7,
  },
  {
    date: "2023-01-05T00:00:00",
    "Rows written": 3066,
    "Rows read": 20679,
    Queries: 484,
    "Payments completed": 107,
    "Sign ups": 64,
    Logins: 991,
    "Sign outs": 1070,
    "Support calls": 5,
  },
  {
    date: "2023-01-06T00:00:00",
    "Rows written": 3043,
    "Rows read": 20048,
    Queries: 479,
    "Payments completed": 124,
    "Sign ups": 64,
    Logins: 855,
    "Sign outs": 1115,
    "Support calls": 3,
  },
  {
    date: "2023-01-07T00:00:00",
    "Rows written": 3026,
    "Rows read": 19335,
    Queries: 369,
    "Payments completed": 105,
    "Sign ups": 55,
    Logins: 875,
    "Sign outs": 1184,
    "Support calls": 3,
  },
  {
    date: "2023-01-08T00:00:00",
    "Rows written": 3031,
    "Rows read": 19548,
    Queries: 420,
    "Payments completed": 68,
    "Sign ups": 47,
    Logins: 867,
    "Sign outs": 1191,
    "Support calls": 3,
  },
  {
    date: "2023-01-09T00:00:00",
    "Rows written": 3030,
    "Rows read": 19431,
    Queries: 489,
    "Payments completed": 87,
    "Sign ups": 66,
    Logins: 853,
    "Sign outs": 1156,
    "Support calls": 3,
  },
  {
    date: "2023-01-10T00:00:00",
    "Rows written": 3024,
    "Rows read": 18802,
    Queries: 493,
    "Payments completed": 90,
    "Sign ups": 76,
    Logins: 976,
    "Sign outs": 1169,
    "Support calls": 2,
  },
  {
    date: "2023-01-11T00:00:00",
    "Rows written": 3028,
    "Rows read": 18816,
    Queries: 499,
    "Payments completed": 89,
    "Sign ups": 72,
    Logins: 1191,
    "Sign outs": 1170,
    "Support calls": 2,
  },
  {
    date: "2023-01-12T00:00:00",
    "Rows written": 3049,
    "Rows read": 19225,
    Queries: 500,
    "Payments completed": 91,
    "Sign ups": 76,
    Logins: 1235,
    "Sign outs": 1129,
    "Support calls": 3,
  },
  {
    date: "2023-01-13T00:00:00",
    "Rows written": 3066,
    "Rows read": 19467,
    Queries: 505,
    "Payments completed": 123,
    "Sign ups": 64,
    Logins: 1060,
    "Sign outs": 1196,
    "Support calls": 5,
  },
  {
    date: "2023-01-14T00:00:00",
    "Rows written": 3049,
    "Rows read": 19950,
    Queries: 418,
    "Payments completed": 87,
    "Sign ups": 61,
    Logins: 915,
    "Sign outs": 1174,
    "Support calls": 6,
  },
  {
    date: "2023-01-15T00:00:00",
    "Rows written": 3018,
    "Rows read": 19814,
    Queries: 422,
    "Payments completed": 103,
    "Sign ups": 46,
    Logins: 1026,
    "Sign outs": 1155,
    "Support calls": 6,
  },
  {
    date: "2023-01-16T00:00:00",
    "Rows written": 2976,
    "Rows read": 19962,
    Queries: 490,
    "Payments completed": 118,
    "Sign ups": 62,
    Logins: 1199,
    "Sign outs": 1060,
    "Support calls": 7,
  },
  {
    date: "2023-01-17T00:00:00",
    "Rows written": 2939,
    "Rows read": 19931,
    Queries: 484,
    "Payments completed": 96,
    "Sign ups": 61,
    Logins: 1344,
    "Sign outs": 1076,
    "Support calls": 7,
  },
  {
    date: "2023-01-18T00:00:00",
    "Rows written": 2931,
    "Rows read": 19650,
    Queries: 480,
    "Payments completed": 124,
    "Sign ups": 64,
    Logins: 1203,
    "Sign outs": 1100,
    "Support calls": 7,
  },
  {
    date: "2023-01-19T00:00:00",
    "Rows written": 2935,
    "Rows read": 19592,
    Queries: 479,
    "Payments completed": 112,
    "Sign ups": 67,
    Logins: 1351,
    "Sign outs": 1046,
    "Support calls": 5,
  },
  {
    date: "2023-01-20T00:00:00",
    "Rows written": 2962,
    "Rows read": 19214,
    Queries: 478,
    "Payments completed": 121,
    "Sign ups": 80,
    Logins: 1379,
    "Sign outs": 945,
    "Support calls": 3,
  },
  {
    date: "2023-01-21T00:00:00",
    "Rows written": 2965,
    "Rows read": 19460,
    Queries: 385,
    "Payments completed": 88,
    "Sign ups": 60,
    Logins: 1460,
    "Sign outs": 912,
    "Support calls": 2,
  },
  {
    date: "2023-01-22T00:00:00",
    "Rows written": 2969,
    "Rows read": 19151,
    Queries: 373,
    "Payments completed": 77,
    "Sign ups": 70,
    Logins: 1704,
    "Sign outs": 904,
    "Support calls": 2,
  },
  {
    date: "2023-01-23T00:00:00",
    "Rows written": 2945,
    "Rows read": 19301,
    Queries: 499,
    "Payments completed": 85,
    "Sign ups": 62,
    Logins: 1951,
    "Sign outs": 916,
    "Support calls": 2,
  },
  {
    date: "2023-01-24T00:00:00",
    "Rows written": 2933,
    "Rows read": 19614,
    Queries: 501,
    "Payments completed": 80,
    "Sign ups": 61,
    Logins: 1768,
    "Sign outs": 914,
    "Support calls": 2,
  },
  {
    date: "2023-01-25T00:00:00",
    "Rows written": 2910,
    "Rows read": 19470,
    Queries: 497,
    "Payments completed": 100,
    "Sign ups": 66,
    Logins: 1811,
    "Sign outs": 924,
    "Support calls": 2,
  },
  {
    date: "2023-01-26T00:00:00",
    "Rows written": 2904,
    "Rows read": 19632,
    Queries: 492,
    "Payments completed": 82,
    "Sign ups": 68,
    Logins: 2048,
    "Sign outs": 914,
    "Support calls": 2,
  },
  {
    date: "2023-01-27T00:00:00",
    "Rows written": 2905,
    "Rows read": 19706,
    Queries: 488,
    "Payments completed": 87,
    "Sign ups": 60,
    Logins: 1853,
    "Sign outs": 958,
    "Support calls": 2,
  },
  {
    date: "2023-01-28T00:00:00",
    "Rows written": 2881,
    "Rows read": 20284,
    Queries: 422,
    "Payments completed": 77,
    "Sign ups": 63,
    Logins: 1693,
    "Sign outs": 1000,
    "Support calls": 2,
  },
  {
    date: "2023-01-29T00:00:00",
    "Rows written": 2851,
    "Rows read": 20142,
    Queries: 418,
    "Payments completed": 74,
    "Sign ups": 54,
    Logins: 1637,
    "Sign outs": 1048,
    "Support calls": 2,
  },
  {
    date: "2023-01-30T00:00:00",
    "Rows written": 2859,
    "Rows read": 19518,
    Queries: 490,
    "Payments completed": 89,
    "Sign ups": 79,
    Logins: 1847,
    "Sign outs": 1077,
    "Support calls": 3,
  },
  {
    date: "2023-01-31T00:00:00",
    "Rows written": 2855,
    "Rows read": 19639,
    Queries: 491,
    "Payments completed": 94,
    "Sign ups": 67,
    Logins: 1972,
    "Sign outs": 1036,
    "Support calls": 4,
  },
  {
    date: "2023-02-01T00:00:00",
    "Rows written": 2839,
    "Rows read": 19806,
    Queries: 494,
    "Payments completed": 82,
    "Sign ups": 60,
    Logins: 1818,
    "Sign outs": 938,
    "Support calls": 3,
  },
  {
    date: "2023-02-02T00:00:00",
    "Rows written": 2840,
    "Rows read": 19498,
    Queries: 494,
    "Payments completed": 86,
    "Sign ups": 60,
    Logins: 1437,
    "Sign outs": 937,
    "Support calls": 3,
  },
  {
    date: "2023-02-03T00:00:00",
    "Rows written": 2861,
    "Rows read": 18849,
    Queries: 489,
    "Payments completed": 81,
    "Sign ups": 65,
    Logins: 1420,
    "Sign outs": 1025,
    "Support calls": 4,
  },
  {
    date: "2023-02-04T00:00:00",
    "Rows written": 2892,
    "Rows read": 19077,
    Queries: 379,
    "Payments completed": 66,
    "Sign ups": 56,
    Logins: 1622,
    "Sign outs": 1124,
    "Support calls": 3,
  },
  {
    date: "2023-02-05T00:00:00",
    "Rows written": 2892,
    "Rows read": 19313,
    Queries: 398,
    "Payments completed": 69,
    "Sign ups": 52,
    Logins: 1847,
    "Sign outs": 1150,
    "Support calls": 3,
  },
  {
    date: "2023-02-06T00:00:00",
    "Rows written": 2870,
    "Rows read": 18922,
    Queries: 494,
    "Payments completed": 89,
    "Sign ups": 61,
    Logins: 2020,
    "Sign outs": 1199,
    "Support calls": 4,
  },
  {
    date: "2023-02-07T00:00:00",
    "Rows written": 2849,
    "Rows read": 18994,
    Queries: 491,
    "Payments completed": 80,
    "Sign ups": 65,
    Logins: 2035,
    "Sign outs": 1198,
    "Support calls": 5,
  },
  {
    date: "2023-02-08T00:00:00",
    "Rows written": 2826,
    "Rows read": 18675,
    Queries: 493,
    "Payments completed": 85,
    "Sign ups": 61,
    Logins: 2044,
    "Sign outs": 1180,
    "Support calls": 5,
  },
  {
    date: "2023-02-09T00:00:00",
    "Rows written": 2810,
    "Rows read": 18103,
    Queries: 493,
    "Payments completed": 90,
    "Sign ups": 61,
    Logins: 1899,
    "Sign outs": 1198,
    "Support calls": 4,
  },
  {
    date: "2023-02-10T00:00:00",
    "Rows written": 2779,
    "Rows read": 18138,
    Queries: 498,
    "Payments completed": 87,
    "Sign ups": 62,
    Logins: 1478,
    "Sign outs": 1196,
    "Support calls": 4,
  },
  {
    date: "2023-02-11T00:00:00",
    "Rows written": 2739,
    "Rows read": 18141,
    Queries: 414,
    "Payments completed": 71,
    "Sign ups": 63,
    Logins: 1158,
    "Sign outs": 1194,
    "Support calls": 5,
  },
  {
    date: "2023-02-12T00:00:00",
    "Rows written": 2717,
    "Rows read": 18061,
    Queries: 431,
    "Payments completed": 68,
    "Sign ups": 60,
    Logins: 850,
    "Sign outs": 1197,
    "Support calls": 4,
  },
  {
    date: "2023-02-13T00:00:00",
    "Rows written": 2698,
    "Rows read": 18111,
    Queries: 487,
    "Payments completed": 81,
    "Sign ups": 70,
    Logins: 871,
    "Sign outs": 1109,
    "Support calls": 5,
  },
  {
    date: "2023-02-14T00:00:00",
    "Rows written": 2685,
    "Rows read": 18265,
    Queries: 485,
    "Payments completed": 106,
    "Sign ups": 63,
    Logins: 849,
    "Sign outs": 958,
    "Support calls": 6,
  },
  {
    date: "2023-02-15T00:00:00",
    "Rows written": 2676,
    "Rows read": 18603,
    Queries: 488,
    "Payments completed": 86,
    "Sign ups": 79,
    Logins: 874,
    "Sign outs": 910,
    "Support calls": 7,
  },
  {
    date: "2023-02-16T00:00:00",
    "Rows written": 2681,
    "Rows read": 18967,
    Queries: 488,
    "Payments completed": 81,
    "Sign ups": 76,
    Logins: 862,
    "Sign outs": 928,
    "Support calls": 10,
  },
  {
    date: "2023-02-17T00:00:00",
    "Rows written": 2699,
    "Rows read": 19166,
    Queries: 484,
    "Payments completed": 85,
    "Sign ups": 62,
    Logins: 864,
    "Sign outs": 904,
    "Support calls": 13,
  },
  {
    date: "2023-02-18T00:00:00",
    "Rows written": 2710,
    "Rows read": 18711,
    Queries: 430,
    "Payments completed": 66,
    "Sign ups": 52,
    Logins: 918,
    "Sign outs": 952,
    "Support calls": 16,
  },
  {
    date: "2023-02-19T00:00:00",
    "Rows written": 2694,
    "Rows read": 18862,
    Queries: 398,
    "Payments completed": 69,
    "Sign ups": 60,
    Logins: 968,
    "Sign outs": 911,
    "Support calls": 15,
  },
  {
    date: "2023-02-20T00:00:00",
    "Rows written": 2679,
    "Rows read": 18473,
    Queries: 494,
    "Payments completed": 80,
    "Sign ups": 73,
    Logins: 1142,
    "Sign outs": 906,
    "Support calls": 16,
  },
  {
    date: "2023-02-21T00:00:00",
    "Rows written": 2684,
    "Rows read": 18663,
    Queries: 497,
    "Payments completed": 93,
    "Sign ups": 61,
    Logins: 1360,
    "Sign outs": 911,
    "Support calls": 16,
  },
  {
    date: "2023-02-22T00:00:00",
    "Rows written": 2678,
    "Rows read": 18562,
    Queries: 498,
    "Payments completed": 83,
    "Sign ups": 72,
    Logins: 1691,
    "Sign outs": 901,
    "Support calls": 18,
  },
  {
    date: "2023-02-23T00:00:00",
    "Rows written": 2669,
    "Rows read": 18132,
    Queries: 499,
    "Payments completed": 105,
    "Sign ups": 62,
    Logins: 1862,
    "Sign outs": 916,
    "Support calls": 10,
  },
  {
    date: "2023-02-24T00:00:00",
    "Rows written": 2674,
    "Rows read": 18392,
    Queries: 499,
    "Payments completed": 117,
    "Sign ups": 66,
    Logins: 2003,
    "Sign outs": 906,
    "Support calls": 8,
  },
  {
    date: "2023-02-25T00:00:00",
    "Rows written": 2667,
    "Rows read": 19037,
    Queries: 386,
    "Payments completed": 94,
    "Sign ups": 67,
    Logins: 2006,
    "Sign outs": 914,
    "Support calls": 7,
  },
  {
    date: "2023-02-26T00:00:00",
    "Rows written": 2689,
    "Rows read": 19828,
    Queries: 385,
    "Payments completed": 105,
    "Sign ups": 62,
    Logins: 2007,
    "Sign outs": 956,
    "Support calls": 4,
  },
  {
    date: "2023-02-27T00:00:00",
    "Rows written": 2680,
    "Rows read": 20667,
    Queries: 497,
    "Payments completed": 115,
    "Sign ups": 62,
    Logins: 1742,
    "Sign outs": 903,
    "Support calls": 4,
  },
  {
    date: "2023-02-28T00:00:00",
    "Rows written": 2686,
    "Rows read": 20929,
    Queries: 494,
    "Payments completed": 84,
    "Sign ups": 66,
    Logins: 1910,
    "Sign outs": 920,
    "Support calls": 3,
  },
  {
    date: "2023-03-01T00:00:00",
    "Rows written": 2694,
    "Rows read": 20639,
    Queries: 495,
    "Payments completed": 85,
    "Sign ups": 63,
    Logins: 1766,
    "Sign outs": 916,
    "Support calls": 3,
  },
  {
    date: "2023-03-02T00:00:00",
    "Rows written": 2687,
    "Rows read": 19941,
    Queries: 495,
    "Payments completed": 82,
    "Sign ups": 65,
    Logins: 1674,
    "Sign outs": 924,
    "Support calls": 2,
  },
  {
    date: "2023-03-03T00:00:00",
    "Rows written": 2708,
    "Rows read": 19420,
    Queries: 491,
    "Payments completed": 102,
    "Sign ups": 66,
    Logins: 1785,
    "Sign outs": 912,
    "Support calls": 2,
  },
  {
    date: "2023-03-04T00:00:00",
    "Rows written": 2741,
    "Rows read": 18773,
    Queries: 415,
    "Payments completed": 78,
    "Sign ups": 52,
    Logins: 1732,
    "Sign outs": 903,
    "Support calls": 2,
  },
  {
    date: "2023-03-05T00:00:00",
    "Rows written": 2783,
    "Rows read": 18993,
    Queries: 402,
    "Payments completed": 64,
    "Sign ups": 47,
    Logins: 1813,
    "Sign outs": 912,
    "Support calls": 2,
  },
  {
    date: "2023-03-06T00:00:00",
    "Rows written": 2819,
    "Rows read": 18895,
    Queries: 493,
    "Payments completed": 80,
    "Sign ups": 67,
    Logins: 1938,
    "Sign outs": 932,
    "Support calls": 2,
  },
  {
    date: "2023-03-07T00:00:00",
    "Rows written": 2856,
    "Rows read": 19163,
    Queries: 488,
    "Payments completed": 118,
    "Sign ups": 75,
    Logins: 1798,
    "Sign outs": 904,
    "Support calls": 2,
  },
  {
    date: "2023-03-08T00:00:00",
    "Rows written": 2870,
    "Rows read": 19383,
    Queries: 483,
    "Payments completed": 123,
    "Sign ups": 75,
    Logins: 1866,
    "Sign outs": 901,
    "Support calls": 3,
  },
  {
    date: "2023-03-09T00:00:00",
    "Rows written": 2855,
    "Rows read": 19523,
    Queries: 483,
    "Payments completed": 118,
    "Sign ups": 61,
    Logins: 1640,
    "Sign outs": 910,
    "Support calls": 5,
  },
  {
    date: "2023-03-10T00:00:00",
    "Rows written": 2819,
    "Rows read": 19186,
    Queries: 480,
    "Payments completed": 124,
    "Sign ups": 65,
    Logins: 1274,
    "Sign outs": 903,
    "Support calls": 4,
  },
  {
    date: "2023-03-11T00:00:00",
    "Rows written": 2785,
    "Rows read": 18841,
    Queries: 415,
    "Payments completed": 97,
    "Sign ups": 52,
    Logins: 895,
    "Sign outs": 913,
    "Support calls": 4,
  },
  {
    date: "2023-03-12T00:00:00",
    "Rows written": 2787,
    "Rows read": 18357,
    Queries: 390,
    "Payments completed": 71,
    "Sign ups": 50,
    Logins: 861,
    "Sign outs": 906,
    "Support calls": 3,
  },
  {
    date: "2023-03-13T00:00:00",
    "Rows written": 2810,
    "Rows read": 18455,
    Queries: 496,
    "Payments completed": 94,
    "Sign ups": 67,
    Logins: 853,
    "Sign outs": 914,
    "Support calls": 4,
  },
  {
    date: "2023-03-14T00:00:00",
    "Rows written": 2827,
    "Rows read": 18791,
    Queries: 494,
    "Payments completed": 92,
    "Sign ups": 77,
    Logins: 860,
    "Sign outs": 902,
    "Support calls": 6,
  },
  {
    date: "2023-03-15T00:00:00",
    "Rows written": 2855,
    "Rows read": 19023,
    Queries: 493,
    "Payments completed": 94,
    "Sign ups": 80,
    Logins: 922,
    "Sign outs": 971,
    "Support calls": 7,
  },
  {
    date: "2023-03-16T00:00:00",
    "Rows written": 2895,
    "Rows read": 19666,
    Queries: 495,
    "Payments completed": 122,
    "Sign ups": 76,
    Logins: 1127,
    "Sign outs": 1019,
    "Support calls": 5,
  },
  {
    date: "2023-03-17T00:00:00",
    "Rows written": 2912,
    "Rows read": 20299,
    Queries: 497,
    "Payments completed": 114,
    "Sign ups": 61,
    Logins: 1055,
    "Sign outs": 953,
    "Support calls": 2,
  },
  {
    date: "2023-03-18T00:00:00",
    "Rows written": 2924,
    "Rows read": 20036,
    Queries: 386,
    "Payments completed": 95,
    "Sign ups": 60,
    Logins: 1158,
    "Sign outs": 988,
    "Support calls": 2,
  },
  {
    date: "2023-03-19T00:00:00",
    "Rows written": 2953,
    "Rows read": 20010,
    Queries: 408,
    "Payments completed": 71,
    "Sign ups": 58,
    Logins: 1438,
    "Sign outs": 954,
    "Support calls": 2,
  },
  {
    date: "2023-03-20T00:00:00",
    "Rows written": 2939,
    "Rows read": 19601,
    Queries: 492,
    "Payments completed": 87,
    "Sign ups": 70,
    Logins: 1332,
    "Sign outs": 906,
    "Support calls": 3,
  },
  {
    date: "2023-03-21T00:00:00",
    "Rows written": 2932,
    "Rows read": 19406,
    Queries: 495,
    "Payments completed": 120,
    "Sign ups": 75,
    Logins: 1102,
    "Sign outs": 918,
    "Support calls": 5,
  },
  {
    date: "2023-03-22T00:00:00",
    "Rows written": 2951,
    "Rows read": 19742,
    Queries: 497,
    "Payments completed": 110,
    "Sign ups": 75,
    Logins: 951,
    "Sign outs": 922,
    "Support calls": 8,
  },
  {
    date: "2023-03-23T00:00:00",
    "Rows written": 2937,
    "Rows read": 19329,
    Queries: 503,
    "Payments completed": 103,
    "Sign ups": 75,
    Logins: 846,
    "Sign outs": 921,
    "Support calls": 12,
  },
  {
    date: "2023-03-24T00:00:00",
    "Rows written": 2945,
    "Rows read": 19646,
    Queries: 511,
    "Payments completed": 118,
    "Sign ups": 71,
    Logins: 850,
    "Sign outs": 926,
    "Support calls": 14,
  },
  {
    date: "2023-03-25T00:00:00",
    "Rows written": 2947,
    "Rows read": 19271,
    Queries: 426,
    "Payments completed": 97,
    "Sign ups": 67,
    Logins: 878,
    "Sign outs": 923,
    "Support calls": 14,
  },
  {
    date: "2023-03-26T00:00:00",
    "Rows written": 2945,
    "Rows read": 18842,
    Queries: 382,
    "Payments completed": 98,
    "Sign ups": 67,
    Logins: 851,
    "Sign outs": 924,
    "Support calls": 10,
  },
  {
    date: "2023-03-26T00:00:00",
    "Rows written": 2926,
    "Rows read": 18999,
    Queries: 498,
    "Payments completed": 118,
    "Sign ups": 73,
    Logins: 872,
    "Sign outs": 1009,
    "Support calls": 13,
  },
  {
    date: "2023-03-27T00:00:00",
    "Rows written": 2945,
    "Rows read": 19312,
    Queries: 499,
    "Payments completed": 123,
    "Sign ups": 62,
    Logins: 863,
    "Sign outs": 958,
    "Support calls": 15,
  },
  {
    date: "2023-03-28T00:00:00",
    "Rows written": 2937,
    "Rows read": 19258,
    Queries: 502,
    "Payments completed": 118,
    "Sign ups": 80,
    Logins: 901,
    "Sign outs": 927,
    "Support calls": 12,
  },
  {
    date: "2023-03-29T00:00:00",
    "Rows written": 2908,
    "Rows read": 19567,
    Queries: 501,
    "Payments completed": 120,
    "Sign ups": 74,
    Logins: 845,
    "Sign outs": 967,
    "Support calls": 11,
  },
  {
    date: "2023-03-30T00:00:00",
    "Rows written": 2876,
    "Rows read": 19888,
    Queries: 497,
    "Payments completed": 120,
    "Sign ups": 61,
    Logins: 869,
    "Sign outs": 1080,
    "Support calls": 6,
  },
  {
    date: "2023-03-31T00:00:00",
    "Rows written": 2855,
    "Rows read": 20292,
    Queries: 438,
    "Payments completed": 70,
    "Sign ups": 53,
    Logins: 865,
    "Sign outs": 1057,
    "Support calls": 5,
  },
  {
    date: "2023-04-01T00:00:00",
    "Rows written": 2845,
    "Rows read": 20739,
    Queries: 403,
    "Payments completed": 61,
    "Sign ups": 60,
    Logins: 860,
    "Sign outs": 987,
    "Support calls": 7,
  },
  {
    date: "2023-04-02T00:00:00",
    "Rows written": 2838,
    "Rows read": 20633,
    Queries: 493,
    "Payments completed": 81,
    "Sign ups": 66,
    Logins: 867,
    "Sign outs": 905,
    "Support calls": 12,
  },
  {
    date: "2023-04-03T00:00:00",
    "Rows written": 2832,
    "Rows read": 21003,
    Queries: 496,
    "Payments completed": 82,
    "Sign ups": 60,
    Logins: 867,
    "Sign outs": 934,
    "Support calls": 13,
  },
  {
    date: "2023-04-04T00:00:00",
    "Rows written": 2825,
    "Rows read": 20648,
    Queries: 500,
    "Payments completed": 81,
    "Sign ups": 66,
    Logins: 963,
    "Sign outs": 1002,
    "Support calls": 14,
  },
  {
    date: "2023-04-05T00:00:00",
    "Rows written": 2819,
    "Rows read": 20691,
    Queries: 504,
    "Payments completed": 105,
    "Sign ups": 64,
    Logins: 1027,
    "Sign outs": 1046,
    "Support calls": 15,
  },
  {
    date: "2023-04-06T00:00:00",
    "Rows written": 2823,
    "Rows read": 20393,
    Queries: 510,
    "Payments completed": 121,
    "Sign ups": 64,
    Logins: 1171,
    "Sign outs": 1101,
    "Support calls": 10,
  },
  {
    date: "2023-04-07T00:00:00",
    "Rows written": 2805,
    "Rows read": 20582,
    Queries: 412,
    "Payments completed": 95,
    "Sign ups": 54,
    Logins: 1199,
    "Sign outs": 1193,
    "Support calls": 9,
  },
  {
    date: "2023-04-08T00:00:00",
    "Rows written": 2805,
    "Rows read": 20673,
    Queries: 400,
    "Payments completed": 75,
    "Sign ups": 52,
    Logins: 1208,
    "Sign outs": 1168,
    "Support calls": 5,
  },
  {
    date: "2023-04-09T00:00:00",
    "Rows written": 2794,
    "Rows read": 20134,
    Queries: 494,
    "Payments completed": 107,
    "Sign ups": 64,
    Logins: 1452,
    "Sign outs": 1189,
    "Support calls": 6,
  },
  {
    date: "2023-04-10T00:00:00",
    "Rows written": 2802,
    "Rows read": 19757,
    Queries: 489,
    "Payments completed": 121,
    "Sign ups": 63,
    Logins: 1464,
    "Sign outs": 1195,
    "Support calls": 6,
  },
  {
    date: "2023-04-11T00:00:00",
    "Rows written": 2803,
    "Rows read": 20053,
    Queries: 486,
    "Payments completed": 100,
    "Sign ups": 60,
    Logins: 1512,
    "Sign outs": 1199,
    "Support calls": 5,
  },
  {
    date: "2023-04-12T00:00:00",
    "Rows written": 2812,
    "Rows read": 19604,
    Queries: 483,
    "Payments completed": 120,
    "Sign ups": 61,
    Logins: 1360,
    "Sign outs": 1193,
    "Support calls": 3,
  },
  {
    date: "2023-04-13T00:00:00",
    "Rows written": 2822,
    "Rows read": 19715,
    Queries: 478,
    "Payments completed": 122,
    "Sign ups": 69,
    Logins: 1038,
    "Sign outs": 1184,
    "Support calls": 3,
  },
  {
    date: "2023-04-14T00:00:00",
    "Rows written": 2819,
    "Rows read": 20002,
    Queries: 367,
    "Payments completed": 82,
    "Sign ups": 61,
    Logins: 844,
    "Sign outs": 1163,
    "Support calls": 3,
  },
  {
    date: "2023-04-15T00:00:00",
    "Rows written": 2805,
    "Rows read": 20661,
    Queries: 430,
    "Payments completed": 70,
    "Sign ups": 62,
    Logins: 855,
    "Sign outs": 1044,
    "Support calls": 2,
  },
  {
    date: "2023-04-16T00:00:00",
    "Rows written": 2826,
    "Rows read": 21525,
    Queries: 487,
    "Payments completed": 81,
    "Sign ups": 63,
    Logins: 973,
    "Sign outs": 1000,
    "Support calls": 2,
  },
  {
    date: "2023-04-17T00:00:00",
    "Rows written": 2812,
    "Rows read": 21431,
    Queries: 491,
    "Payments completed": 90,
    "Sign ups": 61,
    Logins: 1065,
    "Sign outs": 908,
    "Support calls": 2,
  },
  {
    date: "2023-04-18T00:00:00",
    "Rows written": 2825,
    "Rows read": 21171,
    Queries: 493,
    "Payments completed": 122,
    "Sign ups": 64,
    Logins: 1071,
    "Sign outs": 922,
    "Support calls": 2,
  },
  {
    date: "2023-04-19T00:00:00",
    "Rows written": 2841,
    "Rows read": 20561,
    Queries: 495,
    "Payments completed": 123,
    "Sign ups": 73,
    Logins: 1065,
    "Sign outs": 907,
    "Support calls": 3,
  },
  {
    date: "2023-04-20T00:00:00",
    "Rows written": 2875,
    "Rows read": 20802,
    Queries: 494,
    "Payments completed": 125,
    "Sign ups": 63,
    Logins: 1191,
    "Sign outs": 906,
    "Support calls": 3,
  },
  {
    date: "2023-04-21T00:00:00",
    "Rows written": 2873,
    "Rows read": 20844,
    Queries: 408,
    "Payments completed": 92,
    "Sign ups": 51,
    Logins: 1415,
    "Sign outs": 925,
    "Support calls": 2,
  },
  {
    date: "2023-04-22T00:00:00",
    "Rows written": 2850,
    "Rows read": 20898,
    Queries: 372,
    "Payments completed": 82,
    "Sign ups": 57,
    Logins: 1744,
    "Sign outs": 905,
    "Support calls": 2,
  },
  {
    date: "2023-04-23T00:00:00",
    "Rows written": 2833,
    "Rows read": 20662,
    Queries: 500,
    "Payments completed": 91,
    "Sign ups": 62,
    Logins: 2017,
    "Sign outs": 908,
    "Support calls": 3,
  },
  {
    date: "2023-04-24T00:00:00",
    "Rows written": 2820,
    "Rows read": 20361,
    Queries: 494,
    "Payments completed": 124,
    "Sign ups": 79,
    Logins: 1911,
    "Sign outs": 913,
    "Support calls": 4,
  },
  {
    date: "2023-04-25T00:00:00",
    "Rows written": 2820,
    "Rows read": 19629,
    Queries: 489,
    "Payments completed": 113,
    "Sign ups": 70,
    Logins: 2014,
    "Sign outs": 939,
    "Support calls": 4,
  },
  {
    date: "2023-04-26T00:00:00",
    "Rows written": 2837,
    "Rows read": 19197,
    Queries: 486,
    "Payments completed": 115,
    "Sign ups": 63,
    Logins: 2004,
    "Sign outs": 963,
    "Support calls": 3,
  },
  {
    date: "2023-04-27T00:00:00",
    "Rows written": 2852,
    "Rows read": 19201,
    Queries: 481,
    "Payments completed": 113,
    "Sign ups": 63,
    Logins: 2029,
    "Sign outs": 903,
    "Support calls": 3,
  },
  {
    date: "2023-04-28T00:00:00",
    "Rows written": 2832,
    "Rows read": 19708,
    Queries: 405,
    "Payments completed": 88,
    "Sign ups": 50,
    Logins: 2012,
    "Sign outs": 916,
    "Support calls": 3,
  },
  {
    date: "2023-04-29T00:00:00",
    "Rows written": 2808,
    "Rows read": 20513,
    Queries: 393,
    "Payments completed": 94,
    "Sign ups": 48,
    Logins: 1745,
    "Sign outs": 983,
    "Support calls": 2,
  },
  {
    date: "2023-04-30T00:00:00",
    "Rows written": 2815,
    "Rows read": 20545,
    Queries: 495,
    "Payments completed": 82,
    "Sign ups": 64,
    Logins: 1784,
    "Sign outs": 1063,
    "Support calls": 2,
  },
  {
    date: "2023-05-01T00:00:00",
    "Rows written": 2804,
    "Rows read": 20774,
    Queries: 491,
    "Payments completed": 84,
    "Sign ups": 62,
    Logins: 1883,
    "Sign outs": 1199,
    "Support calls": 2,
  },
  {
    date: "2023-05-02T00:00:00",
    "Rows written": 2786,
    "Rows read": 21453,
    Queries: 489,
    "Payments completed": 81,
    "Sign ups": 62,
    Logins: 1806,
    "Sign outs": 1188,
    "Support calls": 2,
  },
  {
    date: "2023-05-03T00:00:00",
    "Rows written": 2786,
    "Rows read": 21543,
    Queries: 484,
    "Payments completed": 106,
    "Sign ups": 61,
    Logins: 1967,
    "Sign outs": 1175,
    "Support calls": 3,
  },
  {
    date: "2023-05-04T00:00:00",
    "Rows written": 2775,
    "Rows read": 21089,
    Queries: 484,
    "Payments completed": 122,
    "Sign ups": 62,
    Logins: 1956,
    "Sign outs": 1186,
    "Support calls": 4,
  },
  {
    date: "2023-05-05T00:00:00",
    "Rows written": 2784,
    "Rows read": 20388,
    Queries: 435,
    "Payments completed": 90,
    "Sign ups": 53,
    Logins: 2032,
    "Sign outs": 1179,
    "Support calls": 3,
  },
  {
    date: "2023-05-06T00:00:00",
    "Rows written": 2779,
    "Rows read": 19678,
    Queries: 386,
    "Payments completed": 99,
    "Sign ups": 47,
    Logins: 1984,
    "Sign outs": 1189,
    "Support calls": 2,
  },
  {
    date: "2023-05-07T00:00:00",
    "Rows written": 2763,
    "Rows read": 19046,
    Queries: 496,
    "Payments completed": 115,
    "Sign ups": 68,
    Logins: 2021,
    "Sign outs": 1195,
    "Support calls": 2,
  },
  {
    date: "2023-05-08T00:00:00",
    "Rows written": 2738,
    "Rows read": 19152,
    Queries: 500,
    "Payments completed": 121,
    "Sign ups": 80,
    Logins: 1641,
    "Sign outs": 1197,
    "Support calls": 2,
  },
  {
    date: "2023-05-09T00:00:00",
    "Rows written": 2738,
    "Rows read": 18656,
    Queries: 506,
    "Payments completed": 81,
    "Sign ups": 75,
    Logins: 1286,
    "Sign outs": 1184,
    "Support calls": 2,
  },
  {
    date: "2023-05-10T00:00:00",
    "Rows written": 2715,
    "Rows read": 18455,
    Queries: 507,
    "Payments completed": 87,
    "Sign ups": 79,
    Logins: 987,
    "Sign outs": 1195,
    "Support calls": 2,
  },
  {
    date: "2023-05-11T00:00:00",
    "Rows written": 2714,
    "Rows read": 18037,
    Queries: 505,
    "Payments completed": 87,
    "Sign ups": 79,
    Logins: 953,
    "Sign outs": 1198,
    "Support calls": 2,
  },
  {
    date: "2023-05-12T00:00:00",
    "Rows written": 2714,
    "Rows read": 18119,
    Queries: 422,
    "Payments completed": 105,
    "Sign ups": 55,
    Logins: 1059,
    "Sign outs": 1180,
    "Support calls": 2,
  },
  {
    date: "2023-05-13T00:00:00",
    "Rows written": 2717,
    "Rows read": 18102,
    Queries: 436,
    "Payments completed": 94,
    "Sign ups": 52,
    Logins: 1153,
    "Sign outs": 1191,
    "Support calls": 2,
  },
  {
    date: "2023-05-14T00:00:00",
    "Rows written": 2735,
    "Rows read": 18080,
    Queries: 487,
    "Payments completed": 122,
    "Sign ups": 61,
    Logins: 1033,
    "Sign outs": 1168,
    "Support calls": 2,
  },
  {
    date: "2023-05-15T00:00:00",
    "Rows written": 2756,
    "Rows read": 18124,
    Queries: 484,
    "Payments completed": 99,
    "Sign ups": 65,
    Logins: 846,
    "Sign outs": 1179,
    "Support calls": 2,
  },
  {
    date: "2023-05-16T00:00:00",
    "Rows written": 2757,
    "Rows read": 18008,
    Queries: 478,
    "Payments completed": 125,
    "Sign ups": 65,
    Logins: 891,
    "Sign outs": 1132,
    "Support calls": 2,
  },
  {
    date: "2023-05-17T00:00:00",
    "Rows written": 2752,
    "Rows read": 18076,
    Queries: 478,
    "Payments completed": 113,
    "Sign ups": 63,
    Logins: 923,
    "Sign outs": 1003,
    "Support calls": 2,
  },
  {
    date: "2023-05-18T00:00:00",
    "Rows written": 2772,
    "Rows read": 18027,
    Queries: 479,
    "Payments completed": 84,
    "Sign ups": 61,
    Logins: 1115,
    "Sign outs": 974,
    "Support calls": 2,
  },
  {
    date: "2023-05-19T00:00:00",
    "Rows written": 2796,
    "Rows read": 18099,
    Queries: 387,
    "Payments completed": 78,
    "Sign ups": 52,
    Logins: 1374,
    "Sign outs": 1000,
    "Support calls": 2,
  },
  {
    date: "2023-05-20T00:00:00",
    "Rows written": 2793,
    "Rows read": 18002,
    Queries: 431,
    "Payments completed": 84,
    "Sign ups": 54,
    Logins: 1622,
    "Sign outs": 1067,
    "Support calls": 2,
  },
  {
    date: "2023-05-21T00:00:00",
    "Rows written": 2782,
    "Rows read": 18012,
    Queries: 488,
    "Payments completed": 81,
    "Sign ups": 74,
    Logins: 1612,
    "Sign outs": 1182,
    "Support calls": 3,
  },
  {
    date: "2023-05-22T00:00:00",
    "Rows written": 2794,
    "Rows read": 18004,
    Queries: 485,
    "Payments completed": 87,
    "Sign ups": 74,
    Logins: 1668,
    "Sign outs": 1173,
    "Support calls": 3,
  },
  {
    date: "2023-05-23T00:00:00",
    "Rows written": 2824,
    "Rows read": 18446,
    Queries: 481,
    "Payments completed": 103,
    "Sign ups": 67,
    Logins: 1579,
    "Sign outs": 1175,
    "Support calls": 4,
  },
  {
    date: "2023-05-24T00:00:00",
    "Rows written": 2862,
    "Rows read": 18357,
    Queries: 479,
    "Payments completed": 96,
    "Sign ups": 72,
    Logins: 1294,
    "Sign outs": 1188,
    "Support calls": 6,
  },
  {
    date: "2023-05-25T00:00:00",
    "Rows written": 2910,
    "Rows read": 18021,
    Queries: 478,
    "Payments completed": 83,
    "Sign ups": 79,
    Logins: 1214,
    "Sign outs": 1172,
    "Support calls": 6,
  },
  {
    date: "2023-05-26T00:00:00",
    "Rows written": 2949,
    "Rows read": 18094,
    Queries: 379,
    "Payments completed": 66,
    "Sign ups": 62,
    Logins: 1054,
    "Sign outs": 1199,
    "Support calls": 4,
  },
  {
    date: "2023-05-27T00:00:00",
    "Rows written": 2983,
    "Rows read": 18053,
    Queries: 390,
    "Payments completed": 68,
    "Sign ups": 63,
    Logins: 1034,
    "Sign outs": 1178,
    "Support calls": 2,
  },
  {
    date: "2023-05-28T00:00:00",
    "Rows written": 2978,
    "Rows read": 18022,
    Queries: 496,
    "Payments completed": 92,
    "Sign ups": 61,
    Logins: 845,
    "Sign outs": 1180,
    "Support calls": 2,
  },
  {
    date: "2023-05-29T00:00:00",
    "Rows written": 2963,
    "Rows read": 18416,
    Queries: 494,
    "Payments completed": 93,
    "Sign ups": 80,
    Logins: 881,
    "Sign outs": 1179,
    "Support calls": 2,
  },
  {
    date: "2023-05-30T00:00:00",
    "Rows written": 2949,
    "Rows read": 18270,
    Queries: 496,
    "Payments completed": 81,
    "Sign ups": 71,
    Logins: 925,
    "Sign outs": 1194,
    "Support calls": 2,
  },
  {
    date: "2023-05-31T00:00:00",
    "Rows written": 2965,
    "Rows read": 18034,
    Queries: 500,
    "Payments completed": 80,
    "Sign ups": 70,
    Logins: 879,
    "Sign outs": 1195,
    "Support calls": 2,
  },
  {
    date: "2023-06-01T00:00:00",
    "Rows written": 2970,
    "Rows read": 18061,
    Queries: 506,
    "Payments completed": 95,
    "Sign ups": 77,
    Logins: 924,
    "Sign outs": 1120,
    "Support calls": 2,
  },
  {
    date: "2023-06-02T00:00:00",
    "Rows written": 2974,
    "Rows read": 18180,
    Queries: 425,
    "Payments completed": 74,
    "Sign ups": 54,
    Logins: 853,
    "Sign outs": 1146,
    "Support calls": 2,
  },
  {
    date: "2023-06-03T00:00:00",
    "Rows written": 3004,
    "Rows read": 18022,
    Queries: 384,
    "Payments completed": 74,
    "Sign ups": 48,
    Logins: 877,
    "Sign outs": 1153,
    "Support calls": 2,
  },
  {
    date: "2023-06-04T00:00:00",
    "Rows written": 3033,
    "Rows read": 18091,
    Queries: 497,
    "Payments completed": 102,
    "Sign ups": 66,
    Logins: 896,
    "Sign outs": 1199,
    "Support calls": 2,
  },
  {
    date: "2023-06-05T00:00:00",
    "Rows written": 3033,
    "Rows read": 18398,
    Queries: 500,
    "Payments completed": 101,
    "Sign ups": 76,
    Logins: 1053,
    "Sign outs": 1118,
    "Support calls": 2,
  },
  {
    date: "2023-06-06T00:00:00",
    "Rows written": 3028,
    "Rows read": 18439,
    Queries: 505,
    "Payments completed": 83,
    "Sign ups": 74,
    Logins: 1009,
    "Sign outs": 1029,
    "Support calls": 3,
  },
  {
    date: "2023-06-07T00:00:00",
    "Rows written": 3008,
    "Rows read": 18750,
    Queries: 505,
    "Payments completed": 82,
    "Sign ups": 72,
    Logins: 884,
    "Sign outs": 997,
    "Support calls": 4,
  },
  {
    date: "2023-06-08T00:00:00",
    "Rows written": 3000,
    "Rows read": 19398,
    Queries: 509,
    "Payments completed": 80,
    "Sign ups": 78,
    Logins: 1003,
    "Sign outs": 1069,
    "Support calls": 5,
  },
  {
    date: "2023-06-09T00:00:00",
    "Rows written": 2975,
    "Rows read": 19233,
    Queries: 442,
    "Payments completed": 68,
    "Sign ups": 54,
    Logins: 1182,
    "Sign outs": 1169,
    "Support calls": 4,
  },
  {
    date: "2023-06-10T00:00:00",
    "Rows written": 2958,
    "Rows read": 19593,
    Queries: 430,
    "Payments completed": 65,
    "Sign ups": 63,
    Logins: 1129,
    "Sign outs": 1161,
    "Support calls": 4,
  },
  {
    date: "2023-06-11T00:00:00",
    "Rows written": 2966,
    "Rows read": 20333,
    Queries: 488,
    "Payments completed": 84,
    "Sign ups": 61,
    Logins: 1009,
    "Sign outs": 1199,
    "Support calls": 4,
  },
  {
    date: "2023-06-12T00:00:00",
    "Rows written": 2988,
    "Rows read": 20156,
    Queries: 491,
    "Payments completed": 98,
    "Sign ups": 64,
    Logins: 924,
    "Sign outs": 1194,
    "Support calls": 3,
  },
  {
    date: "2023-06-13T00:00:00",
    "Rows written": 2973,
    "Rows read": 19662,
    Queries: 488,
    "Payments completed": 106,
    "Sign ups": 67,
    Logins: 870,
    "Sign outs": 1176,
    "Support calls": 4,
  },
  {
    date: "2023-06-14T00:00:00",
    "Rows written": 2951,
    "Rows read": 19450,
    Queries: 483,
    "Payments completed": 122,
    "Sign ups": 60,
    Logins: 877,
    "Sign outs": 1167,
    "Support calls": 3,
  },
  {
    date: "2023-06-15T00:00:00",
    "Rows written": 2917,
    "Rows read": 19681,
    Queries: 478,
    "Payments completed": 97,
    "Sign ups": 66,
    Logins: 853,
    "Sign outs": 1185,
    "Support calls": 4,
  },
  {
    date: "2023-06-16T00:00:00",
    "Rows written": 2877,
    "Rows read": 19636,
    Queries: 365,
    "Payments completed": 71,
    "Sign ups": 55,
    Logins: 965,
    "Sign outs": 1184,
    "Support calls": 4,
  },
  {
    date: "2023-06-17T00:00:00",
    "Rows written": 2850,
    "Rows read": 19478,
    Queries: 438,
    "Payments completed": 65,
    "Sign ups": 55,
    Logins: 1101,
    "Sign outs": 1197,
    "Support calls": 2,
  },
  {
    date: "2023-06-18T00:00:00",
    "Rows written": 2858,
    "Rows read": 19258,
    Queries: 487,
    "Payments completed": 81,
    "Sign ups": 64,
    Logins: 1335,
    "Sign outs": 1106,
    "Support calls": 2,
  },
  {
    date: "2023-06-19T00:00:00",
    "Rows written": 2880,
    "Rows read": 19348,
    Queries: 487,
    "Payments completed": 118,
    "Sign ups": 73,
    Logins: 1406,
    "Sign outs": 1129,
    "Support calls": 2,
  },
  {
    date: "2023-06-20T00:00:00",
    "Rows written": 2863,
    "Rows read": 19951,
    Queries: 488,
    "Payments completed": 116,
    "Sign ups": 76,
    Logins: 1378,
    "Sign outs": 1082,
    "Support calls": 2,
  },
  {
    date: "2023-06-21T00:00:00",
    "Rows written": 2844,
    "Rows read": 20053,
    Queries: 490,
    "Payments completed": 82,
    "Sign ups": 77,
    Logins: 1294,
    "Sign outs": 1073,
    "Support calls": 2,
  },
  {
    date: "2023-06-22T00:00:00",
    "Rows written": 2830,
    "Rows read": 20493,
    Queries: 489,
    "Payments completed": 83,
    "Sign ups": 61,
    Logins: 1318,
    "Sign outs": 1042,
    "Support calls": 2,
  },
  {
    date: "2023-06-23T00:00:00",
    "Rows written": 2833,
    "Rows read": 20724,
    Queries: 432,
    "Payments completed": 66,
    "Sign ups": 57,
    Logins: 1076,
    "Sign outs": 1115,
    "Support calls": 2,
  },
  {
    date: "2023-06-24T00:00:00",
    "Rows written": 2809,
    "Rows read": 20767,
    Queries: 431,
    "Payments completed": 63,
    "Sign ups": 59,
    Logins: 852,
    "Sign outs": 1174,
    "Support calls": 2,
  },
  {
    date: "2023-06-25T00:00:00",
    "Rows written": 2781,
    "Rows read": 20818,
    Queries: 487,
    "Payments completed": 81,
    "Sign ups": 64,
    Logins: 881,
    "Sign outs": 1173,
    "Support calls": 2,
  },
  {
    date: "2023-06-26T00:00:00",
    "Rows written": 2748,
    "Rows read": 20673,
    Queries: 490,
    "Payments completed": 95,
    "Sign ups": 78,
    Logins: 914,
    "Sign outs": 1105,
    "Support calls": 2,
  },
  {
    date: "2023-06-27T00:00:00",
    "Rows written": 2750,
    "Rows read": 19990,
    Queries: 492,
    "Payments completed": 81,
    "Sign ups": 74,
    Logins: 855,
    "Sign outs": 1139,
    "Support calls": 2,
  },
  {
    date: "2023-06-28T00:00:00",
    "Rows written": 2761,
    "Rows read": 19874,
    Queries: 488,
    "Payments completed": 83,
    "Sign ups": 69,
    Logins: 876,
    "Sign outs": 1073,
    "Support calls": 2,
  },
  {
    date: "2023-06-29T00:00:00",
    "Rows written": 2787,
    "Rows read": 19812,
    Queries: 486,
    "Payments completed": 83,
    "Sign ups": 76,
    Logins: 900,
    "Sign outs": 1090,
    "Support calls": 3,
  },
  {
    date: "2023-06-30T00:00:00",
    "Rows written": 2819,
    "Rows read": 19619,
    Queries: 376,
    "Payments completed": 88,
    "Sign ups": 66,
    Logins: 852,
    "Sign outs": 1118,
    "Support calls": 3,
  },
  {
    date: "2023-07-01T00:00:00",
    "Rows written": 2825,
    "Rows read": 19145,
    Queries: 374,
    "Payments completed": 103,
    "Sign ups": 52,
    Logins: 856,
    "Sign outs": 1153,
    "Support calls": 4,
  },
  {
    date: "2023-07-02T00:00:00",
    "Rows written": 2825,
    "Rows read": 18490,
    Queries: 499,
    "Payments completed": 120,
    "Sign ups": 64,
    Logins: 878,
    "Sign outs": 1087,
    "Support calls": 3,
  },
  {
    date: "2023-07-03T00:00:00",
    "Rows written": 2835,
    "Rows read": 18059,
    Queries: 503,
    "Payments completed": 122,
    "Sign ups": 63,
    Logins: 936,
    "Sign outs": 1138,
    "Support calls": 2,
  },
  {
    date: "2023-07-04T00:00:00",
    "Rows written": 2827,
    "Rows read": 18157,
    Queries: 507,
    "Payments completed": 81,
    "Sign ups": 78,
    Logins: 1006,
    "Sign outs": 1100,
    "Support calls": 2,
  },
  {
    date: "2023-07-05T00:00:00",
    "Rows written": 2842,
    "Rows read": 18079,
    Queries: 513,
    "Payments completed": 81,
    "Sign ups": 80,
    Logins: 1049,
    "Sign outs": 1090,
    "Support calls": 2,
  },
  {
    date: "2023-07-06T00:00:00",
    "Rows written": 2834,
    "Rows read": 18317,
    Queries: 515,
    "Payments completed": 86,
    "Sign ups": 62,
    Logins: 1092,
    "Sign outs": 1161,
    "Support calls": 2,
  },
  {
    date: "2023-07-07T00:00:00",
    "Rows written": 2839,
    "Rows read": 18617,
    Queries: 415,
    "Payments completed": 72,
    "Sign ups": 56,
    Logins: 1210,
    "Sign outs": 1179,
    "Support calls": 2,
  },
  {
    date: "2023-07-08T00:00:00",
    "Rows written": 2853,
    "Rows read": 19089,
    Queries: 430,
    "Payments completed": 69,
    "Sign ups": 54,
    Logins: 1292,
    "Sign outs": 1155,
    "Support calls": 3,
  },
  {
    date: "2023-07-09T00:00:00",
    "Rows written": 2850,
    "Rows read": 19081,
    Queries: 488,
    "Payments completed": 89,
    "Sign ups": 63,
    Logins: 1354,
    "Sign outs": 1197,
    "Support calls": 5,
  },
  {
    date: "2023-07-10T00:00:00",
    "Rows written": 2848,
    "Rows read": 19119,
    Queries: 482,
    "Payments completed": 91,
    "Sign ups": 78,
    Logins: 1513,
    "Sign outs": 1188,
    "Support calls": 7,
  },
  {
    date: "2023-07-11T00:00:00",
    "Rows written": 2835,
    "Rows read": 19192,
    Queries: 484,
    "Payments completed": 87,
    "Sign ups": 75,
    Logins: 1546,
    "Sign outs": 1195,
    "Support calls": 8,
  },
  {
    date: "2023-07-12T00:00:00",
    "Rows written": 2833,
    "Rows read": 19322,
    Queries: 484,
    "Payments completed": 85,
    "Sign ups": 78,
    Logins: 1819,
    "Sign outs": 1188,
    "Support calls": 7,
  },
  {
    date: "2023-07-13T00:00:00",
    "Rows written": 2806,
    "Rows read": 19743,
    Queries: 484,
    "Payments completed": 111,
    "Sign ups": 74,
    Logins: 1954,
    "Sign outs": 1185,
    "Support calls": 6,
  },
  {
    date: "2023-07-14T00:00:00",
    "Rows written": 2817,
    "Rows read": 19688,
    Queries: 426,
    "Payments completed": 88,
    "Sign ups": 59,
    Logins: 1701,
    "Sign outs": 1194,
    "Support calls": 3,
  },
  {
    date: "2023-07-15T00:00:00",
    "Rows written": 2795,
    "Rows read": 19641,
    Queries: 367,
    "Payments completed": 101,
    "Sign ups": 55,
    Logins: 1309,
    "Sign outs": 1198,
    "Support calls": 2,
  },
  {
    date: "2023-07-16T00:00:00",
    "Rows written": 2793,
    "Rows read": 19952,
    Queries: 500,
    "Payments completed": 82,
    "Sign ups": 63,
    Logins: 1329,
    "Sign outs": 1183,
    "Support calls": 2,
  },
  {
    date: "2023-07-17T00:00:00",
    "Rows written": 2809,
    "Rows read": 20002,
    Queries: 501,
    "Payments completed": 82,
    "Sign ups": 63,
    Logins: 1447,
    "Sign outs": 1118,
    "Support calls": 2,
  },
  {
    date: "2023-07-18T00:00:00",
    "Rows written": 2798,
    "Rows read": 20051,
    Queries: 497,
    "Payments completed": 88,
    "Sign ups": 74,
    Logins: 1759,
    "Sign outs": 1110,
    "Support calls": 2,
  },
  {
    date: "2023-07-19T00:00:00",
    "Rows written": 2767,
    "Rows read": 19686,
    Queries: 499,
    "Payments completed": 90,
    "Sign ups": 77,
    Logins: 1931,
    "Sign outs": 1189,
    "Support calls": 2,
  },
  {
    date: "2023-07-20T00:00:00",
    "Rows written": 2733,
    "Rows read": 19300,
    Queries: 498,
    "Payments completed": 84,
    "Sign ups": 72,
    Logins: 2044,
    "Sign outs": 1196,
    "Support calls": 2,
  },
  {
    date: "2023-07-21T00:00:00",
    "Rows written": 2704,
    "Rows read": 18593,
    Queries: 440,
    "Payments completed": 66,
    "Sign ups": 67,
    Logins: 2014,
    "Sign outs": 1181,
    "Support calls": 2,
  },
  {
    date: "2023-07-22T00:00:00",
    "Rows written": 2711,
    "Rows read": 18352,
    Queries: 408,
    "Payments completed": 71,
    "Sign ups": 72,
    Logins: 1729,
    "Sign outs": 1148,
    "Support calls": 2,
  },
  {
    date: "2023-07-23T00:00:00",
    "Rows written": 2719,
    "Rows read": 18451,
    Queries: 491,
    "Payments completed": 85,
    "Sign ups": 60,
    Logins: 1423,
    "Sign outs": 1027,
    "Support calls": 3,
  },
  {
    date: "2023-07-24T00:00:00",
    "Rows written": 2708,
    "Rows read": 18006,
    Queries: 490,
    "Payments completed": 109,
    "Sign ups": 66,
    Logins: 1490,
    "Sign outs": 1050,
    "Support calls": 4,
  },
  {
    date: "2023-07-25T00:00:00",
    "Rows written": 2709,
    "Rows read": 18090,
    Queries: 486,
    "Payments completed": 99,
    "Sign ups": 62,
    Logins: 1458,
    "Sign outs": 1022,
    "Support calls": 6,
  },
  {
    date: "2023-07-26T00:00:00",
    "Rows written": 2693,
    "Rows read": 18102,
    Queries: 480,
    "Payments completed": 87,
    "Sign ups": 61,
    Logins: 1156,
    "Sign outs": 953,
    "Support calls": 4,
  },
  {
    date: "2023-07-27T00:00:00",
    "Rows written": 2680,
    "Rows read": 18083,
    Queries: 480,
    "Payments completed": 96,
    "Sign ups": 80,
    Logins: 1031,
    "Sign outs": 907,
    "Support calls": 4,
  },
  {
    date: "2023-07-28T00:00:00",
    "Rows written": 2663,
    "Rows read": 18029,
    Queries: 370,
    "Payments completed": 93,
    "Sign ups": 60,
    Logins: 966,
    "Sign outs": 903,
    "Support calls": 5,
  },
  {
    date: "2023-07-29T00:00:00",
    "Rows written": 2630,
    "Rows read": 18005,
    Queries: 383,
    "Payments completed": 99,
    "Sign ups": 57,
    Logins: 896,
    "Sign outs": 918,
    "Support calls": 7,
  },
  {
    date: "2023-07-30T00:00:00",
    "Rows written": 2606,
    "Rows read": 18020,
    Queries: 496,
    "Payments completed": 124,
    "Sign ups": 66,
    Logins: 1026,
    "Sign outs": 922,
    "Support calls": 9,
  },
  {
    date: "2023-07-31T00:00:00",
    "Rows written": 2575,
    "Rows read": 18242,
    Queries: 501,
    "Payments completed": 124,
    "Sign ups": 60,
    Logins: 961,
    "Sign outs": 915,
    "Support calls": 10,
  },
  {
    date: "2023-08-01T00:00:00",
    "Rows written": 2573,
    "Rows read": 18143,
    Queries: 501,
    "Payments completed": 89,
    "Sign ups": 60,
    Logins: 850,
    "Sign outs": 913,
    "Support calls": 15,
  },
  {
    date: "2023-08-02T00:00:00",
    "Rows written": 2592,
    "Rows read": 18373,
    Queries: 505,
    "Payments completed": 114,
    "Sign ups": 61,
    Logins: 868,
    "Sign outs": 901,
    "Support calls": 18,
  },
  {
    date: "2023-08-03T00:00:00",
    "Rows written": 2592,
    "Rows read": 19002,
    Queries: 506,
    "Payments completed": 123,
    "Sign ups": 77,
    Logins: 939,
    "Sign outs": 965,
    "Support calls": 17,
  },
  {
    date: "2023-08-04T00:00:00",
    "Rows written": 2593,
    "Rows read": 19427,
    Queries: 393,
    "Payments completed": 79,
    "Sign ups": 48,
    Logins: 852,
    "Sign outs": 970,
    "Support calls": 16,
  },
  {
    date: "2023-08-05T00:00:00",
    "Rows written": 2584,
    "Rows read": 19210,
    Queries: 416,
    "Payments completed": 78,
    "Sign ups": 52,
    Logins: 867,
    "Sign outs": 1040,
    "Support calls": 8,
  },
  {
    date: "2023-08-06T00:00:00",
    "Rows written": 2575,
    "Rows read": 18862,
    Queries: 491,
    "Payments completed": 100,
    "Sign ups": 65,
    Logins: 845,
    "Sign outs": 993,
    "Support calls": 5,
  },
  {
    date: "2023-08-07T00:00:00",
    "Rows written": 2583,
    "Rows read": 18581,
    Queries: 485,
    "Payments completed": 122,
    "Sign ups": 78,
    Logins: 899,
    "Sign outs": 905,
    "Support calls": 5,
  },
  {
    date: "2023-08-08T00:00:00",
    "Rows written": 2589,
    "Rows read": 18022,
    Queries: 481,
    "Payments completed": 117,
    "Sign ups": 72,
    Logins: 941,
    "Sign outs": 926,
    "Support calls": 6,
  },
  {
    date: "2023-08-09T00:00:00",
    "Rows written": 2582,
    "Rows read": 18144,
    Queries: 480,
    "Payments completed": 86,
    "Sign ups": 73,
    Logins: 1132,
    "Sign outs": 903,
    "Support calls": 5,
  },
  {
    date: "2023-08-10T00:00:00",
    "Rows written": 2558,
    "Rows read": 18725,
    Queries: 478,
    "Payments completed": 83,
    "Sign ups": 80,
    Logins: 1101,
    "Sign outs": 902,
    "Support calls": 4,
  },
  {
    date: "2023-08-11T00:00:00",
    "Rows written": 2522,
    "Rows read": 18465,
    Queries: 370,
    "Payments completed": 66,
    "Sign ups": 68,
    Logins: 993,
    "Sign outs": 967,
    "Support calls": 4,
  },
  {
    date: "2023-08-12T00:00:00",
    "Rows written": 2504,
    "Rows read": 18008,
    Queries: 444,
    "Payments completed": 67,
    "Sign ups": 70,
    Logins: 858,
    "Sign outs": 1055,
    "Support calls": 3,
  },
  {
    date: "2023-08-13T00:00:00",
    "Rows written": 2507,
    "Rows read": 18027,
    Queries: 486,
    "Payments completed": 88,
    "Sign ups": 78,
    Logins: 885,
    "Sign outs": 1120,
    "Support calls": 3,
  },
  {
    date: "2023-08-14T00:00:00",
    "Rows written": 2506,
    "Rows read": 18071,
    Queries: 482,
    "Payments completed": 107,
    "Sign ups": 77,
    Logins: 912,
    "Sign outs": 1193,
    "Support calls": 4,
  },
  {
    date: "2023-08-15T00:00:00",
    "Rows written": 2503,
    "Rows read": 18024,
    Queries: 482,
    "Payments completed": 80,
    "Sign ups": 76,
    Logins: 845,
    "Sign outs": 1193,
    "Support calls": 5,
  },
  {
    date: "2023-08-16T00:00:00",
    "Rows written": 2502,
    "Rows read": 18038,
    Queries: 480,
    "Payments completed": 89,
    "Sign ups": 79,
    Logins: 846,
    "Sign outs": 1161,
    "Support calls": 4,
  },
  {
    date: "2023-08-17T00:00:00",
    "Rows written": 2503,
    "Rows read": 18118,
    Queries: 478,
    "Payments completed": 83,
    "Sign ups": 72,
    Logins: 867,
    "Sign outs": 1189,
    "Support calls": 3,
  },
  {
    date: "2023-08-18T00:00:00",
    "Rows written": 2509,
    "Rows read": 18050,
    Queries: 405,
    "Payments completed": 82,
    "Sign ups": 58,
    Logins: 984,
    "Sign outs": 1177,
    "Support calls": 3,
  },
  {
    date: "2023-08-19T00:00:00",
    "Rows written": 2500,
    "Rows read": 18011,
    Queries: 383,
    "Payments completed": 97,
    "Sign ups": 59,
    Logins: 1006,
    "Sign outs": 1176,
    "Support calls": 3,
  },
  {
    date: "2023-08-20T00:00:00",
    "Rows written": 2505,
    "Rows read": 18215,
    Queries: 497,
    "Payments completed": 96,
    "Sign ups": 78,
    Logins: 975,
    "Sign outs": 1200,
    "Support calls": 4,
  },
  {
    date: "2023-08-21T00:00:00",
    "Rows written": 2512,
    "Rows read": 18186,
    Queries: 499,
    "Payments completed": 80,
    "Sign ups": 68,
    Logins: 976,
    "Sign outs": 1148,
    "Support calls": 4,
  },
  {
    date: "2023-08-22T00:00:00",
    "Rows written": 2501,
    "Rows read": 18401,
    Queries: 501,
    "Payments completed": 80,
    "Sign ups": 74,
    Logins: 1084,
    "Sign outs": 1196,
    "Support calls": 5,
  },
  {
    date: "2023-08-23T00:00:00",
    "Rows written": 2501,
    "Rows read": 18519,
    Queries: 499,
    "Payments completed": 96,
    "Sign ups": 76,
    Logins: 1130,
    "Sign outs": 1118,
    "Support calls": 6,
  },
  {
    date: "2023-08-24T00:00:00",
    "Rows written": 2508,
    "Rows read": 18913,
    Queries: 501,
    "Payments completed": 104,
    "Sign ups": 75,
    Logins: 944,
    "Sign outs": 1042,
    "Support calls": 9,
  },
  {
    date: "2023-08-25T00:00:00",
    "Rows written": 2502,
    "Rows read": 19306,
    Queries: 426,
    "Payments completed": 84,
    "Sign ups": 66,
    Logins: 872,
    "Sign outs": 960,
    "Support calls": 9,
  },
  {
    date: "2023-08-26T00:00:00",
    "Rows written": 2506,
    "Rows read": 19592,
    Queries: 436,
    "Payments completed": 85,
    "Sign ups": 54,
    Logins: 858,
    "Sign outs": 994,
    "Support calls": 9,
  },
  {
    date: "2023-08-27T00:00:00",
    "Rows written": 2501,
    "Rows read": 19482,
    Queries: 486,
    "Payments completed": 111,
    "Sign ups": 61,
    Logins: 861,
    "Sign outs": 981,
    "Support calls": 11,
  },
  {
    date: "2023-08-28T00:00:00",
    "Rows written": 2505,
    "Rows read": 19193,
    Queries: 483,
    "Payments completed": 82,
    "Sign ups": 77,
    Logins: 922,
    "Sign outs": 979,
    "Support calls": 12,
  },
  {
    date: "2023-08-29T00:00:00",
    "Rows written": 2505,
    "Rows read": 19224,
    Queries: 482,
    "Payments completed": 112,
    "Sign ups": 64,
    Logins: 935,
    "Sign outs": 1026,
    "Support calls": 9,
  },
  {
    date: "2023-08-30T00:00:00",
    "Rows written": 2515,
    "Rows read": 18795,
    Queries: 482,
    "Payments completed": 123,
    "Sign ups": 62,
    Logins: 845,
    "Sign outs": 1061,
    "Support calls": 10,
  },
  {
    date: "2023-08-31T00:00:00",
    "Rows written": 2515,
    "Rows read": 18658,
    Queries: 479,
    "Payments completed": 112,
    "Sign ups": 64,
    Logins: 932,
    "Sign outs": 1026,
    "Support calls": 15,
  },
  {
    date: "2023-09-01T00:00:00",
    "Rows written": 2500,
    "Rows read": 18864,
    Queries: 408,
    "Payments completed": 78,
    "Sign ups": 60,
    Logins: 958,
    "Sign outs": 1054,
    "Support calls": 16,
  },
  {
    date: "2023-09-02T00:00:00",
    "Rows written": 2506,
    "Rows read": 19030,
    Queries: 416,
    "Payments completed": 71,
    "Sign ups": 49,
    Logins: 943,
    "Sign outs": 1021,
    "Support calls": 12,
  },
  {
    date: "2023-09-03T00:00:00",
    "Rows written": 2507,
    "Rows read": 18759,
    Queries: 491,
    "Payments completed": 87,
    "Sign ups": 61,
    Logins: 863,
    "Sign outs": 971,
    "Support calls": 10,
  },
  {
    date: "2023-09-04T00:00:00",
    "Rows written": 2508,
    "Rows read": 19168,
    Queries: 492,
    "Payments completed": 88,
    "Sign ups": 79,
    Logins: 846,
    "Sign outs": 969,
    "Support calls": 8,
  },
  {
    date: "2023-09-05T00:00:00",
    "Rows written": 2514,
    "Rows read": 19384,
    Queries: 496,
    "Payments completed": 84,
    "Sign ups": 71,
    Logins: 880,
    "Sign outs": 1025,
    "Support calls": 6,
  },
  {
    date: "2023-09-06T00:00:00",
    "Rows written": 2541,
    "Rows read": 18965,
    Queries: 496,
    "Payments completed": 81,
    "Sign ups": 62,
    Logins: 852,
    "Sign outs": 999,
    "Support calls": 6,
  },
  {
    date: "2023-09-07T00:00:00",
    "Rows written": 2531,
    "Rows read": 18810,
    Queries: 498,
    "Payments completed": 80,
    "Sign ups": 67,
    Logins: 856,
    "Sign outs": 946,
    "Support calls": 8,
  },
  {
    date: "2023-09-08T00:00:00",
    "Rows written": 2505,
    "Rows read": 18734,
    Queries: 378,
    "Payments completed": 67,
    "Sign ups": 50,
    Logins: 931,
    "Sign outs": 962,
    "Support calls": 6,
  },
  {
    date: "2023-09-09T00:00:00",
    "Rows written": 2502,
    "Rows read": 18705,
    Queries: 445,
    "Payments completed": 83,
    "Sign ups": 52,
    Logins: 989,
    "Sign outs": 908,
    "Support calls": 3,
  },
  {
    date: "2023-09-10T00:00:00",
    "Rows written": 2513,
    "Rows read": 19192,
    Queries: 484,
    "Payments completed": 83,
    "Sign ups": 61,
    Logins: 1148,
    "Sign outs": 901,
    "Support calls": 3,
  },
  {
    date: "2023-09-11T00:00:00",
    "Rows written": 2540,
    "Rows read": 19588,
    Queries: 484,
    "Payments completed": 92,
    "Sign ups": 79,
    Logins: 1198,
    "Sign outs": 918,
    "Support calls": 3,
  },
  {
    date: "2023-09-12T00:00:00",
    "Rows written": 2570,
    "Rows read": 20135,
    Queries: 487,
    "Payments completed": 82,
    "Sign ups": 80,
    Logins: 1104,
    "Sign outs": 907,
    "Support calls": 4,
  },
  {
    date: "2023-09-13T00:00:00",
    "Rows written": 2571,
    "Rows read": 20847,
    Queries: 490,
    "Payments completed": 88,
    "Sign ups": 77,
    Logins: 1082,
    "Sign outs": 916,
    "Support calls": 4,
  },
  {
    date: "2023-09-14T00:00:00",
    "Rows written": 2549,
    "Rows read": 21778,
    Queries: 494,
    "Payments completed": 85,
    "Sign ups": 79,
    Logins: 1119,
    "Sign outs": 901,
    "Support calls": 4,
  },
  {
    date: "2023-09-15T00:00:00",
    "Rows written": 2535,
    "Rows read": 21650,
    Queries: 412,
    "Payments completed": 64,
    "Sign ups": 54,
    Logins: 1074,
    "Sign outs": 911,
    "Support calls": 3,
  },
  {
    date: "2023-09-16T00:00:00",
    "Rows written": 2544,
    "Rows read": 20967,
    Queries: 431,
    "Payments completed": 73,
    "Sign ups": 56,
    Logins: 1132,
    "Sign outs": 913,
    "Support calls": 2,
  },
  {
    date: "2023-09-17T00:00:00",
    "Rows written": 2547,
    "Rows read": 20966,
    Queries: 489,
    "Payments completed": 115,
    "Sign ups": 67,
    Logins: 1260,
    "Sign outs": 916,
    "Support calls": 2,
  },
  {
    date: "2023-09-18T00:00:00",
    "Rows written": 2539,
    "Rows read": 21347,
    Queries: 487,
    "Payments completed": 115,
    "Sign ups": 76,
    Logins: 1292,
    "Sign outs": 914,
    "Support calls": 2,
  },
  {
    date: "2023-09-19T00:00:00",
    "Rows written": 2524,
    "Rows read": 22148,
    Queries: 489,
    "Payments completed": 115,
    "Sign ups": 66,
    Logins: 1128,
    "Sign outs": 903,
    "Support calls": 3,
  },
  {
    date: "2023-09-20T00:00:00",
    "Rows written": 2519,
    "Rows read": 21947,
    Queries: 488,
    "Payments completed": 118,
    "Sign ups": 68,
    Logins: 1196,
    "Sign outs": 970,
    "Support calls": 4,
  },
  {
    date: "2023-09-21T00:00:00",
    "Rows written": 2529,
    "Rows read": 22192,
    Queries: 487,
    "Payments completed": 85,
    "Sign ups": 65,
    Logins: 1268,
    "Sign outs": 953,
    "Support calls": 4,
  },
  {
    date: "2023-09-22T00:00:00",
    "Rows written": 2510,
    "Rows read": 22218,
    Queries: 397,
    "Payments completed": 73,
    "Sign ups": 54,
    Logins: 1184,
    "Sign outs": 927,
    "Support calls": 3,
  },
  {
    date: "2023-09-23T00:00:00",
    "Rows written": 2522,
    "Rows read": 22302,
    Queries: 374,
    "Payments completed": 70,
    "Sign ups": 55,
    Logins: 931,
    "Sign outs": 998,
    "Support calls": 2,
  },
  {
    date: "2023-09-24T00:00:00",
    "Rows written": 2547,
    "Rows read": 22352,
    Queries: 498,
    "Payments completed": 103,
    "Sign ups": 80,
    Logins: 950,
    "Sign outs": 1075,
    "Support calls": 2,
  },
  {
    date: "2023-09-25T00:00:00",
    "Rows written": 2538,
    "Rows read": 22820,
    Queries: 500,
    "Payments completed": 124,
    "Sign ups": 69,
    Logins: 1131,
    "Sign outs": 1099,
    "Support calls": 2,
  },
  {
    date: "2023-09-26T00:00:00",
    "Rows written": 2514,
    "Rows read": 22707,
    Queries: 499,
    "Payments completed": 112,
    "Sign ups": 67,
    Logins: 1013,
    "Sign outs": 1200,
    "Support calls": 2,
  },
  {
    date: "2023-09-27T00:00:00",
    "Rows written": 2503,
    "Rows read": 22818,
    Queries: 495,
    "Payments completed": 118,
    "Sign ups": 74,
    Logins: 1053,
    "Sign outs": 1174,
    "Support calls": 2,
  },
  {
    date: "2023-09-28T00:00:00",
    "Rows written": 2505,
    "Rows read": 22403,
    Queries: 497,
    "Payments completed": 118,
    "Sign ups": 78,
    Logins: 1065,
    "Sign outs": 1181,
    "Support calls": 2,
  },
  {
    date: "2023-09-29T00:00:00",
    "Rows written": 2501,
    "Rows read": 22182,
    Queries: 435,
    "Payments completed": 71,
    "Sign ups": 61,
    Logins: 916,
    "Sign outs": 1179,
    "Support calls": 2,
  },
  {
    date: "2023-09-30T00:00:00",
    "Rows written": 2504,
    "Rows read": 22135,
    Queries: 418,
    "Payments completed": 76,
    "Sign ups": 48,
    Logins: 845,
    "Sign outs": 1198,
    "Support calls": 3,
  },
  {
    date: "2023-10-01T00:00:00",
    "Rows written": 2504,
    "Rows read": 21827,
    Queries: 490,
    "Payments completed": 90,
    "Sign ups": 64,
    Logins: 891,
    "Sign outs": 1189,
    "Support calls": 3,
  },
  {
    date: "2023-10-02T00:00:00",
    "Rows written": 2511,
    "Rows read": 21733,
    Queries: 489,
    "Payments completed": 86,
    "Sign ups": 62,
    Logins: 889,
    "Sign outs": 1186,
    "Support calls": 4,
  },
  {
    date: "2023-10-03T00:00:00",
    "Rows written": 2533,
    "Rows read": 21655,
    Queries: 487,
    "Payments completed": 81,
    "Sign ups": 61,
    Logins: 1002,
    "Sign outs": 1173,
    "Support calls": 4,
  },
  {
    date: "2023-10-04T00:00:00",
    "Rows written": 2551,
    "Rows read": 22072,
    Queries: 490,
    "Payments completed": 103,
    "Sign ups": 64,
    Logins: 887,
    "Sign outs": 1151,
    "Support calls": 6,
  },
  {
    date: "2023-10-05T00:00:00",
    "Rows written": 2568,
    "Rows read": 22724,
    Queries: 489,
    "Payments completed": 83,
    "Sign ups": 63,
    Logins: 863,
    "Sign outs": 1063,
    "Support calls": 9,
  },
  {
    date: "2023-10-06T00:00:00",
    "Rows written": 2588,
    "Rows read": 23121,
    Queries: 378,
    "Payments completed": 92,
    "Sign ups": 49,
    Logins: 849,
    "Sign outs": 1117,
    "Support calls": 11,
  },
  {
    date: "2023-10-07T00:00:00",
    "Rows written": 2609,
    "Rows read": 23546,
    Queries: 447,
    "Payments completed": 68,
    "Sign ups": 54,
    Logins: 924,
    "Sign outs": 1196,
    "Support calls": 13,
  },
  {
    date: "2023-10-08T00:00:00",
    "Rows written": 2619,
    "Rows read": 23939,
    Queries: 485,
    "Payments completed": 81,
    "Sign ups": 61,
    Logins: 1026,
    "Sign outs": 1180,
    "Support calls": 14,
  },
  {
    date: "2023-10-09T00:00:00",
    "Rows written": 2613,
    "Rows read": 24842,
    Queries: 487,
    "Payments completed": 121,
    "Sign ups": 64,
    Logins: 1006,
    "Sign outs": 1181,
    "Support calls": 12,
  },
  {
    date: "2023-10-10T00:00:00",
    "Rows written": 2626,
    "Rows read": 25404,
    Queries: 490,
    "Payments completed": 98,
    "Sign ups": 66,
    Logins: 1027,
    "Sign outs": 1183,
    "Support calls": 13,
  },
  {
    date: "2023-10-11T00:00:00",
    "Rows written": 2639,
    "Rows read": 25232,
    Queries: 488,
    "Payments completed": 117,
    "Sign ups": 66,
    Logins: 983,
    "Sign outs": 1188,
    "Support calls": 11,
  },
  {
    date: "2023-10-12T00:00:00",
    "Rows written": 2643,
    "Rows read": 24786,
    Queries: 489,
    "Payments completed": 99,
    "Sign ups": 79,
    Logins: 848,
    "Sign outs": 1187,
    "Support calls": 12,
  },
  {
    date: "2023-10-13T00:00:00",
    "Rows written": 2666,
    "Rows read": 24905,
    Queries: 381,
    "Payments completed": 67,
    "Sign ups": 59,
    Logins: 857,
    "Sign outs": 1179,
    "Support calls": 7,
  },
  {
    date: "2023-10-14T00:00:00",
    "Rows written": 2703,
    "Rows read": 24710,
    Queries: 430,
    "Payments completed": 67,
    "Sign ups": 57,
    Logins: 928,
    "Sign outs": 1188,
    "Support calls": 3,
  },
  {
    date: "2023-10-15T00:00:00",
    "Rows written": 2729,
    "Rows read": 25132,
    Queries: 488,
    "Payments completed": 99,
    "Sign ups": 64,
    Logins: 845,
    "Sign outs": 1179,
    "Support calls": 2,
  },
  {
    date: "2023-10-16T00:00:00",
    "Rows written": 2737,
    "Rows read": 24724,
    Queries: 487,
    "Payments completed": 119,
    "Sign ups": 64,
    Logins: 879,
    "Sign outs": 1182,
    "Support calls": 2,
  },
  {
    date: "2023-10-17T00:00:00",
    "Rows written": 2730,
    "Rows read": 25172,
    Queries: 486,
    "Payments completed": 119,
    "Sign ups": 64,
    Logins: 862,
    "Sign outs": 1139,
    "Support calls": 2,
  },
  {
    date: "2023-10-18T00:00:00",
    "Rows written": 2737,
    "Rows read": 25762,
    Queries: 485,
    "Payments completed": 121,
    "Sign ups": 62,
    Logins: 895,
    "Sign outs": 1057,
    "Support calls": 2,
  },
  {
    date: "2023-10-19T00:00:00",
    "Rows written": 2738,
    "Rows read": 25469,
    Queries: 487,
    "Payments completed": 97,
    "Sign ups": 64,
    Logins: 998,
    "Sign outs": 1100,
    "Support calls": 2,
  },
  {
    date: "2023-10-20T00:00:00",
    "Rows written": 2724,
    "Rows read": 25948,
    Queries: 409,
    "Payments completed": 70,
    "Sign ups": 67,
    Logins: 940,
    "Sign outs": 1176,
    "Support calls": 2,
  },
  {
    date: "2023-10-21T00:00:00",
    "Rows written": 2722,
    "Rows read": 26662,
    Queries: 401,
    "Payments completed": 69,
    "Sign ups": 61,
    Logins: 971,
    "Sign outs": 1101,
    "Support calls": 2,
  },
  {
    date: "2023-10-22T00:00:00",
    "Rows written": 2737,
    "Rows read": 27288,
    Queries: 493,
    "Payments completed": 98,
    "Sign ups": 69,
    Logins: 924,
    "Sign outs": 1139,
    "Support calls": 2,
  },
  {
    date: "2023-10-23T00:00:00",
    "Rows written": 2737,
    "Rows read": 26813,
    Queries: 493,
    "Payments completed": 119,
    "Sign ups": 63,
    Logins: 844,
    "Sign outs": 1167,
    "Support calls": 3,
  },
  {
    date: "2023-10-24T00:00:00",
    "Rows written": 2755,
    "Rows read": 27228,
    Queries: 493,
    "Payments completed": 113,
    "Sign ups": 78,
    Logins: 879,
    "Sign outs": 1193,
    "Support calls": 3,
  },
  {
    date: "2023-10-25T00:00:00",
    "Rows written": 2742,
    "Rows read": 26723,
    Queries: 494,
    "Payments completed": 102,
    "Sign ups": 75,
    Logins: 871,
    "Sign outs": 1095,
    "Support calls": 2,
  },
  {
    date: "2023-10-26T00:00:00",
    "Rows written": 2715,
    "Rows read": 26364,
    Queries: 494,
    "Payments completed": 121,
    "Sign ups": 75,
    Logins: 961,
    "Sign outs": 1022,
    "Support calls": 2,
  },
  {
    date: "2023-10-27T00:00:00",
    "Rows written": 2692,
    "Rows read": 26686,
    Queries: 442,
    "Payments completed": 94,
    "Sign ups": 63,
    Logins: 848,
    "Sign outs": 1015,
    "Support calls": 2,
  },
  {
    date: "2023-10-28T00:00:00",
    "Rows written": 2690,
    "Rows read": 26161,
    Queries: 389,
    "Payments completed": 108,
    "Sign ups": 48,
    Logins: 857,
    "Sign outs": 1061,
    "Support calls": 2,
  },
  {
    date: "2023-10-30T00:00:00",
    "Rows written": 2710,
    "Rows read": 25456,
    Queries: 496,
    "Payments completed": 94,
    "Sign ups": 62,
    Logins: 874,
    "Sign outs": 1028,
    "Support calls": 2,
  },
  {
    date: "2023-10-31T00:00:00",
    "Rows written": 2728,
    "Rows read": 24798,
    Queries: 493,
    "Payments completed": 85,
    "Sign ups": 68,
    Logins: 933,
    "Sign outs": 1044,
    "Support calls": 2,
  },
  {
    date: "2023-11-01T00:00:00",
    "Rows written": 2756,
    "Rows read": 25010,
    Queries: 496,
    "Payments completed": 90,
    "Sign ups": 71,
    Logins: 845,
    "Sign outs": 955,
    "Support calls": 2,
  },
  {
    date: "2023-11-02T00:00:00",
    "Rows written": 2744,
    "Rows read": 25796,
    Queries: 493,
    "Payments completed": 81,
    "Sign ups": 64,
    Logins: 861,
    "Sign outs": 908,
    "Support calls": 2,
  },
  {
    date: "2023-11-03T00:00:00",
    "Rows written": 2730,
    "Rows read": 25748,
    Queries: 490,
    "Payments completed": 85,
    "Sign ups": 77,
    Logins: 984,
    "Sign outs": 931,
    "Support calls": 3,
  },
  {
    date: "2023-11-04T00:00:00",
    "Rows written": 2745,
    "Rows read": 26054,
    Queries: 412,
    "Payments completed": 81,
    "Sign ups": 64,
    Logins: 955,
    "Sign outs": 911,
    "Support calls": 2,
  },
  {
    date: "2023-11-05T00:00:00",
    "Rows written": 2760,
    "Rows read": 25986,
    Queries: 436,
    "Payments completed": 96,
    "Sign ups": 58,
    Logins: 920,
    "Sign outs": 985,
    "Support calls": 2,
  },
  {
    date: "2023-11-06T00:00:00",
    "Rows written": 2769,
    "Rows read": 25393,
    Queries: 486,
    "Payments completed": 95,
    "Sign ups": 64,
    Logins: 855,
    "Sign outs": 1115,
    "Support calls": 2,
  },
  {
    date: "2023-11-07T00:00:00",
    "Rows written": 2748,
    "Rows read": 24541,
    Queries: 491,
    "Payments completed": 84,
    "Sign ups": 75,
    Logins: 861,
    "Sign outs": 1162,
    "Support calls": 2,
  },
  {
    date: "2023-11-08T00:00:00",
    "Rows written": 2751,
    "Rows read": 24743,
    Queries: 496,
    "Payments completed": 93,
    "Sign ups": 70,
    Logins: 953,
    "Sign outs": 1187,
    "Support calls": 2,
  },
  {
    date: "2023-11-09T00:00:00",
    "Rows written": 2754,
    "Rows read": 24904,
    Queries: 503,
    "Payments completed": 121,
    "Sign ups": 63,
    Logins: 861,
    "Sign outs": 1188,
    "Support calls": 2,
  },
  {
    date: "2023-11-10T00:00:00",
    "Rows written": 2778,
    "Rows read": 24773,
    Queries: 504,
    "Payments completed": 122,
    "Sign ups": 64,
    Logins: 872,
    "Sign outs": 1152,
    "Support calls": 2,
  },
  {
    date: "2023-11-11T00:00:00",
    "Rows written": 2816,
    "Rows read": 23992,
    Queries: 381,
    "Payments completed": 93,
    "Sign ups": 59,
    Logins: 936,
    "Sign outs": 1087,
    "Support calls": 2,
  },
  {
    date: "2023-11-12T00:00:00",
    "Rows written": 2823,
    "Rows read": 23135,
    Queries: 401,
    "Payments completed": 65,
    "Sign ups": 54,
    Logins: 987,
    "Sign outs": 1011,
    "Support calls": 2,
  },
  {
    date: "2023-11-13T00:00:00",
    "Rows written": 2843,
    "Rows read": 22986,
    Queries: 494,
    "Payments completed": 84,
    "Sign ups": 60,
    Logins: 959,
    "Sign outs": 902,
    "Support calls": 2,
  },
  {
    date: "2023-11-14T00:00:00",
    "Rows written": 2865,
    "Rows read": 22974,
    Queries: 492,
    "Payments completed": 81,
    "Sign ups": 69,
    Logins: 998,
    "Sign outs": 909,
    "Support calls": 2,
  },
  {
    date: "2023-11-15T00:00:00",
    "Rows written": 2871,
    "Rows read": 23523,
    Queries: 490,
    "Payments completed": 85,
    "Sign ups": 79,
    Logins: 871,
    "Sign outs": 970,
    "Support calls": 2,
  },
  {
    date: "2023-11-16T00:00:00",
    "Rows written": 2848,
    "Rows read": 23927,
    Queries: 485,
    "Payments completed": 91,
    "Sign ups": 76,
    Logins: 854,
    "Sign outs": 1077,
    "Support calls": 2,
  },
  {
    date: "2023-11-17T00:00:00",
    "Rows written": 2843,
    "Rows read": 23635,
    Queries: 484,
    "Payments completed": 86,
    "Sign ups": 77,
    Logins: 883,
    "Sign outs": 1060,
    "Support calls": 2,
  },
  {
    date: "2023-11-18T00:00:00",
    "Rows written": 2857,
    "Rows read": 23801,
    Queries: 423,
    "Payments completed": 73,
    "Sign ups": 61,
    Logins: 844,
    "Sign outs": 960,
    "Support calls": 2,
  },
  {
    date: "2023-11-19T00:00:00",
    "Rows written": 2890,
    "Rows read": 23932,
    Queries: 410,
    "Payments completed": 70,
    "Sign ups": 51,
    Logins: 881,
    "Sign outs": 935,
    "Support calls": 2,
  },
  {
    date: "2023-11-20T00:00:00",
    "Rows written": 2928,
    "Rows read": 24512,
    Queries: 492,
    "Payments completed": 91,
    "Sign ups": 69,
    Logins: 891,
    "Sign outs": 911,
    "Support calls": 2,
  },
  {
    date: "2023-11-21T00:00:00",
    "Rows written": 2929,
    "Rows read": 24943,
    Queries: 487,
    "Payments completed": 85,
    "Sign ups": 61,
    Logins: 865,
    "Sign outs": 917,
    "Support calls": 2,
  },
  {
    date: "2023-11-22T00:00:00",
    "Rows written": 2927,
    "Rows read": 25053,
    Queries: 484,
    "Payments completed": 108,
    "Sign ups": 61,
    Logins: 859,
    "Sign outs": 904,
    "Support calls": 2,
  },
  {
    date: "2023-11-23T00:00:00",
    "Rows written": 2936,
    "Rows read": 25126,
    Queries: 479,
    "Payments completed": 116,
    "Sign ups": 64,
    Logins: 863,
    "Sign outs": 934,
    "Support calls": 2,
  },
  {
    date: "2023-11-24T00:00:00",
    "Rows written": 2939,
    "Rows read": 24528,
    Queries: 479,
    "Payments completed": 93,
    "Sign ups": 60,
    Logins: 869,
    "Sign outs": 982,
    "Support calls": 2,
  },
  {
    date: "2023-11-25T00:00:00",
    "Rows written": 2917,
    "Rows read": 24379,
    Queries: 366,
    "Payments completed": 64,
    "Sign ups": 50,
    Logins: 870,
    "Sign outs": 927,
    "Support calls": 2,
  },
  {
    date: "2023-11-26T00:00:00",
    "Rows written": 2923,
    "Rows read": 24301,
    Queries: 437,
    "Payments completed": 64,
    "Sign ups": 52,
    Logins: 866,
    "Sign outs": 904,
    "Support calls": 2,
  },
  {
    date: "2023-11-27T00:00:00",
    "Rows written": 2907,
    "Rows read": 24537,
    Queries: 486,
    "Payments completed": 81,
    "Sign ups": 64,
    Logins: 876,
    "Sign outs": 903,
    "Support calls": 3,
  },
  {
    date: "2023-11-28T00:00:00",
    "Rows written": 2919,
    "Rows read": 25358,
    Queries: 486,
    "Payments completed": 124,
    "Sign ups": 68,
    Logins: 1032,
    "Sign outs": 915,
    "Support calls": 4,
  },
  {
    date: "2023-11-29T00:00:00",
    "Rows written": 2949,
    "Rows read": 25428,
    Queries: 482,
    "Payments completed": 113,
    "Sign ups": 64,
    Logins: 1285,
    "Sign outs": 951,
    "Support calls": 4,
  },
  {
    date: "2023-11-30T00:00:00",
    "Rows written": 2957,
    "Rows read": 25179,
    Queries: 478,
    "Payments completed": 121,
    "Sign ups": 66,
    Logins: 1697,
    "Sign outs": 977,
    "Support calls": 4,
  },
  {
    date: "2023-12-01T00:00:00",
    "Rows written": 2937,
    "Rows read": 24846,
    Queries: 478,
    "Payments completed": 117,
    "Sign ups": 63,
    Logins: 2012,
    "Sign outs": 958,
    "Support calls": 5,
  },
  {
    date: "2023-12-02T00:00:00",
    "Rows written": 2949,
    "Rows read": 24979,
    Queries: 359,
    "Payments completed": 106,
    "Sign ups": 49,
    Logins: 2006,
    "Sign outs": 904,
    "Support calls": 6,
  },
  {
    date: "2023-12-03T00:00:00",
    "Rows written": 2941,
    "Rows read": 25038,
    Queries: 442,
    "Payments completed": 104,
    "Sign ups": 45,
    Logins: 1794,
    "Sign outs": 921,
    "Support calls": 4,
  },
  {
    date: "2023-12-04T00:00:00",
    "Rows written": 2951,
    "Rows read": 24652,
    Queries: 486,
    "Payments completed": 116,
    "Sign ups": 66,
    Logins: 1765,
    "Sign outs": 913,
    "Support calls": 4,
  },
  {
    date: "2023-12-05T00:00:00",
    "Rows written": 2941,
    "Rows read": 23863,
    Queries: 487,
    "Payments completed": 96,
    "Sign ups": 68,
    Logins: 1841,
    "Sign outs": 920,
    "Support calls": 4,
  },
  {
    date: "2023-12-06T00:00:00",
    "Rows written": 2941,
    "Rows read": 23307,
    Queries: 490,
    "Payments completed": 82,
    "Sign ups": 63,
    Logins: 2022,
    "Sign outs": 905,
    "Support calls": 2,
  },
  {
    date: "2023-12-07T00:00:00",
    "Rows written": 2950,
    "Rows read": 23317,
    Queries: 489,
    "Payments completed": 84,
    "Sign ups": 76,
    Logins: 1973,
    "Sign outs": 918,
    "Support calls": 2,
  },
  {
    date: "2023-12-08T00:00:00",
    "Rows written": 2943,
    "Rows read": 23254,
    Queries: 484,
    "Payments completed": 82,
    "Sign ups": 73,
    Logins: 1786,
    "Sign outs": 934,
    "Support calls": 2,
  },
  {
    date: "2023-12-09T00:00:00",
    "Rows written": 2945,
    "Rows read": 22527,
    Queries: 428,
    "Payments completed": 84,
    "Sign ups": 55,
    Logins: 1533,
    "Sign outs": 970,
    "Support calls": 2,
  },
  {
    date: "2023-12-10T00:00:00",
    "Rows written": 2960,
    "Rows read": 22319,
    Queries: 409,
    "Payments completed": 106,
    "Sign ups": 48,
    Logins: 1279,
    "Sign outs": 1041,
    "Support calls": 2,
  },
  {
    date: "2023-12-11T00:00:00",
    "Rows written": 2983,
    "Rows read": 21870,
    Queries: 491,
    "Payments completed": 90,
    "Sign ups": 64,
    Logins: 1018,
    "Sign outs": 986,
    "Support calls": 2,
  },
  {
    date: "2023-12-12T00:00:00",
    "Rows written": 2991,
    "Rows read": 21482,
    Queries: 492,
    "Payments completed": 80,
    "Sign ups": 78,
    Logins: 973,
    "Sign outs": 933,
    "Support calls": 2,
  },
  {
    date: "2023-12-13T00:00:00",
    "Rows written": 2991,
    "Rows read": 21630,
    Queries: 497,
    "Payments completed": 84,
    "Sign ups": 73,
    Logins: 857,
    "Sign outs": 973,
    "Support calls": 3,
  },
  {
    date: "2023-12-14T00:00:00",
    "Rows written": 2970,
    "Rows read": 21774,
    Queries: 500,
    "Payments completed": 96,
    "Sign ups": 80,
    Logins: 868,
    "Sign outs": 1084,
    "Support calls": 5,
  },
  {
    date: "2023-12-15T00:00:00",
    "Rows written": 2981,
    "Rows read": 21684,
    Queries: 499,
    "Payments completed": 121,
    "Sign ups": 79,
    Logins: 952,
    "Sign outs": 1086,
    "Support calls": 5,
  },
  {
    date: "2023-12-16T00:00:00",
    "Rows written": 2989,
    "Rows read": 22265,
    Queries: 397,
    "Payments completed": 90,
    "Sign ups": 60,
    Logins: 1118,
    "Sign outs": 1046,
    "Support calls": 2,
  },
  {
    date: "2023-12-17T00:00:00",
    "Rows written": 2977,
    "Rows read": 22417,
    Queries: 426,
    "Payments completed": 66,
    "Sign ups": 48,
    Logins: 1415,
    "Sign outs": 1115,
    "Support calls": 2,
  },
  {
    date: "2023-12-18T00:00:00",
    "Rows written": 2960,
    "Rows read": 22538,
    Queries: 488,
    "Payments completed": 83,
    "Sign ups": 67,
    Logins: 1881,
    "Sign outs": 1113,
    "Support calls": 2,
  },
  {
    date: "2023-12-19T00:00:00",
    "Rows written": 2950,
    "Rows read": 22247,
    Queries: 486,
    "Payments completed": 121,
    "Sign ups": 60,
    Logins: 1911,
    "Sign outs": 1001,
    "Support calls": 2,
  },
  {
    date: "2023-12-20T00:00:00",
    "Rows written": 2919,
    "Rows read": 22166,
    Queries: 487,
    "Payments completed": 125,
    "Sign ups": 60,
    Logins: 1637,
    "Sign outs": 946,
    "Support calls": 2,
  },
  {
    date: "2023-12-21T00:00:00",
    "Rows written": 2912,
    "Rows read": 22083,
    Queries: 483,
    "Payments completed": 121,
    "Sign ups": 62,
    Logins: 1519,
    "Sign outs": 907,
    "Support calls": 2,
  },
  {
    date: "2023-12-22T00:00:00",
    "Rows written": 2933,
    "Rows read": 21697,
    Queries: 480,
    "Payments completed": 119,
    "Sign ups": 61,
    Logins: 1315,
    "Sign outs": 933,
    "Support calls": 2,
  },
  {
    date: "2023-12-23T00:00:00",
    "Rows written": 2918,
    "Rows read": 21487,
    Queries: 391,
    "Payments completed": 94,
    "Sign ups": 52,
    Logins: 1275,
    "Sign outs": 906,
    "Support calls": 2,
  },
  {
    date: "2023-12-24T00:00:00",
    "Rows written": 2891,
    "Rows read": 20748,
    Queries: 398,
    "Payments completed": 68,
    "Sign ups": 57,
    Logins: 1138,
    "Sign outs": 908,
    "Support calls": 2,
  },
  {
    date: "2023-12-25T00:00:00",
    "Rows written": 2858,
    "Rows read": 20147,
    Queries: 495,
    "Payments completed": 89,
    "Sign ups": 65,
    Logins: 1213,
    "Sign outs": 924,
    "Support calls": 2,
  },
  {
    date: "2023-12-26T00:00:00",
    "Rows written": 2858,
    "Rows read": 20262,
    Queries: 489,
    "Payments completed": 98,
    "Sign ups": 60,
    Logins: 1306,
    "Sign outs": 903,
    "Support calls": 2,
  },
  {
    date: "2023-12-27T00:00:00",
    "Rows written": 2847,
    "Rows read": 20921,
    Queries: 483,
    "Payments completed": 81,
    "Sign ups": 65,
    Logins: 1536,
    "Sign outs": 900,
    "Support calls": 2,
  },
  {
    date: "2023-12-28T00:00:00",
    "Rows written": 2845,
    "Rows read": 20830,
    Queries: 482,
    "Payments completed": 87,
    "Sign ups": 63,
    Logins: 1879,
    "Sign outs": 922,
    "Support calls": 3,
  },
  {
    date: "2023-12-29T00:00:00",
    "Rows written": 2827,
    "Rows read": 21133,
    Queries: 482,
    "Payments completed": 99,
    "Sign ups": 60,
    Logins: 2034,
    "Sign outs": 911,
    "Support calls": 2,
  },
  {
    date: "2023-12-30T00:00:00",
    "Rows written": 2826,
    "Rows read": 21097,
    Queries: 427,
    "Payments completed": 94,
    "Sign ups": 53,
    Logins: 2009,
    "Sign outs": 924,
    "Support calls": 2,
  },
  {
    date: "2023-12-31T00:00:00",
    "Rows written": 2808,
    "Rows read": 20776,
    Queries: 399,
    "Payments completed": 81,
    "Sign ups": 49,
    Logins: 2002,
    "Sign outs": 918,
    "Support calls": 2,
  },
  {
    date: "2024-01-01T00:00:00",
    "Rows written": 2790,
    "Rows read": 20855,
    Queries: 494,
    "Payments completed": 87,
    "Sign ups": 66,
    Logins: 2038,
    "Sign outs": 914,
    "Support calls": 2,
  },
  {
    date: "2024-01-02T00:00:00",
    "Rows written": 2778,
    "Rows read": 20444,
    Queries: 490,
    "Payments completed": 81,
    "Sign ups": 65,
    Logins: 1994,
    "Sign outs": 951,
    "Support calls": 2,
  },
  {
    date: "2024-01-03T00:00:00",
    "Rows written": 2788,
    "Rows read": 19651,
    Queries: 491,
    "Payments completed": 86,
    "Sign ups": 60,
    Logins: 1975,
    "Sign outs": 1034,
    "Support calls": 2,
  },
  {
    date: "2024-01-04T00:00:00",
    "Rows written": 2768,
    "Rows read": 18747,
    Queries: 494,
    "Payments completed": 84,
    "Sign ups": 65,
    Logins: 2012,
    "Sign outs": 1015,
    "Support calls": 2,
  },
  {
    date: "2024-01-05T00:00:00",
    "Rows written": 2782,
    "Rows read": 18514,
    Queries: 493,
    "Payments completed": 98,
    "Sign ups": 66,
    Logins: 1944,
    "Sign outs": 1042,
    "Support calls": 2,
  },
  {
    date: "2024-01-06T00:00:00",
    "Rows written": 2777,
    "Rows read": 18686,
    Queries: 379,
    "Payments completed": 106,
    "Sign ups": 55,
    Logins: 1741,
    "Sign outs": 995,
    "Support calls": 2,
  },
  {
    date: "2024-01-07T00:00:00",
    "Rows written": 2785,
    "Rows read": 18779,
    Queries: 431,
    "Payments completed": 92,
    "Sign ups": 52,
    Logins: 1862,
    "Sign outs": 1065,
    "Support calls": 2,
  },
  {
    date: "2024-01-08T00:00:00",
    "Rows written": 2783,
    "Rows read": 18994,
    Queries: 488,
    "Payments completed": 119,
    "Sign ups": 65,
    Logins: 2003,
    "Sign outs": 1028,
    "Support calls": 2,
  },
  {
    date: "2024-01-09T00:00:00",
    "Rows written": 2769,
    "Rows read": 18892,
    Queries: 486,
    "Payments completed": 112,
    "Sign ups": 68,
    Logins: 1975,
    "Sign outs": 1113,
    "Support calls": 2,
  },
  {
    date: "2024-01-10T00:00:00",
    "Rows written": 2739,
    "Rows read": 18785,
    Queries: 485,
    "Payments completed": 121,
    "Sign ups": 63,
    Logins: 2021,
    "Sign outs": 1060,
    "Support calls": 2,
  },
  {
    date: "2024-01-11T00:00:00",
    "Rows written": 2708,
    "Rows read": 18323,
    Queries: 489,
    "Payments completed": 112,
    "Sign ups": 64,
    Logins: 2020,
    "Sign outs": 951,
    "Support calls": 2,
  },
  {
    date: "2024-01-12T00:00:00",
    "Rows written": 2697,
    "Rows read": 18607,
    Queries: 489,
    "Payments completed": 102,
    "Sign ups": 63,
    Logins: 1934,
    "Sign outs": 904,
    "Support calls": 2,
  },
  {
    date: "2024-01-13T00:00:00",
    "Rows written": 2709,
    "Rows read": 18881,
    Queries: 371,
    "Payments completed": 106,
    "Sign ups": 52,
    Logins: 1908,
    "Sign outs": 913,
    "Support calls": 2,
  },
  {
    date: "2024-01-14T00:00:00",
    "Rows written": 2734,
    "Rows read": 18941,
    Queries: 393,
    "Payments completed": 82,
    "Sign ups": 50,
    Logins: 1572,
    "Sign outs": 905,
    "Support calls": 2,
  },
  {
    date: "2024-01-15T00:00:00",
    "Rows written": 2735,
    "Rows read": 19199,
    Queries: 495,
    "Payments completed": 106,
    "Sign ups": 68,
    Logins: 1311,
    "Sign outs": 908,
    "Support calls": 2,
  },
  {
    date: "2024-01-16T00:00:00",
    "Rows written": 2735,
    "Rows read": 19883,
    Queries: 493,
    "Payments completed": 82,
    "Sign ups": 61,
    Logins: 946,
    "Sign outs": 909,
    "Support calls": 3,
  },
  {
    date: "2024-01-17T00:00:00",
    "Rows written": 2720,
    "Rows read": 20709,
    Queries: 495,
    "Payments completed": 86,
    "Sign ups": 61,
    Logins: 878,
    "Sign outs": 910,
    "Support calls": 3,
  },
  {
    date: "2024-01-18T00:00:00",
    "Rows written": 2700,
    "Rows read": 20770,
    Queries: 500,
    "Payments completed": 82,
    "Sign ups": 66,
    Logins: 895,
    "Sign outs": 915,
    "Support calls": 3,
  },
  {
    date: "2024-01-19T00:00:00",
    "Rows written": 2670,
    "Rows read": 20735,
    Queries: 501,
    "Payments completed": 88,
    "Sign ups": 64,
    Logins: 882,
    "Sign outs": 908,
    "Support calls": 2,
  },
  {
    date: "2024-01-20T00:00:00",
    "Rows written": 2672,
    "Rows read": 20107,
    Queries: 425,
    "Payments completed": 67,
    "Sign ups": 54,
    Logins: 852,
    "Sign outs": 929,
    "Support calls": 2,
  },
  {
    date: "2024-01-21T00:00:00",
    "Rows written": 2676,
    "Rows read": 19418,
    Queries: 380,
    "Payments completed": 70,
    "Sign ups": 47,
    Logins: 854,
    "Sign outs": 906,
    "Support calls": 2,
  },
  {
    date: "2024-01-22T00:00:00",
    "Rows written": 2692,
    "Rows read": 19118,
    Queries: 498,
    "Payments completed": 82,
    "Sign ups": 62,
    Logins: 848,
    "Sign outs": 944,
    "Support calls": 3,
  },
  {
    date: "2024-01-23T00:00:00",
    "Rows written": 2691,
    "Rows read": 18577,
    Queries: 495,
    "Payments completed": 88,
    "Sign ups": 78,
    Logins: 872,
    "Sign outs": 1027,
    "Support calls": 5,
  },
  {
    date: "2024-01-24T00:00:00",
    "Rows written": 2703,
    "Rows read": 18052,
    Queries: 493,
    "Payments completed": 109,
    "Sign ups": 69,
    Logins: 875,
    "Sign outs": 1095,
    "Support calls": 5,
  },
  {
    date: "2024-01-25T00:00:00",
    "Rows written": 2735,
    "Rows read": 18108,
    Queries: 491,
    "Payments completed": 80,
    "Sign ups": 76,
    Logins: 914,
    "Sign outs": 1067,
    "Support calls": 4,
  },
  {
    date: "2024-01-26T00:00:00",
    "Rows written": 2733,
    "Rows read": 18137,
    Queries: 488,
    "Payments completed": 80,
    "Sign ups": 78,
    Logins: 959,
    "Sign outs": 1115,
    "Support calls": 4,
  },
  {
    date: "2024-01-27T00:00:00",
    "Rows written": 2724,
    "Rows read": 18116,
    Queries: 432,
    "Payments completed": 65,
    "Sign ups": 53,
    Logins: 1059,
    "Sign outs": 1182,
    "Support calls": 2,
  },
  {
    date: "2024-01-28T00:00:00",
    "Rows written": 2727,
    "Rows read": 18575,
    Queries: 431,
    "Payments completed": 65,
    "Sign ups": 49,
    Logins: 997,
    "Sign outs": 1180,
    "Support calls": 2,
  },
  {
    date: "2024-01-29T00:00:00",
    "Rows written": 2755,
    "Rows read": 19197,
    Queries: 488,
    "Payments completed": 83,
    "Sign ups": 64,
    Logins: 950,
    "Sign outs": 1138,
    "Support calls": 2,
  },
  {
    date: "2024-01-30T00:00:00",
    "Rows written": 2756,
    "Rows read": 19751,
    Queries: 490,
    "Payments completed": 87,
    "Sign ups": 66,
    Logins: 1028,
    "Sign outs": 1108,
    "Support calls": 3,
  },
  {
    date: "2024-01-31T00:00:00",
    "Rows written": 2783,
    "Rows read": 19767,
    Queries: 491,
    "Payments completed": 102,
    "Sign ups": 79,
    Logins: 1198,
    "Sign outs": 1050,
    "Support calls": 5,
  },
  {
    date: "2024-02-01T00:00:00",
    "Rows written": 2778,
    "Rows read": 19305,
    Queries: 491,
    "Payments completed": 81,
    "Sign ups": 76,
    Logins: 1458,
    "Sign outs": 1023,
    "Support calls": 6,
  },
  {
    date: "2024-02-02T00:00:00",
    "Rows written": 2749,
    "Rows read": 19095,
    Queries: 495,
    "Payments completed": 80,
    "Sign ups": 77,
    Logins: 1712,
    "Sign outs": 1052,
    "Support calls": 8,
  },
  {
    date: "2024-02-03T00:00:00",
    "Rows written": 2711,
    "Rows read": 18932,
    Queries: 425,
    "Payments completed": 68,
    "Sign ups": 70,
    Logins: 1704,
    "Sign outs": 1129,
    "Support calls": 7,
  },
  {
    date: "2024-02-04T00:00:00",
    "Rows written": 2719,
    "Rows read": 19181,
    Queries: 369,
    "Payments completed": 69,
    "Sign ups": 62,
    Logins: 1393,
    "Sign outs": 1076,
    "Support calls": 6,
  },
  {
    date: "2024-02-05T00:00:00",
    "Rows written": 2708,
    "Rows read": 19141,
    Queries: 500,
    "Payments completed": 85,
    "Sign ups": 62,
    Logins: 1235,
    "Sign outs": 947,
    "Support calls": 8,
  },
  {
    date: "2024-02-06T00:00:00",
    "Rows written": 2726,
    "Rows read": 19575,
    Queries: 495,
    "Payments completed": 88,
    "Sign ups": 80,
    Logins: 1100,
    "Sign outs": 921,
    "Support calls": 8,
  },
  {
    date: "2024-02-07T00:00:00",
    "Rows written": 2752,
    "Rows read": 20265,
    Queries: 491,
    "Payments completed": 87,
    "Sign ups": 71,
    Logins: 932,
    "Sign outs": 904,
    "Support calls": 10,
  },
  {
    date: "2024-02-08T00:00:00",
    "Rows written": 2754,
    "Rows read": 20236,
    Queries: 485,
    "Payments completed": 83,
    "Sign ups": 75,
    Logins: 868,
    "Sign outs": 917,
    "Support calls": 13,
  },
  {
    date: "2024-02-09T00:00:00",
    "Rows written": 2776,
    "Rows read": 19659,
    Queries: 478,
    "Payments completed": 89,
    "Sign ups": 77,
    Logins: 878,
    "Sign outs": 900,
    "Support calls": 15,
  },
  {
    date: "2024-02-10T00:00:00",
    "Rows written": 2794,
    "Rows read": 19108,
    Queries: 392,
    "Payments completed": 72,
    "Sign ups": 58,
    Logins: 1033,
    "Sign outs": 917,
    "Support calls": 8,
  },
  {
    date: "2024-02-11T00:00:00",
    "Rows written": 2796,
    "Rows read": 18407,
    Queries: 382,
    "Payments completed": 67,
    "Sign ups": 53,
    Logins: 1008,
    "Sign outs": 959,
    "Support calls": 9,
  },
  {
    date: "2024-02-12T00:00:00",
    "Rows written": 2774,
    "Rows read": 18053,
    Queries: 498,
    "Payments completed": 83,
    "Sign ups": 66,
    Logins: 960,
    "Sign outs": 1040,
    "Support calls": 14,
  },
  {
    date: "2024-02-13T00:00:00",
    "Rows written": 2747,
    "Rows read": 18058,
    Queries: 493,
    "Payments completed": 80,
    "Sign ups": 63,
    Logins: 858,
    "Sign outs": 1177,
    "Support calls": 13,
  },
  {
    date: "2024-02-14T00:00:00",
    "Rows written": 2741,
    "Rows read": 18290,
    Queries: 492,
    "Payments completed": 82,
    "Sign ups": 60,
    Logins: 942,
    "Sign outs": 1177,
    "Support calls": 15,
  },
  {
    date: "2024-02-15T00:00:00",
    "Rows written": 2724,
    "Rows read": 18708,
    Queries: 491,
    "Payments completed": 83,
    "Sign ups": 61,
    Logins: 1015,
    "Sign outs": 1150,
    "Support calls": 9,
  },
  {
    date: "2024-02-16T00:00:00",
    "Rows written": 2705,
    "Rows read": 18405,
    Queries: 491,
    "Payments completed": 86,
    "Sign ups": 61,
    Logins: 1067,
    "Sign outs": 1114,
    "Support calls": 5,
  },
  {
    date: "2024-02-17T00:00:00",
    "Rows written": 2699,
    "Rows read": 18713,
    Queries: 372,
    "Payments completed": 73,
    "Sign ups": 53,
    Logins: 1175,
    "Sign outs": 1004,
    "Support calls": 2,
  },
  {
    date: "2024-02-18T00:00:00",
    "Rows written": 2693,
    "Rows read": 18576,
    Queries: 393,
    "Payments completed": 75,
    "Sign ups": 56,
    Logins: 1411,
    "Sign outs": 959,
    "Support calls": 2,
  },
  {
    date: "2024-02-19T00:00:00",
    "Rows written": 2704,
    "Rows read": 18344,
    Queries: 495,
    "Payments completed": 90,
    "Sign ups": 65,
    Logins: 1586,
    "Sign outs": 902,
    "Support calls": 2,
  },
  {
    date: "2024-02-20T00:00:00",
    "Rows written": 2728,
    "Rows read": 18769,
    Queries: 500,
    "Payments completed": 83,
    "Sign ups": 78,
    Logins: 1792,
    "Sign outs": 902,
    "Support calls": 2,
  },
  {
    date: "2024-02-21T00:00:00",
    "Rows written": 2756,
    "Rows read": 19252,
    Queries: 507,
    "Payments completed": 82,
    "Sign ups": 61,
    Logins: 1837,
    "Sign outs": 917,
    "Support calls": 2,
  },
  {
    date: "2024-02-22T00:00:00",
    "Rows written": 2792,
    "Rows read": 19917,
    Queries: 509,
    "Payments completed": 83,
    "Sign ups": 65,
    Logins: 1818,
    "Sign outs": 911,
    "Support calls": 2,
  },
  {
    date: "2024-02-23T00:00:00",
    "Rows written": 2827,
    "Rows read": 20473,
    Queries: 509,
    "Payments completed": 86,
    "Sign ups": 68,
    Logins: 1460,
    "Sign outs": 903,
    "Support calls": 2,
  },
  {
    date: "2024-02-24T00:00:00",
    "Rows written": 2822,
    "Rows read": 21263,
    Queries: 402,
    "Payments completed": 76,
    "Sign ups": 67,
    Logins: 1232,
    "Sign outs": 926,
    "Support calls": 2,
  },
  {
    date: "2024-02-25T00:00:00",
    "Rows written": 2825,
    "Rows read": 22081,
    Queries: 432,
    "Payments completed": 75,
    "Sign ups": 49,
    Logins: 1122,
    "Sign outs": 903,
    "Support calls": 2,
  },
  {
    date: "2024-02-26T00:00:00",
    "Rows written": 2849,
    "Rows read": 22955,
    Queries: 487,
    "Payments completed": 84,
    "Sign ups": 62,
    Logins: 1118,
    "Sign outs": 964,
    "Support calls": 2,
  },
  {
    date: "2024-02-27T00:00:00",
    "Rows written": 2841,
    "Rows read": 23908,
    Queries: 484,
    "Payments completed": 110,
    "Sign ups": 79,
    Logins: 1247,
    "Sign outs": 1048,
    "Support calls": 2,
  },
  {
    date: "2024-02-28T00:00:00",
    "Rows written": 2857,
    "Rows read": 23777,
    Queries: 481,
    "Payments completed": 91,
    "Sign ups": 64,
    Logins: 1231,
    "Sign outs": 1166,
    "Support calls": 2,
  },
  {
    date: "2024-02-29T00:00:00",
    "Rows written": 2878,
    "Rows read": 23296,
    Queries: 484,
    "Payments completed": 89,
    "Sign ups": 79,
    Logins: 991,
    "Sign outs": 1153,
    "Support calls": 2,
  },
  {
    date: "2024-03-01T00:00:00",
    "Rows written": 2881,
    "Rows read": 22647,
    Queries: 483,
    "Payments completed": 110,
    "Sign ups": 71,
    Logins: 865,
    "Sign outs": 1166,
    "Support calls": 3,
  },
  {
    date: "2024-03-02T00:00:00",
    "Rows written": 2887,
    "Rows read": 22725,
    Queries: 363,
    "Payments completed": 100,
    "Sign ups": 65,
    Logins: 855,
    "Sign outs": 1194,
    "Support calls": 3,
  },
  {
    date: "2024-03-03T00:00:00",
    "Rows written": 2869,
    "Rows read": 22226,
    Queries: 393,
    "Payments completed": 91,
    "Sign ups": 64,
    Logins: 859,
    "Sign outs": 1172,
    "Support calls": 2,
  },
  {
    date: "2024-03-04T00:00:00",
    "Rows written": 2877,
    "Rows read": 22120,
    Queries: 495,
    "Payments completed": 122,
    "Sign ups": 61,
    Logins: 867,
    "Sign outs": 1181,
    "Support calls": 2,
  },
  {
    date: "2024-03-05T00:00:00",
    "Rows written": 2875,
    "Rows read": 22533,
    Queries: 494,
    "Payments completed": 109,
    "Sign ups": 60,
    Logins: 879,
    "Sign outs": 1150,
    "Support calls": 2,
  },
  {
    date: "2024-03-06T00:00:00",
    "Rows written": 2860,
    "Rows read": 22166,
    Queries: 489,
    "Payments completed": 98,
    "Sign ups": 65,
    Logins: 869,
    "Sign outs": 1088,
    "Support calls": 2,
  },
  {
    date: "2024-03-07T00:00:00",
    "Rows written": 2872,
    "Rows read": 21895,
    Queries: 482,
    "Payments completed": 104,
    "Sign ups": 77,
    Logins: 877,
    "Sign outs": 1145,
    "Support calls": 2,
  },
  {
    date: "2024-03-08T00:00:00",
    "Rows written": 2852,
    "Rows read": 21563,
    Queries: 479,
    "Payments completed": 82,
    "Sign ups": 73,
    Logins: 852,
    "Sign outs": 1123,
    "Support calls": 2,
  },
  {
    date: "2024-03-09T00:00:00",
    "Rows written": 2822,
    "Rows read": 20981,
    Queries: 409,
    "Payments completed": 76,
    "Sign ups": 49,
    Logins: 979,
    "Sign outs": 1140,
    "Support calls": 2,
  },
  {
    date: "2024-03-10T00:00:00",
    "Rows written": 2835,
    "Rows read": 21256,
    Queries: 387,
    "Payments completed": 68,
    "Sign ups": 50,
    Logins: 1138,
    "Sign outs": 1150,
    "Support calls": 2,
  },
  {
    date: "2024-03-11T00:00:00",
    "Rows written": 2831,
    "Rows read": 21702,
    Queries: 497,
    "Payments completed": 83,
    "Sign ups": 60,
    Logins: 1026,
    "Sign outs": 1084,
    "Support calls": 2,
  },
  {
    date: "2024-03-12T00:00:00",
    "Rows written": 2807,
    "Rows read": 22104,
    Queries: 494,
    "Payments completed": 81,
    "Sign ups": 70,
    Logins: 858,
    "Sign outs": 952,
    "Support calls": 2,
  },
  {
    date: "2024-03-13T00:00:00",
    "Rows written": 2803,
    "Rows read": 22714,
    Queries: 489,
    "Payments completed": 106,
    "Sign ups": 74,
    Logins: 879,
    "Sign outs": 908,
    "Support calls": 2,
  },
  {
    date: "2024-03-14T00:00:00",
    "Rows written": 2825,
    "Rows read": 22484,
    Queries: 483,
    "Payments completed": 116,
    "Sign ups": 72,
    Logins: 844,
    "Sign outs": 917,
    "Support calls": 2,
  },
  {
    date: "2024-03-15T00:00:00",
    "Rows written": 2811,
    "Rows read": 22589,
    Queries: 480,
    "Payments completed": 120,
    "Sign ups": 73,
    Logins: 852,
    "Sign outs": 907,
    "Support calls": 2,
  },
  {
    date: "2024-03-16T00:00:00",
    "Rows written": 2815,
    "Rows read": 21999,
    Queries: 391,
    "Payments completed": 94,
    "Sign ups": 60,
    Logins: 860,
    "Sign outs": 907,
    "Support calls": 2,
  },
  {
    date: "2024-03-17T00:00:00",
    "Rows written": 2842,
    "Rows read": 21627,
    Queries: 440,
    "Payments completed": 92,
    "Sign ups": 69,
    Logins: 920,
    "Sign outs": 932,
    "Support calls": 2,
  },
  {
    date: "2024-03-18T00:00:00",
    "Rows written": 2864,
    "Rows read": 21708,
    Queries: 486,
    "Payments completed": 82,
    "Sign ups": 75,
    Logins: 856,
    "Sign outs": 900,
    "Support calls": 2,
  },
  {
    date: "2024-03-19T00:00:00",
    "Rows written": 2877,
    "Rows read": 21501,
    Queries: 489,
    "Payments completed": 114,
    "Sign ups": 70,
    Logins: 845,
    "Sign outs": 943,
    "Support calls": 2,
  },
  {
    date: "2024-03-20T00:00:00",
    "Rows written": 2900,
    "Rows read": 21927,
    Queries: 489,
    "Payments completed": 107,
    "Sign ups": 80,
    Logins: 848,
    "Sign outs": 903,
    "Support calls": 2,
  },
  {
    date: "2024-03-21T00:00:00",
    "Rows written": 2887,
    "Rows read": 22358,
    Queries: 490,
    "Payments completed": 81,
    "Sign ups": 61,
    Logins: 847,
    "Sign outs": 912,
    "Support calls": 3,
  },
  {
    date: "2024-03-22T00:00:00",
    "Rows written": 2903,
    "Rows read": 22301,
    Queries: 488,
    "Payments completed": 84,
    "Sign ups": 63,
    Logins: 847,
    "Sign outs": 907,
    "Support calls": 3,
  },
  {
    date: "2024-03-23T00:00:00",
    "Rows written": 2920,
    "Rows read": 21875,
    Queries: 420,
    "Payments completed": 66,
    "Sign ups": 61,
    Logins: 852,
    "Sign outs": 903,
    "Support calls": 4,
  },
  {
    date: "2024-03-24T00:00:00",
    "Rows written": 2951,
    "Rows read": 21585,
    Queries: 370,
    "Payments completed": 66,
    "Sign ups": 51,
    Logins: 952,
    "Sign outs": 943,
    "Support calls": 2,
  },
  {
    date: "2024-03-25T00:00:00",
    "Rows written": 2944,
    "Rows read": 20899,
    Queries: 499,
    "Payments completed": 101,
    "Sign ups": 63,
    Logins: 1030,
    "Sign outs": 982,
    "Support calls": 2,
  },
  {
    date: "2024-03-26T00:00:00",
    "Rows written": 2923,
    "Rows read": 20352,
    Queries: 504,
    "Payments completed": 124,
    "Sign ups": 78,
    Logins: 1009,
    "Sign outs": 1087,
    "Support calls": 2,
  },
  {
    date: "2024-03-27T00:00:00",
    "Rows written": 2894,
    "Rows read": 19832,
    Queries: 510,
    "Payments completed": 100,
    "Sign ups": 70,
    Logins: 868,
    "Sign outs": 1190,
    "Support calls": 2,
  },
  {
    date: "2024-03-28T00:00:00",
    "Rows written": 2886,
    "Rows read": 19542,
    Queries: 510,
    "Payments completed": 92,
    "Sign ups": 76,
    Logins: 852,
    "Sign outs": 1199,
    "Support calls": 2,
  },
  {
    date: "2024-03-29T00:00:00",
    "Rows written": 2874,
    "Rows read": 19368,
    Queries: 507,
    "Payments completed": 83,
    "Sign ups": 71,
    Logins: 906,
    "Sign outs": 1103,
    "Support calls": 2,
  },
  {
    date: "2024-03-30T00:00:00",
    "Rows written": 2869,
    "Rows read": 19312,
    Queries: 383,
    "Payments completed": 75,
    "Sign ups": 66,
    Logins: 866,
    "Sign outs": 996,
    "Support calls": 2,
  },
  {
    date: "2024-03-31T00:00:00",
    "Rows written": 2848,
    "Rows read": 19578,
    Queries: 410,
    "Payments completed": 83,
    "Sign ups": 68,
    Logins: 1000,
    "Sign outs": 910,
    "Support calls": 2,
  },
  {
    date: "2024-03-31T00:00:00",
    "Rows written": 2854,
    "Rows read": 19837,
    Queries: 492,
    "Payments completed": 119,
    "Sign ups": 74,
    Logins: 1204,
    "Sign outs": 903,
    "Support calls": 2,
  },
  {
    date: "2024-04-01T00:00:00",
    "Rows written": 2837,
    "Rows read": 19406,
    Queries: 486,
    "Payments completed": 124,
    "Sign ups": 73,
    Logins: 1374,
    "Sign outs": 918,
    "Support calls": 2,
  },
  {
    date: "2024-04-02T00:00:00",
    "Rows written": 2826,
    "Rows read": 19050,
    Queries: 480,
    "Payments completed": 103,
    "Sign ups": 71,
    Logins: 1649,
    "Sign outs": 930,
    "Support calls": 3,
  },
  {
    date: "2024-04-03T00:00:00",
    "Rows written": 2821,
    "Rows read": 18973,
    Queries: 481,
    "Payments completed": 117,
    "Sign ups": 76,
    Logins: 1686,
    "Sign outs": 911,
    "Support calls": 5,
  },
  {
    date: "2024-04-04T00:00:00",
    "Rows written": 2806,
    "Rows read": 18537,
    Queries: 485,
    "Payments completed": 102,
    "Sign ups": 70,
    Logins: 1373,
    "Sign outs": 950,
    "Support calls": 7,
  },
  {
    date: "2024-04-05T00:00:00",
    "Rows written": 2774,
    "Rows read": 18124,
    Queries: 379,
    "Payments completed": 70,
    "Sign ups": 53,
    Logins: 1512,
    "Sign outs": 973,
    "Support calls": 9,
  },
  {
    date: "2024-04-06T00:00:00",
    "Rows written": 2734,
    "Rows read": 18031,
    Queries: 436,
    "Payments completed": 82,
    "Sign ups": 63,
    Logins: 1593,
    "Sign outs": 900,
    "Support calls": 9,
  },
  {
    date: "2024-04-07T00:00:00",
    "Rows written": 2738,
    "Rows read": 18081,
    Queries: 485,
    "Payments completed": 93,
    "Sign ups": 61,
    Logins: 1926,
    "Sign outs": 932,
    "Support calls": 13,
  },
  {
    date: "2024-04-08T00:00:00",
    "Rows written": 2765,
    "Rows read": 18042,
    Queries: 491,
    "Payments completed": 123,
    "Sign ups": 67,
    Logins: 2001,
    "Sign outs": 971,
    "Support calls": 14,
  },
  {
    date: "2024-04-09T00:00:00",
    "Rows written": 2756,
    "Rows read": 18006,
    Queries: 490,
    "Payments completed": 112,
    "Sign ups": 78,
    Logins: 1983,
    "Sign outs": 913,
    "Support calls": 9,
  },
  {
    date: "2024-04-10T00:00:00",
    "Rows written": 2726,
    "Rows read": 18097,
    Queries: 493,
    "Payments completed": 118,
    "Sign ups": 74,
    Logins: 1946,
    "Sign outs": 900,
    "Support calls": 10,
  },
  {
    date: "2024-04-11T00:00:00",
    "Rows written": 2691,
    "Rows read": 18124,
    Queries: 494,
    "Payments completed": 114,
    "Sign ups": 71,
    Logins: 1956,
    "Sign outs": 915,
    "Support calls": 10,
  },
  {
    date: "2024-04-12T00:00:00",
    "Rows written": 2699,
    "Rows read": 18115,
    Queries: 431,
    "Payments completed": 85,
    "Sign ups": 69,
    Logins: 1991,
    "Sign outs": 926,
    "Support calls": 5,
  },
  {
    date: "2024-04-13T00:00:00",
    "Rows written": 2696,
    "Rows read": 18096,
    Queries: 387,
    "Payments completed": 75,
    "Sign ups": 64,
    Logins: 1795,
    "Sign outs": 906,
    "Support calls": 3,
  },
  {
    date: "2024-04-14T00:00:00",
    "Rows written": 2673,
    "Rows read": 18251,
    Queries: 496,
    "Payments completed": 82,
    "Sign ups": 77,
    Logins: 1687,
    "Sign outs": 965,
    "Support calls": 4,
  },
  {
    date: "2024-04-15T00:00:00",
    "Rows written": 2669,
    "Rows read": 18003,
    Queries: 491,
    "Payments completed": 81,
    "Sign ups": 79,
    Logins: 1440,
    "Sign outs": 1023,
    "Support calls": 7,
  },
  {
    date: "2024-04-16T00:00:00",
    "Rows written": 2676,
    "Rows read": 18017,
    Queries: 485,
    "Payments completed": 87,
    "Sign ups": 73,
    Logins: 1589,
    "Sign outs": 1149,
    "Support calls": 11,
  },
  {
    date: "2024-04-17T00:00:00",
    "Rows written": 2654,
    "Rows read": 18088,
    Queries: 485,
    "Payments completed": 81,
    "Sign ups": 75,
    Logins: 1949,
    "Sign outs": 1135,
    "Support calls": 9,
  },
  {
    date: "2024-04-18T00:00:00",
    "Rows written": 2635,
    "Rows read": 18115,
    Queries: 483,
    "Payments completed": 106,
    "Sign ups": 71,
    Logins: 2028,
    "Sign outs": 1159,
    "Support calls": 7,
  },
  {
    date: "2024-04-19T00:00:00",
    "Rows written": 2644,
    "Rows read": 18138,
    Queries: 379,
    "Payments completed": 98,
    "Sign ups": 65,
    Logins: 2036,
    "Sign outs": 1187,
    "Support calls": 3,
  },
  {
    date: "2024-04-20T00:00:00",
    "Rows written": 2672,
    "Rows read": 18004,
    Queries: 441,
    "Payments completed": 101,
    "Sign ups": 68,
    Logins: 1991,
    "Sign outs": 1176,
    "Support calls": 3,
  },
  {
    date: "2024-04-21T00:00:00",
    "Rows written": 2700,
    "Rows read": 18113,
    Queries: 485,
    "Payments completed": 97,
    "Sign ups": 60,
    Logins: 2006,
    "Sign outs": 1174,
    "Support calls": 4,
  },
  {
    date: "2024-04-22T00:00:00",
    "Rows written": 2729,
    "Rows read": 18033,
    Queries: 485,
    "Payments completed": 85,
    "Sign ups": 61,
    Logins: 2006,
    "Sign outs": 1169,
    "Support calls": 6,
  },
  {
    date: "2024-04-23T00:00:00",
    "Rows written": 2735,
    "Rows read": 18083,
    Queries: 486,
    "Payments completed": 85,
    "Sign ups": 80,
    Logins: 1882,
    "Sign outs": 1159,
    "Support calls": 7,
  },
  {
    date: "2024-04-24T00:00:00",
    "Rows written": 2734,
    "Rows read": 18028,
    Queries: 486,
    "Payments completed": 112,
    "Sign ups": 74,
    Logins: 1801,
    "Sign outs": 1040,
    "Support calls": 8,
  },
  {
    date: "2024-04-25T00:00:00",
    "Rows written": 2745,
    "Rows read": 18037,
    Queries: 486,
    "Payments completed": 120,
    "Sign ups": 72,
    Logins: 1453,
    "Sign outs": 944,
    "Support calls": 6,
  },
  {
    date: "2024-04-26T00:00:00",
    "Rows written": 2742,
    "Rows read": 18006,
    Queries: 380,
    "Payments completed": 99,
    "Sign ups": 56,
    Logins: 1264,
    "Sign outs": 992,
    "Support calls": 3,
  },
  {
    date: "2024-04-27T00:00:00",
    "Rows written": 2717,
    "Rows read": 18439,
    Queries: 446,
    "Payments completed": 85,
    "Sign ups": 65,
    Logins: 938,
    "Sign outs": 996,
    "Support calls": 3,
  },
  {
    date: "2024-04-28T00:00:00",
    "Rows written": 2707,
    "Rows read": 18285,
    Queries: 484,
    "Payments completed": 85,
    "Sign ups": 62,
    Logins: 942,
    "Sign outs": 1061,
    "Support calls": 3,
  },
  {
    date: "2024-04-29T00:00:00",
    "Rows written": 2677,
    "Rows read": 18258,
    Queries: 481,
    "Payments completed": 84,
    "Sign ups": 63,
    Logins: 1061,
    "Sign outs": 1089,
    "Support calls": 3,
  },
  {
    date: "2024-04-30T00:00:00",
    "Rows written": 2685,
    "Rows read": 18298,
    Queries: 479,
    "Payments completed": 88,
    "Sign ups": 71,
    Logins: 1289,
    "Sign outs": 1119,
    "Support calls": 2,
  },
  {
    date: "2024-05-01T00:00:00",
    "Rows written": 2687,
    "Rows read": 18361,
    Queries: 479,
    "Payments completed": 88,
    "Sign ups": 78,
    Logins: 1339,
    "Sign outs": 1198,
    "Support calls": 2,
  },
  {
    date: "2024-05-02T00:00:00",
    "Rows written": 2670,
    "Rows read": 18576,
    Queries: 480,
    "Payments completed": 90,
    "Sign ups": 76,
    Logins: 1142,
    "Sign outs": 1145,
    "Support calls": 2,
  },
  {
    date: "2024-05-03T00:00:00",
    "Rows written": 2635,
    "Rows read": 19046,
    Queries: 396,
    "Payments completed": 71,
    "Sign ups": 51,
    Logins: 948,
    "Sign outs": 1049,
    "Support calls": 2,
  },
  {
    date: "2024-05-04T00:00:00",
    "Rows written": 2617,
    "Rows read": 19808,
    Queries: 375,
    "Payments completed": 82,
    "Sign ups": 51,
    Logins: 1018,
    "Sign outs": 1012,
    "Support calls": 2,
  },
  {
    date: "2024-05-05T00:00:00",
    "Rows written": 2627,
    "Rows read": 20325,
    Queries: 498,
    "Payments completed": 90,
    "Sign ups": 64,
    Logins: 1137,
    "Sign outs": 1095,
    "Support calls": 2,
  },
  {
    date: "2024-05-06T00:00:00",
    "Rows written": 2624,
    "Rows read": 20838,
    Queries: 503,
    "Payments completed": 119,
    "Sign ups": 78,
    Logins: 1047,
    "Sign outs": 1196,
    "Support calls": 2,
  },
  {
    date: "2024-05-07T00:00:00",
    "Rows written": 2596,
    "Rows read": 21694,
    Queries: 503,
    "Payments completed": 111,
    "Sign ups": 72,
    Logins: 848,
    "Sign outs": 1199,
    "Support calls": 2,
  },
  {
    date: "2024-05-08T00:00:00",
    "Rows written": 2607,
    "Rows read": 22529,
    Queries: 499,
    "Payments completed": 106,
    "Sign ups": 70,
    Logins: 861,
    "Sign outs": 1102,
    "Support calls": 2,
  },
  {
    date: "2024-05-09T00:00:00",
    "Rows written": 2637,
    "Rows read": 23550,
    Queries: 493,
    "Payments completed": 120,
    "Sign ups": 76,
    Logins: 979,
    "Sign outs": 1126,
    "Support calls": 3,
  },
  {
    date: "2024-05-10T00:00:00",
    "Rows written": 2675,
    "Rows read": 24491,
    Queries: 379,
    "Payments completed": 67,
    "Sign ups": 65,
    Logins: 928,
    "Sign outs": 1070,
    "Support calls": 3,
  },
  {
    date: "2024-05-11T00:00:00",
    "Rows written": 2718,
    "Rows read": 25709,
    Queries: 428,
    "Payments completed": 65,
    "Sign ups": 48,
    Logins: 990,
    "Sign outs": 1068,
    "Support calls": 4,
  },
  {
    date: "2024-05-12T00:00:00",
    "Rows written": 2723,
    "Rows read": 26600,
    Queries: 488,
    "Payments completed": 82,
    "Sign ups": 63,
    Logins: 1122,
    "Sign outs": 1063,
    "Support calls": 5,
  },
  {
    date: "2024-05-13T00:00:00",
    "Rows written": 2715,
    "Rows read": 27252,
    Queries: 490,
    "Payments completed": 83,
    "Sign ups": 64,
    Logins: 1285,
    "Sign outs": 1126,
    "Support calls": 7,
  },
  {
    date: "2024-05-14T00:00:00",
    "Rows written": 2715,
    "Rows read": 27298,
    Queries: 489,
    "Payments completed": 86,
    "Sign ups": 79,
    Logins: 1516,
    "Sign outs": 1200,
    "Support calls": 5,
  },
  {
    date: "2024-05-15T00:00:00",
    "Rows written": 2734,
    "Rows read": 27457,
    Queries: 490,
    "Payments completed": 89,
    "Sign ups": 74,
    Logins: 1803,
    "Sign outs": 1122,
    "Support calls": 4,
  },
  {
    date: "2024-05-16T00:00:00",
    "Rows written": 2765,
    "Rows read": 27539,
    Queries: 486,
    "Payments completed": 88,
    "Sign ups": 73,
    Logins: 2045,
    "Sign outs": 997,
    "Support calls": 2,
  },
]
</file>

<file path="src/lib/chartUtils.ts">
// Tremor Raw chartColors [v0.0.0]

export type ColorUtility = "bg" | "stroke" | "fill" | "text"

export const chartColors = {
  blue: {
    bg: "bg-blue-500",
    stroke: "stroke-blue-500",
    fill: "fill-blue-500",
    text: "text-blue-500",
  },
  emerald: {
    bg: "bg-emerald-500",
    stroke: "stroke-emerald-500",
    fill: "fill-emerald-500",
    text: "text-emerald-500",
  },
  violet: {
    bg: "bg-violet-500",
    stroke: "stroke-violet-500",
    fill: "fill-violet-500",
    text: "text-violet-500",
  },
  amber: {
    bg: "bg-amber-500",
    stroke: "stroke-amber-500",
    fill: "fill-amber-500",
    text: "text-amber-500",
  },
  gray: {
    bg: "bg-gray-400 dark:bg-gray-600",
    stroke: "stroke-gray-400 dark:stroke-gray-600",
    fill: "fill-gray-400 dark:fill-gray-600",
    text: "text-gray-400 dark:text-gray-600",
  },
  cyan: {
    bg: "bg-cyan-500",
    stroke: "stroke-cyan-500",
    fill: "fill-cyan-500",
    text: "text-cyan-500",
  },
  indigo: {
    bg: "bg-indigo-600 dark:bg-indigo-500",
    stroke: "stroke-indigo-600 dark:stroke-indigo-500",
    fill: "fill-indigo-600 dark:fill-indigo-500",
    text: "text-indigo-600 dark:text-indigo-500",
  },
  pink: {
    bg: "bg-pink-500",
    stroke: "stroke-pink-500",
    fill: "fill-pink-500",
    text: "text-pink-500",
  },
} as const satisfies {
  [color: string]: {
    [key in ColorUtility]: string
  }
}

export type AvailableChartColorsKeys = keyof typeof chartColors

export const AvailableChartColors: AvailableChartColorsKeys[] = Object.keys(
  chartColors,
) as Array<AvailableChartColorsKeys>

export const constructCategoryColors = (
  categories: string[],
  colors: AvailableChartColorsKeys[],
): Map<string, AvailableChartColorsKeys> => {
  const categoryColors = new Map<string, AvailableChartColorsKeys>()
  categories.forEach((category, index) => {
    categoryColors.set(category, colors[index % colors.length])
  })
  return categoryColors
}

export const getColorClassName = (
  color: AvailableChartColorsKeys,
  type: ColorUtility,
): string => {
  const fallbackColor = {
    bg: "bg-gray-500",
    stroke: "stroke-gray-500",
    fill: "fill-gray-500",
    text: "text-gray-500",
  }
  return chartColors[color]?.[type] ?? fallbackColor[type]
}

// Tremor Raw getYAxisDomain [v0.0.0]

export const getYAxisDomain = (
  autoMinValue: boolean,
  minValue: number | undefined,
  maxValue: number | undefined,
) => {
  const minDomain = autoMinValue ? "auto" : (minValue ?? 0)
  const maxDomain = maxValue ?? "auto"
  return [minDomain, maxDomain]
}

// Tremor Raw hasOnlyOneValueForKey [v0.1.0]

export function hasOnlyOneValueForKey(
  array: any[],
  keyToCheck: string,
): boolean {
  const val: any[] = []

  for (const obj of array) {
    if (Object.prototype.hasOwnProperty.call(obj, keyToCheck)) {
      val.push(obj[keyToCheck])
      if (val.length > 1) {
        return false
      }
    }
  }

  return true
}
</file>

<file path="src/lib/useOnWindowResize.tsx">
// Tremor Raw useOnWindowResize [v0.0.0]

import * as React from "react"

export const useOnWindowResize = (handler: { (): void }) => {
  React.useEffect(() => {
    const handleResize = () => {
      handler()
    }
    handleResize()
    window.addEventListener("resize", handleResize)

    return () => window.removeEventListener("resize", handleResize)
  }, [handler])
}
</file>

<file path="src/lib/utils.ts">
// Tremor Raw cx [v0.0.0]

import clsx, { type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cx(...args: ClassValue[]) {
  return twMerge(clsx(...args))
}

// Tremor Raw focusInput [v0.0.1]

export const focusInput = [
  // base
  "focus:ring-2",
  // ring color
  "focus:ring-indigo-200 focus:dark:ring-indigo-700/30",
  // border color
  "focus:border-indigo-500 focus:dark:border-indigo-700",
]

// Tremor Raw focusRing [v0.0.1]

export const focusRing = [
  // base
  "outline outline-offset-2 outline-0 focus-visible:outline-2",
  // outline color
  "outline-indigo-500 dark:outline-indigo-500",
]

// Tremor Raw hasErrorInput [v0.0.1]

export const hasErrorInput = [
  // base
  "ring-2",
  // border color
  "border-red-500 dark:border-red-700",
  // ring color
  "ring-red-200 dark:ring-red-700/30",
]

// Number formatter function

export const usNumberformatter = (number: number, decimals = 0) =>
  Intl.NumberFormat("us", {
    minimumFractionDigits: decimals,
    maximumFractionDigits: decimals,
  })
    .format(Number(number))
    .toString()

export const percentageFormatter = (number: number, decimals = 1) => {
  const formattedNumber = new Intl.NumberFormat("en-US", {
    style: "percent",
    minimumFractionDigits: decimals,
    maximumFractionDigits: decimals,
  }).format(number)
  const symbol = number > 0 && number !== Infinity ? "+" : ""

  return `${symbol}${formattedNumber}`
}

export const millionFormatter = (number: number, decimals = 1) => {
  const formattedNumber = new Intl.NumberFormat("en-US", {
    style: "decimal",
    minimumFractionDigits: decimals,
    maximumFractionDigits: decimals,
  }).format(number)
  return `${formattedNumber}M`
}
export const formatters: { [key: string]: any } = {
  currency: (number: number, currency: string = "USD") =>
    new Intl.NumberFormat("en-US", {
      style: "currency",
      currency: currency,
    }).format(number),
  unit: (number: number) => `${usNumberformatter(number)}`,
}
</file>

<file path=".clinerules">
# Cline's Memory Bank

I am Cline, an expert software engineer with a unique characteristic: my memory resets completely between sessions. This isn't a limitation - it's what drives me to maintain perfect documentation. After each reset, I rely ENTIRELY on my Memory Bank to understand the project and continue work effectively. I MUST read ALL memory bank files at the start of EVERY task - this is not optional.

## Memory Bank Structure

The Memory Bank consists of core files and optional context files, all in Markdown format. Files build upon each other in a clear hierarchy:

flowchart TD
    PB[projectbrief.md] --> PC[productContext.md]
    PB --> SP[systemPatterns.md]
    PB --> TC[techContext.md]
    
    PC --> AC[activeContext.md]
    SP --> AC
    TC --> AC
    
    AC --> P[progress.md]

### Core Files (Required)
1. `projectbrief.md`
   - Foundation document that shapes all other files
   - Created at project start if it doesn't exist
   - Defines core requirements and goals
   - Source of truth for project scope

2. `productContext.md`
   - Why this project exists
   - Problems it solves
   - How it should work
   - User experience goals

3. `activeContext.md`
   - Current work focus
   - Recent changes
   - Next steps
   - Active decisions and considerations
   - Important patterns and preferences
   - Learnings and project insights

4. `systemPatterns.md`
   - System architecture
   - Key technical decisions
   - Design patterns in use
   - Component relationships
   - Critical implementation paths

5. `techContext.md`
   - Technologies used
   - Development setup
   - Technical constraints
   - Dependencies
   - Tool usage patterns

6. `progress.md`
   - What works
   - What's left to build
   - Current status
   - Known issues
   - Evolution of project decisions

### Additional Context
Create additional files/folders within memory-bank/ when they help organize:
- Complex feature documentation
- Integration specifications
- API documentation
- Testing strategies
- Deployment procedures

## Core Workflows

### Plan Mode
flowchart TD
    Start[Start] --> ReadFiles[Read Memory Bank]
    ReadFiles --> CheckFiles{Files Complete?}
    
    CheckFiles -->|No| Plan[Create Plan]
    Plan --> Document[Document in Chat]
    
    CheckFiles -->|Yes| Verify[Verify Context]
    Verify --> Strategy[Develop Strategy]
    Strategy --> Present[Present Approach]

### Act Mode
flowchart TD
    Start[Start] --> Context[Check Memory Bank]
    Context --> Update[Update Documentation]
    Update --> Execute[Execute Task]
    Execute --> Document[Document Changes]

## Documentation Updates

Memory Bank updates occur when:
1. Discovering new project patterns
2. After implementing significant changes
3. When user requests with **update memory bank** (MUST review ALL files)
4. When context needs clarification

flowchart TD
    Start[Update Process]
    
    subgraph Process
        P1[Review ALL Files]
        P2[Document Current State]
        P3[Clarify Next Steps]
        P4[Document Insights & Patterns]
        
        P1 --> P2 --> P3 --> P4
    end
    
    Start --> Process

Note: When triggered by **update memory bank**, I MUST review every memory bank file, even if some don't require updates. Focus particularly on activeContext.md and progress.md as they track current state.

REMEMBER: After every memory reset, I begin completely fresh. The Memory Bank is my only link to previous work. It must be maintained with precision and clarity, as my effectiveness depends entirely on its accuracy.
</file>

<file path=".eslintrc.json">
{
  "extends": "next/core-web-vitals"
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path=".prettierrc">
{
  "printWidth": 80,
  "singleQuote": false,
  "trailingComma": "all",
  "endOfLine": "lf",
  "semi": false,
  "tabWidth": 2,
  "plugins": ["prettier-plugin-tailwindcss"],
  "tailwindFunctions": ["tv", "cx"]
}
</file>

<file path="LICENSE.md">
The MIT License (MIT)

Copyright (c) 2025 Tremor Labs, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
</file>

<file path="next.config.mjs">
/** @type {import('next').NextConfig} */

const nextConfig = {
  redirects: async () => {
    return [
      {
        source: "/",
        destination: "/overview",
        permanent: true,
      },
    ];
  },
};

export default nextConfig;
</file>

<file path="postcss.config.mjs">
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;
</file>

<file path="README.md">
# Tremor – Dashboard

`Dashboard` is a SaaS application template from [Tremor](https://tremor.so). It's built
using [`Tremor Raw`](https://raw.tremor.so/docs/getting-started/installation)
and [Next.js](https://nextjs.org).

## Getting started

1. Install the dependencies. We recommend using pnpm. If you want to use `npm`,
   just replace `pnpm` with `npm`.

```bash
pnpm install
```

2. Then, start the development server:

```bash
pnpm run dev
```

3. Visit [http://localhost:3000](http://localhost:3000) in your browser to view
   the template.

## Notes

This project uses
[`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to
automatically optimize and load Inter, a custom Google Font.

This project uses
[`Tremor Raw`](https://raw.tremor.so/docs/getting-started/installation)
components for the UI.

## License

This site template is a commercial product and is licensed under the
[Tremor License](https://blocks.tremor.so/license).

## Learn more

For a deeper understanding of the technologies used in this template, check out
the resources listed below:

- [Tremor Raw](https://raw.tremor.so) - Tremor Raw documentation
- [Tailwind CSS](https://tailwindcss.com) - A utility-first CSS framework
- [Next.js](https://nextjs.org/docs) - Next.js documentation
- [Radix UI](https://www.radix-ui.com) - Radix UI Website
- [Recharts](https://recharts.org) - Recharts documentation and website
- [Tanstack](https://tanstack.com/table/latest) - TanStack table documentation
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "allowUnusedLabels": false,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="memory-bank/activeContext.md">
# Active Context

## Current Work Focus
- **Memory Bank Maintenance**: Keeping the Memory Bank documentation up-to-date with recent changes
- **Font System Enhancement**: Adding and configuring additional font options for the dashboard
- **UI Enhancement**: Adding a hero section with a globe visualization to the overview page

## Recent Changes
- Created Memory Bank directory and initial documentation files:
  - `projectbrief.md`: Defined core project requirements and goals
  - `productContext.md`: Documented why the project exists and problems it solves
  - `systemPatterns.md`: Outlined system architecture and design patterns
  - `techContext.md`: Detailed technologies used and development setup
  - `activeContext.md`: This file - tracking current focus and changes
  - `progress.md`: Documenting project status and next steps
- **Font System Enhancement**:
  - Added Feature Flat font family files to the project
  - Added font files: FeatureFlatCond-Regular, FeatureFlatCond-Medium, FeatureFlatHeadline, and FeatureFlatText-Bold
  - Prepared for potential integration with the existing font system
- **UI Enhancement**:
  - Added a hero section with a globe visualization to the overview page
  - Installed the `cobe` library for the interactive globe component
  - Created a new component at `src/components/ui/overview/HeroGlobe.tsx`
  - Integrated the hero section above the "Current billing cycle" section

## Next Steps
- Explore the dashboard components in more detail
- Understand the data flow and state management
- Document specific UI patterns and component usage
- Identify areas for potential enhancement or customization
- Consider creating additional documentation for complex features
- Evaluate how to integrate Feature Flat fonts into the application
- Consider creating a typography system that leverages all available fonts
- Document best practices for font usage across different UI components

## Active Decisions and Considerations
- **Documentation Structure**: Organized Memory Bank files according to the specified hierarchy
- **Content Detail Level**: Balanced between high-level overview and specific implementation details
- **Project Understanding**: Based on available files and structure, without running the application yet
- **Font System Strategy**: Added Feature Flat fonts to complement existing Colfax and Barlow fonts
- **Typography Hierarchy**: Considering how to structure typography with multiple font families for different UI elements

## Important Patterns and Preferences
- **File Organization**: Following Next.js App Router conventions
- **Component Structure**: Reusable components with clear separation of concerns
- **Documentation Style**: Markdown with clear headings and bullet points for readability
- **Memory Bank Updates**: Will require regular updates as project understanding deepens
- **Font Management**: Using Next.js local font optimization for performance
- **Typography System**: Structured approach with specific font families for different UI elements

## Learnings and Project Insights
- The project uses a comprehensive set of modern React libraries and patterns
- Strong focus on component reusability and composition
- Clear separation between UI components and data management
- Emphasis on accessibility through Radix UI components
- Tailwind CSS used consistently for styling
- Data visualization is a key feature with Recharts integration
- Table functionality enhanced with TanStack Table
- Typography system leverages Next.js font optimization for performance
- Multiple font families provide design flexibility for different UI contexts
- Font configuration in Tailwind enables consistent typography across components

## Current Questions
- How is authentication handled in the application?
- What is the intended deployment strategy?
- Are there specific customization points designed into the template?
- How is theming implemented beyond the basic Tailwind configuration?
- What testing strategies are recommended for the template?
- What is the intended use case for the Feature Flat font family in the dashboard?
- How should the typography system be structured to incorporate multiple font families effectively?

## Recent Insights
- The template provides a comprehensive starting point for dashboard applications
- Component organization follows logical grouping by function and complexity
- Next.js App Router provides a clean way to organize pages and layouts
- The project balances between providing structure and allowing customization
- Typography plays a crucial role in the dashboard's visual identity
- The font system is designed to be flexible with multiple font families for different purposes
- Next.js font optimization provides performance benefits through local font loading
</file>

<file path="memory-bank/progress.md">
# Progress

## Current Status
- **Initial Setup**: Memory Bank documentation structure has been established
- **Project Understanding**: Basic understanding of the project structure and purpose has been documented
- **Documentation**: Core Memory Bank files have been created with initial content
- **Font System**: Feature Flat font family has been added to the project
- **UI Enhancement**: Added a hero section with a globe visualization to the overview page

## What Works
- **Project Structure**: The Next.js application structure is in place with App Router organization
- **Component Library**: Comprehensive set of UI components available in `src/components/`
- **Page Routes**: Basic routes established for overview, details, and settings sections
- **Data Visualization**: Chart components implemented with Recharts
- **Tables**: Advanced table functionality with TanStack Table
- **Navigation**: Sidebar and mobile navigation components
- **Settings Sections**: General, billing, and users settings pages

## What's Left to Build
- **Custom Features**: Any specific features beyond the template functionality
- **Data Integration**: Connection to real data sources instead of sample data
- **Authentication**: User authentication and authorization system
- **API Routes**: Backend API routes for data operations
- **Testing**: Comprehensive test suite for components and pages
- **Deployment**: Production deployment configuration
- **Documentation**: End-user documentation for the dashboard

## Known Issues
- No specific issues identified yet, as this is an initial documentation phase

## Evolution of Project Decisions

### Documentation Approach
- **Initial Decision**: Create Memory Bank structure according to specified hierarchy
- **Current Status**: Basic documentation created based on project file exploration
- **Future Direction**: Enhance documentation as project understanding deepens

### Project Understanding
- **Initial State**: Limited understanding based on file structure and README
- **Current State**: Basic understanding of architecture, components, and technologies
- **Next Steps**: Deeper exploration of component implementations and data flow

### Font System
- **Initial State**: Using Colfax for primary sans-serif and Barlow for headings
- **Current State**: Added Feature Flat font family (Condensed Regular, Condensed Medium, Headline, Text Bold)
- **Next Steps**: Potentially integrate Feature Flat fonts into the application's typography system

## Milestones

### Completed
- ✅ Memory Bank initialization
- ✅ Basic project structure documentation
- ✅ Technology stack documentation
- ✅ Font system enhancement with Feature Flat font family
- ✅ Added hero section with globe visualization to the overview page

### In Progress
- 🔄 Detailed component understanding
- 🔄 Data flow documentation

### Upcoming
- ⏳ UI pattern documentation
- ⏳ Customization guide
- ⏳ Feature enhancement planning

## Implementation Notes

### Documentation Structure
The Memory Bank follows the specified structure with six core files:
1. `projectbrief.md`: Foundation document defining core requirements
2. `productContext.md`: Why the project exists and problems it solves
3. `systemPatterns.md`: System architecture and design patterns
4. `techContext.md`: Technologies used and development setup
5. `activeContext.md`: Current work focus and recent changes
6. `progress.md`: This file - tracking project status and next steps

### Next Steps for Documentation
- Run the application locally to better understand its functionality
- Document specific component usage patterns
- Create visual documentation of the UI structure
- Document data flow and state management patterns
- Identify customization points and document them

## Lessons Learned
- The importance of structured documentation for project understanding
- The value of exploring file structure to understand project organization
- The benefit of documenting technologies and patterns early in the process
- The significance of typography in creating a consistent and professional UI
- The flexibility of Next.js font system for managing multiple font families

## Future Considerations
- How to extend the template for specific use cases
- Best practices for data integration
- Performance optimization strategies
- Accessibility improvements
- Testing strategies for the dashboard components
</file>

<file path="memory-bank/techContext.md">
# Technical Context

## Technologies Used

### Core Framework
- **Next.js 14.2.23**: React framework with server-side rendering and App Router
- **React 18.2.0**: UI library for component-based development
- **TypeScript 5.8.2**: Typed JavaScript for better developer experience and code quality

### Styling
- **Tailwind CSS 3.4.17**: Utility-first CSS framework
- **tailwind-merge**: Utility for merging Tailwind CSS classes
- **tailwind-variants**: Creating variants of components with different styles
- **@tailwindcss/forms**: Form styling plugin for Tailwind

### Fonts
- **Colfax**: Primary sans-serif font (Regular 400, Medium 500)
- **Barlow**: Heading font (Regular 400, Medium 500, Bold 700)
- **Feature Flat**: Additional font family (Condensed Regular, Condensed Medium, Headline, Text Bold)

### UI Components
- **Radix UI**: Headless UI components for accessibility
  - Components include: Checkbox, Dialog, Dropdown Menu, Label, Navigation Menu, Popover, Radio Group, Select, Slot, Switch, Tooltip
- **@remixicon/react 4.6.0**: Icon library

### Data Visualization
- **Recharts 2.15.1**: React charting library for data visualization
- **date-fns 3.6.0**: Date utility library
- **cobe 0.6.3**: Interactive 3D globe visualization library

### Data Management
- **@tanstack/react-table 8.21.2**: Table library for React
- **@internationalized/date 3.7.0**: Internationalization utilities for dates

### Drag and Drop
- **@atlaskit/pragmatic-drag-and-drop**: Drag and drop functionality
  - Includes core, flourish, hitbox, live-region, and react-drop-indicator packages

### Utilities
- **clsx 2.1.1**: Utility for constructing className strings
- **next-themes 0.4.6**: Theme management for Next.js
- **tiny-invariant 1.3.3**: Invariant checking utility
- **use-debounce 10.0.4**: Debounce hook for React

### Development Tools
- **ESLint 8.57.1**: JavaScript linter
- **Prettier 3.5.3**: Code formatter
- **prettier-plugin-tailwindcss 0.6.11**: Tailwind CSS integration for Prettier
- **TypeScript ESLint Parser 8.28.0**: TypeScript support for ESLint

## Development Setup

### Prerequisites
- Node.js (compatible with Next.js 14.2.23)
- pnpm (recommended) or npm

### Installation
```bash
pnpm install
```

### Development Server
```bash
pnpm run dev
```
This starts the development server at [http://localhost:3000](http://localhost:3000)

### Build for Production
```bash
pnpm run build
```

### Start Production Server
```bash
pnpm start
```

### Linting
```bash
pnpm run lint
```

### Generate Sample Data
```bash
pnpm run generate
```

## Technical Constraints

### Browser Compatibility
- Modern browsers (Chrome, Firefox, Safari, Edge)
- No explicit support for legacy browsers mentioned

### Performance Considerations
- Next.js optimizations for server-side rendering and static generation
- Font optimization via next/font
- Component-level optimizations should be considered for data-heavy visualizations

### Accessibility Requirements
- Radix UI provides accessible base components
- Additional accessibility considerations should be maintained when extending components

### Responsive Design
- Mobile-first approach with Tailwind CSS
- Responsive components for various screen sizes
- Custom hook (useOnWindowResize) for handling window resize events

### State Management
- React's built-in state management (useState, useContext)
- No external state management library (Redux, Zustand, etc.)

## Tool Usage Patterns

### Component Development
- Create reusable components in `src/components/`
- Use TypeScript interfaces for props
- Leverage Tailwind CSS for styling
- Extend Radix UI components for complex interactions

### Page Development
- Use Next.js App Router conventions
- Create pages in appropriate directories under `src/app/`
- Utilize layouts for shared UI elements

### Data Handling
- Sample data generation with `generateData.js`
- Type definitions in `schema.ts`
- Table data handling with TanStack Table

### Styling Approach
- Utility-first with Tailwind CSS
- Component variants with tailwind-variants
- Class merging with tailwind-merge and clsx

### Project Structure
- Feature-based organization within `src/app/`
- Component categorization in `src/components/`
- Utility functions in `src/lib/`
- Data-related files in `src/data/`

## Development Workflow

### Recommended Process
1. Understand requirements
2. Identify or create necessary components
3. Implement page layout and functionality
4. Connect to data sources (or use sample data)
5. Test across different screen sizes
6. Ensure accessibility compliance
7. Optimize for performance

### Code Style
- Follow ESLint and Prettier configurations
- Maintain consistent naming conventions
- Use TypeScript types for all components and functions
</file>

<file path="src/app/(main)/details/page.tsx">
import { columns } from "@/components/ui/data-table/columns"
import { DataTable } from "@/components/ui/data-table/DataTable"
import { usage } from "@/data/data"

export default function Example() {
  return (
    <>
      <h1 className="text-lg font-semibold text-gray-900 sm:text-xl dark:text-gray-50 font-heading">
        Details
      </h1>
      <div className="mt-4 sm:mt-6 lg:mt-10">
        <DataTable data={usage} columns={columns} />
      </div>
    </>
  )
}
</file>

<file path="src/app/settings/billing/page.tsx">
"use client"

import { Button } from "@/components/Button"
import { Card } from "@/components/Card"
import { Divider } from "@/components/Divider"
import { Input } from "@/components/Input"
import { Label } from "@/components/Label"
import { ProgressBar } from "@/components/ProgressBar"
import { ProgressCircle } from "@/components/ProgressCircle"
import { Switch } from "@/components/Switch"
import { cx } from "@/lib/utils"
import { RiArrowRightUpLine } from "@remixicon/react"
import React from "react"

const data: {
  name: string
  description: string
  value: string
  capacity?: string
  percentageValue?: number
}[] = [
    {
      name: "Starter plan",
      description: "Discounted plan for start-ups and growing companies",
      value: "$90",
    },
    {
      name: "Storage",
      description: "Used 10.1 GB",
      value: "$40",
      capacity: "100 GB included",
      percentageValue: 10.1,
    },
    {
      name: "Bandwith",
      description: "Used 2.9 GB",
      value: "$10",
      capacity: "5 GB included",
      percentageValue: 58,
    },
    {
      name: "Users",
      description: "Used 9",
      value: "$20",
      capacity: "50 users included",
      percentageValue: 18,
    },
    {
      name: "Query super caching (EU-Central 1)",
      description: "4 GB query cache, $120/mo",
      value: "$120.00",
    },
  ]

export default function Billing() {
  const [isSpendMgmtEnabled, setIsSpendMgmtEnabled] = React.useState(true)
  return (
    <>
      <div className="rounded-lg bg-gray-50 p-6 ring-1 ring-inset ring-gray-200 dark:bg-gray-400/10 dark:ring-gray-800">
        <h4 className="text-sm font-semibold text-gray-900 dark:text-gray-50">
          This workspace is currently on free plan
        </h4>
        <p className="mt-1 max-w-2xl text-sm leading-6 text-gray-500">
          Boost your analytics and unlock advanced features with our premium
          plans.{" "}
          <a
            href="#"
            className="inline-flex items-center gap-1 text-indigo-600 dark:text-indigo-500"
          >
            Compare plans
            <RiArrowRightUpLine
              className="size-4 shrink-0"
              aria-hidden="true"
            />
          </a>
        </p>
      </div>
      <div className="mt-6 space-y-10">
        <section aria-labelledby="billing-overview">
          <div className="grid grid-cols-1 gap-x-14 gap-y-8 md:grid-cols-3">
            <div>
              <h2
                id="billing-overview"
                className="scroll-mt-10 font-semibold text-gray-900 dark:text-gray-50 font-heading"
              >
                Billing
              </h2>
              <p className="mt-1 text-sm leading-6 text-gray-500">
                Overview of current billing cycle based on fixed and on-demand
                charges.
              </p>
            </div>
            <div className="md:col-span-2">
              <ul
                role="list"
                className="w-full divide-y divide-gray-200 border-b border-gray-200 dark:divide-gray-800 dark:border-gray-800"
              >
                {data.map((item) => (
                  <li key={item.name} className="px-2 py-4 text-sm md:p-4">
                    <div className="w-full">
                      <div className="flex items-center justify-between">
                        <p className="font-medium text-gray-900 dark:text-gray-50">
                          {item.name}
                        </p>
                        <p className="font-medium text-gray-700 dark:text-gray-300">
                          {item.value}
                        </p>
                      </div>
                      <div className="w-full md:w-2/3">
                        {item.percentageValue && (
                          <ProgressBar
                            value={item.percentageValue}
                            className="mt-2 [&>*]:h-1.5"
                          />
                        )}
                        <p className="mt-1 flex items-center justify-between text-xs text-gray-500">
                          <span>{item.description}</span>
                          <span>{item.capacity}</span>
                        </p>
                      </div>
                    </div>
                  </li>
                ))}
              </ul>
              <div className="px-2 py-4 md:p-4">
                <p className="flex items-center justify-between text-sm font-medium text-gray-900 dark:text-gray-50">
                  <span>Total for May 24</span>
                  <span className="font-semibold">$280</span>
                </p>
              </div>
            </div>
          </div>
        </section>
        <Divider />
        <section aria-labelledby="cost-spend-control">
          <form>
            <div className="grid grid-cols-1 gap-x-14 gap-y-8 md:grid-cols-3">
              <div>
                <h2
                  id="cost-spend-control"
                  className="scroll-mt-10 font-semibold text-gray-900 dark:text-gray-50 font-heading"
                >
                  Cost spend control
                </h2>
                <p className="mt-1 text-sm leading-6 text-gray-500">
                  Set hard caps for on-demand charges.
                </p>
              </div>
              <div className="md:col-span-2">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-4">
                    <ProgressCircle
                      value={isSpendMgmtEnabled ? 62.2 : 0}
                      radius={20}
                      strokeWidth={4.5}
                    />
                    <div>
                      {isSpendMgmtEnabled ? (
                        <>
                          <p className="text-sm font-medium text-gray-900 dark:text-gray-50">
                            &#36;280 / 350 (62.2&#37;)
                          </p>
                          <Label
                            htmlFor="spend-mgmt"
                            className="text-gray-500 dark:text-gray-500"
                          >
                            Spend management enabled
                          </Label>
                        </>
                      ) : (
                        <>
                          <p className="text-sm font-medium text-gray-900 dark:text-gray-50">
                            &#36;0 / 0 (0&#37;)
                          </p>
                          <Label
                            htmlFor="spend-mgmt"
                            className="text-gray-500 dark:text-gray-500"
                          >
                            Spend management disabled
                          </Label>
                        </>
                      )}
                    </div>
                  </div>
                  <Switch
                    id="spend-mgmt"
                    name="spend-mgmt"
                    checked={isSpendMgmtEnabled}
                    onCheckedChange={() => {
                      setIsSpendMgmtEnabled(!isSpendMgmtEnabled)
                    }}
                  />
                </div>
                <div
                  className={cx(
                    "transform-gpu transition-all ease-[cubic-bezier(0.16,1,0.3,1.03)] will-change-transform",
                    isSpendMgmtEnabled ? "h-52 md:h-32" : "h-0",
                  )}
                  style={{
                    transitionDuration: "300ms",
                    animationFillMode: "backwards",
                  }}
                >
                  <div
                    className={cx(
                      "animate-slideDownAndFade transition",
                      isSpendMgmtEnabled ? "" : "hidden",
                    )}
                    style={{
                      animationDelay: "100ms",
                      animationDuration: "300ms",
                      transitionDuration: "300ms",
                      animationFillMode: "backwards",
                    }}
                  >
                    <div className="mt-8 grid grid-cols-1 gap-4 md:grid-cols-3">
                      <div className="md:col-span-1">
                        <Label className="font-medium">Set amount ($)</Label>
                        <Input
                          id="hard-cap"
                          name="hard-cap"
                          defaultValue={350}
                          type="number"
                          className="mt-2"
                        />
                      </div>
                      <div className="md:col-span-2">
                        <Label className="font-medium">
                          Provide email for notifications
                        </Label>
                        <Input
                          id="email"
                          name="email"
                          placeholder="admin@company.com"
                          type="email"
                          className="mt-2"
                        />
                      </div>
                    </div>
                    <div className="mt-6 flex justify-end">
                      <Button type="submit">Update</Button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </form>
        </section>
        <Divider />
        <section aria-labelledby="add-ons">
          <form>
            <div className="grid grid-cols-1 gap-x-14 gap-y-8 md:grid-cols-3">
              <div>
                <h2
                  id="add-ons"
                  className="scroll-mt-10 font-semibold text-gray-900 dark:text-gray-50 font-heading"
                >
                  Add-Ons
                </h2>
                <p className="mt-1 text-sm leading-6 text-gray-500">
                  Additional services to boost your services.
                </p>
              </div>
              <div className="space-y-6 md:col-span-2">
                <Card className="overflow-hidden p-0">
                  <div className="px-4 pb-6 pt-4">
                    <span className="text-sm text-gray-500">$25/month</span>
                    <h4 className="mt-4 text-sm font-semibold text-gray-900 dark:text-gray-50 font-heading">
                      Advanced bot protection
                    </h4>
                    <p className="mt-2 max-w-xl text-sm leading-6 text-gray-500">
                      Safeguard your assets with our cutting-edge bot
                      protection. Our AI solution identifies and mitigates
                      automated traffic to protect your workspace from bad bots.
                    </p>
                  </div>
                  <div className="flex items-center justify-between border-t border-gray-200 bg-gray-50 p-4 dark:border-gray-900 dark:bg-gray-900">
                    <div className="flex items-center gap-3">
                      <Switch id="bot-protection" name="bot-protection" />
                      <Label htmlFor="bot-protection">Activate</Label>
                    </div>
                    <a
                      href="#"
                      className="inline-flex items-center gap-1 text-sm text-indigo-600 dark:text-indigo-500"
                    >
                      Learn more
                      <RiArrowRightUpLine
                        className="size-4 shrink-0"
                        aria-hidden="true"
                      />
                    </a>
                  </div>
                </Card>
                <Card className="overflow-hidden p-0">
                  <div className="px-4 pb-6 pt-4">
                    <span className="text-sm text-gray-500">$50/month</span>
                    <h4 className="mt-4 text-sm font-semibold text-gray-900 dark:text-gray-50 font-heading">
                      Workspace insights
                    </h4>
                    <p className="mt-2 max-w-xl text-sm leading-6 text-gray-500">
                      Real-time analysis of your workspace&#39;s usage, enabling
                      you to make well-informed decisions for optimization.
                    </p>
                  </div>
                  <div className="flex items-center justify-between border-t border-gray-200 bg-gray-50 p-4 dark:border-gray-900 dark:bg-gray-900">
                    <div className="flex items-center gap-3">
                      <Switch id="insights" name="insights" />
                      <Label htmlFor="insights">Activate</Label>
                    </div>
                    <a
                      href="#"
                      className="inline-flex items-center gap-1 text-sm text-indigo-600 dark:text-indigo-500"
                    >
                      Learn more
                      <RiArrowRightUpLine
                        className="size-4 shrink-0"
                        aria-hidden="true"
                      />
                    </a>
                  </div>
                </Card>
              </div>
            </div>
          </form>
        </section>
      </div>
    </>
  )
}
</file>

<file path="src/app/settings/general/page.tsx">
"use client"
import { Button } from "@/components/Button"
import { Card } from "@/components/Card"
import { Checkbox } from "@/components/Checkbox"
import { Divider } from "@/components/Divider"
import { Input } from "@/components/Input"
import { Label } from "@/components/Label"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/Select"
import { RiExternalLinkLine } from "@remixicon/react"

import { roles } from "@/data/data"

export default function General() {
  return (
    <>
      <div className="space-y-10">
        <section aria-labelledby="personal-information">
          <form>
            <div className="grid grid-cols-1 gap-x-14 gap-y-8 md:grid-cols-3">
              <div>
                <h2
                  id="personal-information"
                  className="scroll-mt-10 font-semibold text-gray-900 dark:text-gray-50 font-heading"
                >
                  Personal information
                </h2>
                <p className="mt-1 text-sm leading-6 text-gray-500">
                  Manage your personal information and role.
                </p>
              </div>
              <div className="md:col-span-2">
                <div className="grid grid-cols-1 gap-4 sm:grid-cols-6">
                  <div className="col-span-full sm:col-span-3">
                    <Label htmlFor="first-name" className="font-medium">
                      First name
                    </Label>
                    <Input
                      type="text"
                      id="first-name"
                      name="first-name"
                      autoComplete="given-name"
                      placeholder="Emma"
                      className="mt-2"
                    />
                  </div>
                  <div className="col-span-full sm:col-span-3">
                    <Label htmlFor="last-name" className="font-medium">
                      Last name
                    </Label>
                    <Input
                      type="text"
                      id="last-name"
                      name="last-name"
                      autoComplete="family-name"
                      placeholder="Stone"
                      className="mt-2"
                    />
                  </div>
                  <div className="col-span-full">
                    <Label htmlFor="email" className="font-medium">
                      Email
                    </Label>
                    <Input
                      type="email"
                      id="email"
                      name="email"
                      autoComplete="email"
                      placeholder="emma@acme.com"
                      className="mt-2"
                    />
                  </div>
                  <div className="col-span-full sm:col-span-3">
                    <Label htmlFor="year" className="font-medium">
                      Birth year
                    </Label>
                    <Input
                      autoComplete="off"
                      id="birthyear"
                      name="year"
                      type="number"
                      placeholder="1994"
                      enableStepper={false}
                      className="mt-2"
                      min="1900"
                      max={new Date().getFullYear()}
                      step="1"
                    />
                  </div>
                  <div className="col-span-full sm:col-span-3">
                    <Label htmlFor="email" className="font-medium">
                      Role
                    </Label>
                    <Select defaultValue="member">
                      <SelectTrigger
                        name="role"
                        id="role"
                        className="mt-2"
                        disabled
                      >
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {roles.map((role) => (
                          <SelectItem key={role.value} value={role.value}>
                            {role.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <p className="mt-2 text-xs text-gray-500">
                      Roles can only be changed by system admin.
                    </p>
                  </div>
                  <div className="col-span-full mt-6 flex justify-end">
                    <Button type="submit">Save settings</Button>
                  </div>
                </div>
              </div>
            </div>
          </form>
        </section>
        <Divider />
        <section aria-labelledby="notification-settings">
          <form>
            <div className="grid grid-cols-1 gap-x-14 gap-y-8 md:grid-cols-3">
              <div>
                <h2
                  id="notification-settings"
                  className="scroll-mt-10 font-semibold text-gray-900 dark:text-gray-50 font-heading"
                >
                  Notification settings
                </h2>
                <p className="mt-1 text-sm leading-6 text-gray-500">
                  Configure the types of notifications you want to receive.
                </p>
              </div>
              <div className="md:col-span-2">
                <fieldset>
                  <legend className="text-sm font-medium text-gray-900 dark:text-gray-50 font-heading">
                    Team
                  </legend>
                  <p className="mt-1 text-sm leading-6 text-gray-500">
                    Configure the types of team alerts you want to receive.
                  </p>
                  <ul
                    role="list"
                    className="mt-4 divide-y divide-gray-200 dark:divide-gray-800"
                  >
                    <li className="flex items-center gap-x-3 py-3">
                      <Checkbox
                        id="team-requests"
                        name="team-requests"
                        defaultChecked
                      />
                      <Label htmlFor="team-requests">Team join requests</Label>
                    </li>
                    <li className="flex items-center gap-x-3 py-3">
                      <Checkbox id="team-activity-digest" />
                      <Label htmlFor="team-activity-digest">
                        Weekly team activity digest
                      </Label>
                    </li>
                  </ul>
                </fieldset>
                <fieldset className="mt-6">
                  <legend className="text-sm font-medium text-gray-900 dark:text-gray-50 font-heading">
                    Usage
                  </legend>
                  <p className="mt-1 text-sm leading-6 text-gray-500">
                    Configure the types of usage alerts you want to receive.
                  </p>
                  <ul
                    role="list"
                    className="mt-4 divide-y divide-gray-200 dark:divide-gray-800"
                  >
                    <li className="flex items-center gap-x-3 py-3">
                      <Checkbox id="api-requests" name="api-requests" />
                      <Label htmlFor="api-requests">API incidents</Label>
                    </li>
                    <li className="flex items-center gap-x-3 py-3">
                      <Checkbox
                        id="workspace-execution"
                        name="workspace-execution"
                      />
                      <Label htmlFor="workspace-execution">
                        Platform incidents
                      </Label>
                    </li>
                    <li className="flex items-center gap-x-3 py-3">
                      <Checkbox
                        id="query-caching"
                        name="query-caching"
                        defaultChecked
                      />
                      <Label htmlFor="query-caching">
                        Payment transactions
                      </Label>
                    </li>
                    <li className="flex items-center gap-x-3 py-3">
                      <Checkbox id="storage" name="storage" defaultChecked />
                      <Label htmlFor="storage">User behavior</Label>
                    </li>
                  </ul>
                </fieldset>
                <div className="col-span-full mt-6 flex justify-end">
                  <Button type="submit">Save settings</Button>
                </div>
              </div>
            </div>
          </form>
        </section>
        <Divider />
        <section aria-labelledby="danger-zone">
          <form>
            <div className="grid grid-cols-1 gap-x-14 gap-y-8 md:grid-cols-3">
              <div>
                <h2
                  id="danger-zone"
                  className="scroll-mt-10 font-semibold text-gray-900 dark:text-gray-50 font-heading"
                >
                  Danger zone
                </h2>
                <p className="mt-1 text-sm leading-6 text-gray-500">
                  Manage general workspace. Contact system admin for more
                  information.{" "}
                  <a
                    href="#"
                    className="inline-flex items-center gap-1 text-indigo-600 hover:underline hover:underline-offset-4 dark:text-indigo-400"
                  >
                    Learn more
                    <RiExternalLinkLine
                      className="size-4 shrink-0"
                      aria-hidden="true"
                    />
                  </a>
                </p>
              </div>
              <div className="space-y-6 md:col-span-2">
                <Card className="p-4">
                  <div className="flex items-start justify-between gap-10">
                    <div>
                      <h4 className="text-sm font-medium text-gray-900 dark:text-gray-50 font-heading">
                        Leave workspace
                      </h4>
                      <p className="mt-2 text-sm leading-6 text-gray-500">
                        Revoke your access to this team. Other people you have
                        added to the workspace will remain.
                      </p>
                    </div>
                    <Button
                      variant="secondary"
                      className="text-red-600 dark:text-red-500"
                    >
                      Leave
                    </Button>
                  </div>
                </Card>
                <Card className="overflow-hidden p-0">
                  <div className="flex items-start justify-between gap-10 p-4">
                    <div>
                      <h4 className="text-sm font-medium text-gray-400 dark:text-gray-600 font-heading">
                        Delete workspace
                      </h4>
                      <p className="mt-2 text-sm leading-6 text-gray-400 dark:text-gray-600">
                        Revoke your access to this team. Other people you have
                        added to the workspace will remain.
                      </p>
                    </div>
                    <Button
                      variant="secondary"
                      disabled
                      className="whitespace-nowrap text-red-600 disabled:text-red-300 disabled:opacity-50 dark:text-red-500 disabled:dark:text-red-700"
                    >
                      Delete workspace
                    </Button>
                  </div>
                  <div className="border-t border-gray-200 bg-gray-50 p-4 dark:border-gray-900 dark:bg-gray-900">
                    <p className="text-sm text-gray-500">
                      You cannot delete the workspace because you are not the
                      system admin.
                    </p>
                  </div>
                </Card>
              </div>
            </div>
          </form>
        </section>
      </div>
    </>
  )
}
</file>

<file path="src/app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
</file>

<file path="src/app/siteConfig.ts">
export const siteConfig = {
  name: "Dashboard",
  url: "https://dashboard.tremor.so",
  description: "The only dashboard you will ever need.",
  baseLinks: {
    home: "/",
    overview: "/overview",
    airQuality: "/air-quality",
    details: "/details",
    settings: {
      general: "/settings/general",
      billing: "/settings/billing",
      users: "/settings/users",
    },
  },
}

export type siteConfig = typeof siteConfig
</file>

<file path="src/components/ui/air-quality/AirQualityChartCard.tsx">
import { PeriodValue } from "@/app/(main)/air-quality/page"
import { Badge } from "@/components/Badge"
import { LineChart } from "@/components/LineChart"
import { airQualityData } from "@/data/air-quality-data"
import { AirQualityData } from "@/data/schema"
import { cx, percentageFormatter } from "@/lib/utils"
import {
    eachDayOfInterval,
    formatDate,
    interval,
    isWithinInterval,
} from "date-fns"
import { DateRange } from "react-day-picker"
import { getPeriod } from "../overview/DashboardFilterbar"

export type CardProps = {
    title: keyof AirQualityData
    type: "level" | "temperature" | "percent" | "pressure"
    selectedDates: DateRange | undefined
    selectedPeriod: PeriodValue
    isThumbnail?: boolean
}

// Custom formatting for different air quality metric types
const formattingMap = {
    level: (value: number) => `${value}`,
    temperature: (value: number) => `${value}°C`,
    percent: (value: number) => `${value}%`,
    pressure: (value: number) => `${value} hPa`,
}


export const getBadgeType = (value: number) => {
    if (value > 0) {
        return "success"
    } else if (value < 0) {
        if (value < -50) {
            return "warning"
        }
        return "error"
    } else {
        return "neutral"
    }
}

export function AirQualityChartCard({
    title,
    type,
    selectedDates,
    selectedPeriod,
    isThumbnail,
}: CardProps) {
    const formatter = formattingMap[type]
    const selectedDatesInterval =
        selectedDates?.from && selectedDates?.to
            ? interval(selectedDates.from, selectedDates.to)
            : null
    const allDatesInInterval =
        selectedDates?.from && selectedDates?.to
            ? eachDayOfInterval(interval(selectedDates.from, selectedDates.to))
            : null
    const prevDates = getPeriod(selectedDates, selectedPeriod)

    const prevDatesInterval =
        prevDates?.from && prevDates?.to
            ? interval(prevDates.from, prevDates.to)
            : null

    const data = airQualityData
        .filter((reading) => {
            if (selectedDatesInterval) {
                return isWithinInterval(new Date(reading.date), selectedDatesInterval)
            }
            return true
        })
        .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())

    const prevData = airQualityData
        .filter((reading) => {
            if (prevDatesInterval) {
                return isWithinInterval(new Date(reading.date), prevDatesInterval)
            }
            return false
        })
        .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())

    const chartData = allDatesInInterval
        ?.map((date, index) => {
            const dateStr = formatDate(date, "yyyy-MM-dd")
            const reading = data.find(d => d.date === dateStr)
            const prevReading = prevData[index]
            const value = reading ? reading[title] : null
            const previousValue = prevReading ? prevReading[title] : null

            return {
                title,
                date: date,
                formattedDate: formatDate(date, "dd/MM/yyyy"),
                value,
                previousDate: prevReading?.date,
                previousFormattedDate: prevReading
                    ? formatDate(new Date(prevReading.date), "dd/MM/yyyy")
                    : null,
                previousValue:
                    selectedPeriod !== "no-comparison" ? previousValue : null,
                evolution:
                    selectedPeriod !== "no-comparison" && typeof value === 'number' && typeof previousValue === 'number'
                        ? (value - previousValue) / previousValue
                        : undefined,
            }
        })
        .filter(item => item.value !== null)
        .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())

    const categories =
        selectedPeriod === "no-comparison" ? ["value"] : ["value", "previousValue"]

    // Get average value for the selected period
    const value =
        chartData && chartData.length > 0
            ? chartData.reduce((acc, item) => acc + (Number(item.value) || 0), 0) / chartData.length
            : 0

    const previousValue =
        chartData && chartData.length > 0 && selectedPeriod !== "no-comparison"
            ? chartData.reduce((acc, item) => acc + (Number(item.previousValue) || 0), 0) / chartData.length
            : 0

    const evolution =
        selectedPeriod !== "no-comparison" && previousValue !== 0
            ? (value - previousValue) / previousValue
            : 0

    // Colors based on metric type
    const chartColor = type === "level" ? "pink" :
        type === "temperature" ? "amber" :
            type === "percent" ? "blue" : "indigo"

    return (
        <div className={cx("transition rounded-xl border border-gray-200 p-6 dark:border-gray-800")}>
            <div className="flex items-center justify-between gap-x-2">
                <div className="flex items-center gap-x-2">
                    <dt className="font-bold text-gray-900 sm:text-sm dark:text-gray-50 font-heading">
                        {title}
                    </dt>
                    {selectedPeriod !== "no-comparison" && (
                        <Badge variant={getBadgeType(evolution)}>
                            {percentageFormatter(evolution)}
                        </Badge>
                    )}
                </div>
            </div>
            <div className="mt-2 flex items-baseline justify-between">
                <dd className="text-xl text-gray-900 dark:text-gray-50">
                    {formatter(value)}
                </dd>
                {selectedPeriod !== "no-comparison" && (
                    <dd className="text-sm text-gray-500">
                        from {formatter(previousValue)}
                    </dd>
                )}
            </div>
            <LineChart
                className="mt-4 h-40"
                data={chartData || []}
                index="formattedDate"
                colors={[chartColor, "gray"]}
                startEndOnly={true}
                valueFormatter={(value) => formatter(value as number)}
                showYAxis={true}
                showLegend={false}
                categories={categories}
                showTooltip={isThumbnail ? false : true}
                autoMinValue
            />
        </div>
    )
}
</file>

<file path="src/components/ui/navigation/SidebarWorkspacesDropdown.tsx">
"use client"

import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/Dropdown"
import { cx, focusInput } from "@/lib/utils"
import { RiArrowRightSLine, RiExpandUpDownLine } from "@remixicon/react"
import React from "react"
import { ModalAddWorkspace } from "./ModalAddWorkspace"

const workspaces = [
  {
    value: "retail-analytics",
    name: "Retail analytics",
    initials: "RA",
    role: "Member",
    color: "bg-indigo-600 dark:bg-indigo-500",
  },
  // Add more workspaces...
]

export const WorkspacesDropdownDesktop = () => {
  const [dropdownOpen, setDropdownOpen] = React.useState(false)
  const [hasOpenDialog, setHasOpenDialog] = React.useState(false)
  const dropdownTriggerRef = React.useRef<null | HTMLButtonElement>(null)
  const focusRef = React.useRef<null | HTMLButtonElement>(null)

  const handleDialogItemSelect = () => {
    focusRef.current = dropdownTriggerRef.current
  }

  const handleDialogItemOpenChange = (open: boolean) => {
    setHasOpenDialog(open)
    if (open === false) {
      setDropdownOpen(false)
    }
  }
  return (
    <>
      {/* sidebar (lg+) */}
      <DropdownMenu
        open={dropdownOpen}
        onOpenChange={setDropdownOpen}
        modal={false}
      >
        <DropdownMenuTrigger asChild>
          <button
            className={cx(
              "flex w-full items-center gap-x-2.5 rounded-md border border-gray-300 bg-white p-2 text-sm shadow-sm transition-all hover:bg-gray-50 dark:border-gray-800 dark:bg-gray-950 hover:dark:bg-gray-900",
              focusInput,
            )}
          >
            <span
              className="flex aspect-square size-8 items-center justify-center rounded bg-indigo-600 p-2 text-xs font-medium text-white dark:bg-indigo-500"
              aria-hidden="true"
            >
              RA
            </span>
            <div className="flex w-full items-center justify-between gap-x-4 truncate">
              <div className="truncate">
                <p className="truncate whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-50">
                  Retail analytics
                </p>
                <p className="whitespace-nowrap text-left text-xs text-gray-700 dark:text-gray-300">
                  Member
                </p>
              </div>
              <RiExpandUpDownLine
                className="size-5 shrink-0 text-gray-500"
                aria-hidden="true"
              />
            </div>
          </button>
        </DropdownMenuTrigger>
        <DropdownMenuContent
          hidden={hasOpenDialog}
          onCloseAutoFocus={(event) => {
            if (focusRef.current) {
              focusRef.current.focus()
              focusRef.current = null
              event.preventDefault()
            }
          }}
        >
          <DropdownMenuGroup>
            <DropdownMenuLabel className="font-heading">
              Workspaces ({workspaces.length})
            </DropdownMenuLabel>
            {workspaces.map((workspace) => (
              <DropdownMenuItem key={workspace.value}>
                <div className="flex w-full items-center gap-x-2.5">
                  <span
                    className={cx(
                      workspace.color,
                      "flex aspect-square size-8 items-center justify-center rounded p-2 text-xs font-medium text-white",
                    )}
                    aria-hidden="true"
                  >
                    {workspace.initials}
                  </span>
                  <div>
                    <p className="text-sm font-medium text-gray-900 dark:text-gray-50 font-heading">
                      {workspace.name}
                    </p>
                    <p className="text-xs text-gray-700 dark:text-gray-400">
                      {workspace.role}
                    </p>
                  </div>
                </div>
              </DropdownMenuItem>
            ))}
          </DropdownMenuGroup>
          <DropdownMenuSeparator />
          <ModalAddWorkspace
            onSelect={handleDialogItemSelect}
            onOpenChange={handleDialogItemOpenChange}
            itemName="Add workspace"
          />
        </DropdownMenuContent>
      </DropdownMenu>
    </>
  )
}

export const WorkspacesDropdownMobile = () => {
  const [dropdownOpen, setDropdownOpen] = React.useState(false)
  const [hasOpenDialog, setHasOpenDialog] = React.useState(false)
  const dropdownTriggerRef = React.useRef<null | HTMLButtonElement>(null)
  const focusRef = React.useRef<null | HTMLButtonElement>(null)

  const handleDialogItemSelect = () => {
    focusRef.current = dropdownTriggerRef.current
  }

  const handleDialogItemOpenChange = (open: boolean) => {
    setHasOpenDialog(open)
    if (open === false) {
      setDropdownOpen(false)
    }
  }
  return (
    <>
      {/* sidebar (xs-lg) */}
      <DropdownMenu
        open={dropdownOpen}
        onOpenChange={setDropdownOpen}
        modal={false}
      >
        <DropdownMenuTrigger asChild>
          <button className="flex items-center gap-x-1.5 rounded-md p-2 hover:bg-gray-100 focus:outline-none hover:dark:bg-gray-900">
            <span
              className={cx(
                "flex aspect-square size-7 items-center justify-center rounded bg-indigo-600 p-2 text-xs font-medium text-white dark:bg-indigo-500",
              )}
              aria-hidden="true"
            >
              RA
            </span>
            <RiArrowRightSLine
              className="size-4 shrink-0 text-gray-500"
              aria-hidden="true"
            />
            <div className="flex w-full items-center justify-between gap-x-3 truncate">
              <p className="truncate whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-50">
                Retail analytics
              </p>
              <RiExpandUpDownLine
                className="size-4 shrink-0 text-gray-500"
                aria-hidden="true"
              />
            </div>
          </button>
        </DropdownMenuTrigger>
        <DropdownMenuContent
          className="!min-w-72"
          hidden={hasOpenDialog}
          onCloseAutoFocus={(event) => {
            if (focusRef.current) {
              focusRef.current.focus()
              focusRef.current = null
              event.preventDefault()
            }
          }}
        >
          <DropdownMenuGroup>
            <DropdownMenuLabel className="font-heading">
              Workspaces ({workspaces.length})
            </DropdownMenuLabel>
            {workspaces.map((workspace) => (
              <DropdownMenuItem key={workspace.value}>
                <div className="flex w-full items-center gap-x-2.5">
                  <span
                    className={cx(
                      workspace.color,
                      "flex size-8 items-center justify-center rounded p-2 text-xs font-medium text-white",
                    )}
                    aria-hidden="true"
                  >
                    {workspace.initials}
                  </span>
                  <div>
                    <p className="text-sm font-medium text-gray-900 dark:text-gray-50 font-heading">
                      {workspace.name}
                    </p>
                    <p className="text-xs text-gray-700 dark:text-gray-300">
                      {workspace.role}
                    </p>
                  </div>
                </div>
              </DropdownMenuItem>
            ))}
          </DropdownMenuGroup>
          <DropdownMenuSeparator />
          <ModalAddWorkspace
            onSelect={handleDialogItemSelect}
            onOpenChange={handleDialogItemOpenChange}
            itemName="Add workspace"
          />
        </DropdownMenuContent>
      </DropdownMenu>
    </>
  )
}
</file>

<file path="src/components/ui/overview/DashboardCategoryBarCard.tsx">
import { Badge } from "@/components/Badge"
import { cx } from "@/lib/utils"

import type { KpiEntryExtended } from "@/app/(main)/overview/page"

export type CardProps = {
  title: string
  change: string
  value: string
  valueDescription: string
  subtitle: string
  ctaDescription: string
  ctaText: string
  ctaLink: string
  data: KpiEntryExtended[]
}

export function CategoryBarCard({
  title,
  change,
  value,
  valueDescription,
  subtitle,
  ctaDescription,
  ctaText,
  ctaLink,
  data,
}: CardProps) {
  return (
    <>
      <div className="flex flex-col justify-between">
        <div>
          <div className="flex items-center gap-2">
            <h3 className="font-bold text-gray-900 sm:text-sm dark:text-gray-50 font-heading">
              {title}
            </h3>
            <Badge variant="neutral">{change}</Badge>
          </div>
          <p className="mt-2 flex items-baseline gap-2">
            <span className="text-xl text-gray-900 dark:text-gray-50">
              {value}
            </span>
            <span className="text-sm text-gray-500">{valueDescription}</span>
          </p>
          <div className="mt-4">
            <p className="text-sm font-medium text-gray-900 dark:text-gray-50 font-heading">
              {subtitle}
            </p>
            <div className="mt-2 flex items-center gap-0.5">
              {data.map((item) => (
                <div
                  key={item.title}
                  className={cx(item.color, `h-1.5 rounded-full`)}
                  style={{ width: `${item.percentage}%` }}
                />
              ))}
            </div>
          </div>
          <ul role="list" className="mt-5 space-y-2">
            {data.map((item) => (
              <li key={item.title} className="flex items-center gap-2 text-xs">
                <span
                  className={cx(item.color, "size-2.5 rounded-sm")}
                  aria-hidden="true"
                />
                <span className="text-gray-900 dark:text-gray-50">
                  {item.title}
                </span>
                <span className="text-gray-600 dark:text-gray-400">
                  ({item.value} / {item.percentage}%)
                </span>
              </li>
            ))}
          </ul>
        </div>
        <p className="mt-6 text-xs text-gray-500">
          {ctaDescription}{" "}
          <a href={ctaLink} className="text-indigo-600 dark:text-indigo-400">
            {ctaText}
          </a>
        </p>
      </div>
    </>
  )
}
</file>

<file path="src/components/ui/overview/DashboardChartCard.tsx">
import { PeriodValue } from "@/app/(main)/overview/page"
import { Badge } from "@/components/Badge"
import { LineChart } from "@/components/LineChart"
import { overviews } from "@/data/overview-data"
import { OverviewData } from "@/data/schema"
import { cx, formatters, percentageFormatter } from "@/lib/utils"
import {
  eachDayOfInterval,
  formatDate,
  interval,
  isWithinInterval,
} from "date-fns"
import { DateRange } from "react-day-picker"
import { getPeriod } from "./DashboardFilterbar"

export type CardProps = {
  title: keyof OverviewData
  type: "currency" | "unit"
  selectedDates: DateRange | undefined
  selectedPeriod: PeriodValue
  isThumbnail?: boolean
}

const formattingMap = {
  currency: formatters.currency,
  unit: formatters.unit,
}

export const getBadgeType = (value: number) => {
  if (value > 0) {
    return "success"
  } else if (value < 0) {
    if (value < -50) {
      return "warning"
    }
    return "error"
  } else {
    return "neutral"
  }
}

export function ChartCard({
  title,
  type,
  selectedDates,
  selectedPeriod,
  isThumbnail,
}: CardProps) {
  const formatter = formattingMap[type]
  const selectedDatesInterval =
    selectedDates?.from && selectedDates?.to
      ? interval(selectedDates.from, selectedDates.to)
      : null
  const allDatesInInterval =
    selectedDates?.from && selectedDates?.to
      ? eachDayOfInterval(interval(selectedDates.from, selectedDates.to))
      : null
  const prevDates = getPeriod(selectedDates, selectedPeriod)

  const prevDatesInterval =
    prevDates?.from && prevDates?.to
      ? interval(prevDates.from, prevDates.to)
      : null

  const data = overviews
    .filter((overview) => {
      if (selectedDatesInterval) {
        return isWithinInterval(overview.date, selectedDatesInterval)
      }
      return true
    })
    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())

  const prevData = overviews
    .filter((overview) => {
      if (prevDatesInterval) {
        return isWithinInterval(overview.date, prevDatesInterval)
      }
      return false
    })
    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())

  const chartData = allDatesInInterval
    ?.map((date, index) => {
      const overview = data[index]
      const prevOverview = prevData[index]
      const value = (overview?.[title] as number) || null
      const previousValue = (prevOverview?.[title] as number) || null

      return {
        title,
        date: date,
        formattedDate: formatDate(date, "dd/MM/yyyy"),
        value,
        previousDate: prevOverview?.date,
        previousFormattedDate: prevOverview
          ? formatDate(prevOverview.date, "dd/MM/yyyy")
          : null,
        previousValue:
          selectedPeriod !== "no-comparison" ? previousValue : null,
        evolution:
          selectedPeriod !== "no-comparison" && value && previousValue
            ? (value - previousValue) / previousValue
            : undefined,
      }
    })
    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())

  const categories =
    selectedPeriod === "no-comparison" ? ["value"] : ["value", "previousValue"]
  const value =
    chartData?.reduce((acc, item) => acc + (item.value || 0), 0) || 0
  const previousValue =
    chartData?.reduce((acc, item) => acc + (item.previousValue || 0), 0) || 0
  const evolution =
    selectedPeriod !== "no-comparison"
      ? (value - previousValue) / previousValue
      : 0

  return (
    <div className={cx("transition")}>
      <div className="flex items-center justify-between gap-x-2">
        <div className="flex items-center gap-x-2">
          <dt className="font-bold text-gray-900 sm:text-sm dark:text-gray-50 font-heading">
            {title}
          </dt>
          {selectedPeriod !== "no-comparison" && (
            <Badge variant={getBadgeType(evolution)}>
              {percentageFormatter(evolution)}
            </Badge>
          )}
        </div>
      </div>
      <div className="mt-2 flex items-baseline justify-between">
        <dd className="text-xl text-gray-900 dark:text-gray-50">
          {formatter(value)}
        </dd>
        {selectedPeriod !== "no-comparison" && (
          <dd className="text-sm text-gray-500">
            from {formatter(previousValue)}
          </dd>
        )}
      </div>
      <LineChart
        className="mt-6 h-32"
        data={chartData || []}
        index="formattedDate"
        colors={["indigo", "gray"]}
        startEndOnly={true}
        valueFormatter={(value) => formatter(value as number)}
        showYAxis={false}
        showLegend={false}
        categories={categories}
        showTooltip={isThumbnail ? false : true}
        autoMinValue
      />
    </div>
  )
}
</file>

<file path="src/components/ui/overview/DashboardProgressBarCard.tsx">
import { Badge } from "@/components/Badge"
import { ProgressBar } from "@/components/ProgressBar"

import { KpiEntry } from "@/app/(main)/overview/page"

export type CardProps = {
  title: string
  change: string
  value: string
  valueDescription: string
  ctaDescription: string
  ctaText: string
  ctaLink: string
  data: KpiEntry[]
}

export function ProgressBarCard({
  title,
  change,
  value,
  valueDescription,
  ctaDescription,
  ctaText,
  ctaLink,
  data,
}: CardProps) {
  return (
    <>
      <div className="flex flex-col justify-between">
        <div>
          <div className="flex items-center gap-2">
            <dt className="font-bold text-gray-900 sm:text-sm dark:text-gray-50 font-heading">
              {title}
            </dt>
            <Badge variant="neutral">{change}</Badge>
          </div>
          <dd className="mt-2 flex items-baseline gap-2">
            <span className="text-xl text-gray-900 dark:text-gray-50">
              {value}
            </span>
            <span className="text-sm text-gray-500">{valueDescription}</span>
          </dd>
          <ul role="list" className="mt-4 space-y-5">
            {data.map((item) => (
              <li key={item.title}>
                <p className="flex justify-between text-sm">
                  <span className="font-medium text-gray-900 dark:text-gray-50">
                    {item.title}
                  </span>
                  <span className="font-medium text-gray-900 dark:text-gray-50">
                    {item.current}
                    <span className="font-normal text-gray-500">
                      /{item.allowed}
                      {item.unit}
                    </span>
                  </span>
                </p>
                <ProgressBar
                  value={item.percentage}
                  className="mt-2 [&>*]:h-1.5"
                />
              </li>
            ))}
          </ul>
        </div>
        <div>
          <p className="mt-6 text-xs text-gray-500">
            {ctaDescription}{" "}
            <a href={ctaLink} className="text-indigo-600 dark:text-indigo-400">
              {ctaText}
            </a>
          </p>
        </div>
      </div>
    </>
  )
}
</file>

<file path="src/components/ui/overview/HeroBento.tsx">
// 'use client';

import { RiArrowRightSLine } from '@remixicon/react';
import createGlobe from 'cobe';
import { useEffect, useRef } from 'react';

function GlobeCanvas() {
    const canvasRef = useRef(null);

    useEffect(function () {
        let phi = 4;
        let globe: ReturnType<typeof createGlobe> | undefined;

        if (canvasRef.current) {
            globe = createGlobe(canvasRef.current, {
                devicePixelRatio: 2,
                width: 800 * 2,
                height: 800 * 2,
                phi: 0,
                theta: -0.3,
                dark: 0,
                diffuse: 1.2,
                mapSamples: 30000,
                mapBrightness: 13,
                mapBaseBrightness: 0.01,
                baseColor: [1, 1, 1],
                glowColor: [1, 1, 1],
                markerColor: [100, 100, 100],
                markers: [],
                onRender: function (state) {
                    state.phi = phi;
                    phi += 0.0005;
                },
            });
        }

        return function () {
            if (globe) {
                globe.destroy();
            }
        };
    }, []);

    return (
        <canvas
            ref={canvasRef}
            style={{ width: 800, height: 800 }}
            className="absolute -right-72 top-40 z-10 aspect-square size-full max-w-fit transition-transform group-hover:scale-[1.01] sm:top-12 lg:-right-60 lg:top-0"
        />
    );
}

export default function Example() {
    return (
        <>
            <div className="mx-auto w-full max-w-6xl px-3 py-8 sm:py-20">
                <span className="block text-lg font-semibold tracking-tighter text-blue-500">
                    AI-Powered
                </span>
                <h2
                    id="features-title"
                    className="mt-2 inline-block bg-gradient-to-br from-gray-900 to-gray-800 bg-clip-text py-2 text-3xl font-bold tracking-tighter text-transparent dark:from-gray-50 dark:to-gray-300 sm:text-5xl"
                >
                    Revolutionize your customer service
                </h2>
                <p className="mt-6 max-w-3xl text-lg leading-7 text-gray-600 dark:text-gray-400">
                    Harness the power of AI to provide 24/7 support, reduce response
                    times, and increase customer satisfaction with our cutting-edge
                    solutions.
                </p>
                <div className="mt-12 grid grid-cols-1 gap-4 lg:grid-cols-3">
                    <a
                        href="#"
                        className="group relative col-span-1 overflow-hidden rounded-b rounded-t-2xl bg-gray-50 p-8 shadow-2xl shadow-black/10 ring-1 ring-black/5 dark:bg-gray-900 dark:ring-white/5 lg:col-span-2 lg:rounded-l-2xl lg:rounded-r"
                    >
                        <div className="relative z-20">
                            <h3 className="text-2xl font-semibold text-gray-950 dark:text-gray-50">
                                AI Chatbot Integration
                            </h3>
                            <p className="mt-4 max-w-sm text-gray-700 dark:text-gray-400">
                                Seamlessly integrate our advanced AI chatbots to handle customer
                                queries instantly, freeing up your human agents for complex
                                issues.
                            </p>
                            <div className="mt-12 flex w-fit items-center gap-0.5 rounded bg-white/10 px-2 py-1 text-blue-500 backdrop-blur-[3px]">
                                <span>Explore features</span>
                                <RiArrowRightSLine className="mt-0.5 size-5 transition-all group-hover:translate-x-1 group-hover:opacity-100 sm:opacity-20" />
                            </div>
                        </div>
                        <GlobeCanvas />
                    </a>
                    <div className="rounded-b-2xl rounded-t bg-gradient-to-br from-blue-400 to-blue-600 p-8 shadow-lg shadow-blue-500/20 lg:rounded-l lg:rounded-r-2xl">
                        <figure className="flex h-full flex-col justify-between">
                            <blockquote className="text-base font-medium text-gray-50 sm:text-lg/8">
                                <p className="relative bg-gradient-to-br from-blue-100 to-white bg-clip-text font-medium leading-7 tracking-tighter text-transparent before:absolute before:right-full before:top-0">
                                    The AI-powered customer support has completely transformed our
                                    service capabilities. We&apos;ve seen a 70% reduction in response
                                    times and a significant increase in customer satisfaction
                                    scores.
                                </p>
                            </blockquote>
                            <figcaption className="mt-8 flex items-center space-x-4 sm:mt-0">
                                <div className="flex-auto">
                                    <div className="mt-7 text-sm font-semibold text-gray-50">
                                        <div>
                                            <span className="absolute inset-0" />
                                            Sarah Johnson
                                        </div>
                                    </div>
                                    <span className="text-sm text-blue-200">
                                        CX Director, TechInnovate
                                    </span>
                                </div>
                            </figcaption>
                        </figure>
                    </div>
                </div>
            </div>
        </>
    );
}
</file>

<file path="src/data/schema.ts">
export type Usage = {
  owner: string
  status: string
  costs: number
  region: string
  stability: number
  lastEdited: string
}

export type OverviewData = {
  date: string
  "Rows written": number
  "Rows read": number
  Queries: number
  "Payments completed": number
  "Sign ups": number
  Logins: number
  "Sign outs": number
  "Support calls": number
}

export type AirQualityData = {
  date: string
  CO2: number
  Temperature: number
  Humidity: number
  PM2_5: number
  PM10: number
  VOC: number
  Pressure: number
}
</file>

<file path="package.json">
{
  "name": "template-dashboard-3",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "generate": "node src/data/generateData.js"
  },
  "dependencies": {
    "@atlaskit/pragmatic-drag-and-drop": "^1.5.2",
    "@atlaskit/pragmatic-drag-and-drop-flourish": "^1.2.2",
    "@atlaskit/pragmatic-drag-and-drop-hitbox": "^1.0.3",
    "@atlaskit/pragmatic-drag-and-drop-live-region": "^1.3.0",
    "@atlaskit/pragmatic-drag-and-drop-react-drop-indicator": "^1.2.0",
    "@internationalized/date": "^3.7.0",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-navigation-menu": "^1.2.5",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-radio-group": "^1.2.3",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-tooltip": "^1.1.8",
    "@react-aria/datepicker": "^3.14.1",
    "@react-stately/datepicker": "^3.13.0",
    "@remixicon/react": "^4.6.0",
    "@tanstack/react-table": "^8.21.2",
    "clsx": "^2.1.1",
    "cobe": "^0.6.3",
    "date-fns": "^3.6.0",
    "next": "14.2.23",
    "next-themes": "^0.4.6",
    "react": "18.2.0",
    "react-day-picker": "^8.10.1",
    "react-dom": "18.2.0",
    "recharts": "^2.15.1",
    "tailwind-merge": "^2.6.0",
    "tailwind-variants": "^0.3.1",
    "tiny-invariant": "^1.3.3",
    "use-debounce": "^10.0.4"
  },
  "devDependencies": {
    "@tailwindcss/forms": "^0.5.10",
    "@types/node": "^22.13.14",
    "@types/react": "18.2.0",
    "@types/react-dom": "18.2.0",
    "@typescript-eslint/parser": "^8.28.0",
    "eslint": "^8.57.1",
    "eslint-config-next": "14.2.23",
    "postcss": "^8.5.3",
    "prettier": "^3.5.3",
    "prettier-plugin-tailwindcss": "^0.6.11",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.8.2"
  }
}
</file>

<file path="src/app/layout.tsx">
import type { Metadata } from "next";
import { ThemeProvider } from "next-themes";
import localFont from "next/font/local";
import "./globals.css";
import { siteConfig } from "./siteConfig"; // Assuming this file exists and is configured

import { Sidebar } from "@/components/ui/navigation/Sidebar"; // Assuming this component exists

const colfax = localFont({
  src: [
    {
      // Corrected path based on your 'ls' output
      path: '../fonts/ColfaxWebRegular-ffe8279204a8eb350c1a8320336a8e1a.woff2',
      weight: '400',
      style: 'normal',
    },
    {
      // This path was already correct
      path: '../fonts/ColfaxWebMedium-5cd963f45f4bd8647a4e41a58ca9c4d3.woff2',
      weight: '500',
      style: 'normal',
    },
  ],
  display: "swap",
  variable: "--font-colfax", // Keep this if you plan to use the CSS variable elsewhere, otherwise optional
})

const barlow = localFont({
  src: [
    {
      path: '../fonts/barlow-latin-400-normal-7fa387951673abf164b13dd1b45c70e3.woff2',
      weight: '400',
      style: 'normal',
    },
    {
      path: '../fonts/barlow-latin-500-normal-50adbbfa3bfe480bf4246ff5bad7ad06.woff2',
      weight: '500',
      style: 'normal',
    },
    {
      path: '../fonts/barlow-latin-700-normal-dd5b2912dbf896310865c1e9ac85ab41.woff2',
      weight: '700',
      style: 'normal',
    },
  ],
  display: "swap",
  variable: "--font-barlow",
})

// Create a CSS class to enforce uppercase on the Barlow font
const barlowUppercaseStyles = `
  .font-heading, :root [style*="var(--font-barlow)"] {
    text-transform: uppercase !important;
  }
`

// Remember to replace placeholder values below
export const metadata: Metadata = {
  metadataBase: new URL("https://yoururl.com"), // Replace with your actual URL
  title: siteConfig.name, // Ensure siteConfig provides a 'name'
  description: siteConfig.description, // Ensure siteConfig provides a 'description'
  keywords: [],
  authors: [
    {
      name: "yourname", // Replace with your name
      url: "", // Optionally add your URL
    },
  ],
  creator: "yourname", // Replace with your name
  openGraph: {
    type: "website",
    locale: "en_US",
    url: siteConfig.url, // Ensure siteConfig provides a 'url'
    title: siteConfig.name,
    description: siteConfig.description,
    siteName: siteConfig.name,
  },
  icons: {
    icon: "/favicon.ico", // Ensure favicon.ico exists in the /public folder
  },
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <style dangerouslySetInnerHTML={{ __html: barlowUppercaseStyles }} />
      </head>
      {/* Using colfax.className is fine even if 'variable' is defined.
          If you prefer the variable approach, remove colfax.className here
          and set `font-family: var(--font-colfax)` in your globals.css */}
      <body
        className={`${colfax.className} ${barlow.variable} overflow-y-scroll scroll-auto antialiased selection:bg-indigo-100 selection:text-indigo-700 dark:bg-gray-950`}
        suppressHydrationWarning // Good practice with next-themes
      >
        <div className="mx-auto max-w-screen-2xl">
          {/* ThemeProvider wraps the part of the UI that needs theme toggling */}
          <ThemeProvider defaultTheme="system" attribute="class">
            <Sidebar />
            {/* Ensure main content area accounts for sidebar width */}
            <main className="lg:pl-72">{children}</main>
          </ThemeProvider>
        </div>
      </body>
    </html>
  )
}
</file>

<file path="src/components/ui/navigation/MobileSidebar.tsx">
import { siteConfig } from "@/app/siteConfig"
import { Button } from "@/components/Button"
import {
  Drawer,
  DrawerBody,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerTitle,
  DrawerTrigger,
} from "@/components/Drawer"
import { cx, focusRing } from "@/lib/utils"
import {
  RiHome2Line,
  RiLinkM,
  RiListCheck,
  RiMenuLine,
  RiSettings5Line,
  RiWindyLine,
} from "@remixicon/react"
import Link from "next/link"
import { usePathname } from "next/navigation"

const navigation = [
  { name: "Overview", href: siteConfig.baseLinks.overview, icon: RiHome2Line },
  { name: "Air Quality", href: siteConfig.baseLinks.airQuality, icon: RiWindyLine },
  { name: "Details", href: siteConfig.baseLinks.details, icon: RiListCheck },
  {
    name: "Settings",
    href: siteConfig.baseLinks.settings.general,
    icon: RiSettings5Line,
  },
] as const

const shortcuts = [
  {
    name: "Add new user",
    href: "/settings/users",
    icon: RiLinkM,
  },
  {
    name: "Workspace usage",
    href: "/settings/billing#billing-overview",
    icon: RiLinkM,
  },
  {
    name: "Cost spend control",
    href: "/settings/billing#cost-spend-control",
    icon: RiLinkM,
  },
  {
    name: "Overview – Rows written",
    href: "/overview#usage-overview",
    icon: RiLinkM,
  },
] as const

export default function MobileSidebar() {
  const pathname = usePathname()
  const isActive = (itemHref: string) => {
    if (itemHref === siteConfig.baseLinks.settings.general) {
      return pathname.startsWith("/settings")
    }
    return pathname === itemHref || pathname.startsWith(itemHref)
  }
  return (
    <>
      <Drawer>
        <DrawerTrigger asChild>
          <Button
            variant="ghost"
            aria-label="open sidebar"
            className="group flex items-center rounded-md p-2 text-sm font-medium hover:bg-gray-100 data-[state=open]:bg-gray-100 data-[state=open]:bg-gray-400/10 hover:dark:bg-gray-400/10"
          >
            <RiMenuLine
              className="size-6 shrink-0 sm:size-5"
              aria-hidden="true"
            />
          </Button>
        </DrawerTrigger>
        <DrawerContent className="sm:max-w-lg">
          <DrawerHeader>
            <DrawerTitle className="font-heading">Retail Analytics</DrawerTitle>
          </DrawerHeader>
          <DrawerBody>
            <nav
              aria-label="core mobile navigation links"
              className="flex flex-1 flex-col space-y-10"
            >
              <ul role="list" className="space-y-1.5">
                {navigation.map((item) => (
                  <li key={item.name}>
                    <DrawerClose asChild>
                      <Link
                        href={item.href}
                        className={cx(
                          isActive(item.href)
                            ? "text-indigo-600 dark:text-indigo-400"
                            : "text-gray-600 hover:text-gray-900 dark:text-gray-400 hover:dark:text-gray-50",
                          "flex items-center gap-x-2.5 rounded-md px-2 py-1.5 text-base font-medium transition hover:bg-gray-100 sm:text-sm hover:dark:bg-gray-900 font-heading",
                          focusRing,
                        )}
                      >
                        <item.icon
                          className="size-5 shrink-0"
                          aria-hidden="true"
                        />
                        {item.name}
                      </Link>
                    </DrawerClose>
                  </li>
                ))}
              </ul>
              <div>
                <span className="text-sm font-medium leading-6 text-gray-500 sm:text-xs font-heading">
                  Shortcuts
                </span>
                <ul aria-label="shortcuts" role="list" className="space-y-0.5">
                  {shortcuts.map((item) => (
                    <li key={item.name}>
                      <Link
                        href={item.href}
                        className={cx(
                          pathname === item.href || pathname.includes(item.href)
                            ? "text-indigo-600 dark:text-indigo-400"
                            : "text-gray-700 hover:text-gray-900 dark:text-gray-400 hover:dark:text-gray-50",
                          "flex items-center gap-x-2.5 rounded-md px-2 py-1.5 font-medium transition hover:bg-gray-100 sm:text-sm hover:dark:bg-gray-900 font-heading",
                          focusRing,
                        )}
                      >
                        <item.icon
                          className="size-4 shrink-0"
                          aria-hidden="true"
                        />
                        {item.name}
                      </Link>
                    </li>
                  ))}
                </ul>
              </div>
            </nav>
          </DrawerBody>
        </DrawerContent>
      </Drawer>
    </>
  )
}
</file>

<file path="src/components/ui/navigation/Sidebar.tsx">
"use client"
import { siteConfig } from "@/app/siteConfig"
import { cx, focusRing } from "@/lib/utils"
import {
  RiHome2Line,
  RiLinkM,
  RiListCheck,
  RiSettings5Line,
  RiWindyLine,
} from "@remixicon/react"
import Link from "next/link"
import { usePathname } from "next/navigation"
import MobileSidebar from "./MobileSidebar"
import {
  WorkspacesDropdownDesktop,
  WorkspacesDropdownMobile,
} from "./SidebarWorkspacesDropdown"
import { UserProfileDesktop, UserProfileMobile } from "./UserProfile"

const navigation = [
  { name: "Overview", href: siteConfig.baseLinks.overview, icon: RiHome2Line },
  { name: "Air Quality", href: siteConfig.baseLinks.airQuality, icon: RiWindyLine },
  { name: "Details", href: siteConfig.baseLinks.details, icon: RiListCheck },
  {
    name: "Settings",
    href: siteConfig.baseLinks.settings.general,
    icon: RiSettings5Line,
  },
] as const

const shortcuts = [
  {
    name: "Add new user",
    href: "/settings/users",
    icon: RiLinkM,
  },
  {
    name: "Workspace usage",
    href: "/settings/billing#billing-overview",
    icon: RiLinkM,
  },
  {
    name: "Cost spend control",
    href: "/settings/billing#cost-spend-control",
    icon: RiLinkM,
  },
  {
    name: "Overview – Rows written",
    href: "/overview#usage-overview",
    icon: RiLinkM,
  },
] as const

export function Sidebar() {
  const pathname = usePathname()
  const isActive = (itemHref: string) => {
    if (itemHref === siteConfig.baseLinks.settings.general) {
      return pathname.startsWith("/settings")
    }
    return pathname === itemHref || pathname.startsWith(itemHref)
  }
  return (
    <>
      {/* sidebar (lg+) */}
      <nav className="hidden lg:fixed lg:inset-y-0 lg:z-50 lg:flex lg:w-72 lg:flex-col">
        <aside className="flex grow flex-col gap-y-6 overflow-y-auto border-r border-gray-200 bg-white p-4 dark:border-gray-800 dark:bg-gray-950">
          <WorkspacesDropdownDesktop />
          <nav
            aria-label="core navigation links"
            className="flex flex-1 flex-col space-y-10"
          >
            <ul role="list" className="space-y-0.5">
              {navigation.map((item) => (
                <li key={item.name}>
                  <Link
                    href={item.href}
                    className={cx(
                      isActive(item.href)
                        ? "text-indigo-600 dark:text-indigo-400"
                        : "text-gray-700 hover:text-gray-900 dark:text-gray-400 hover:dark:text-gray-50",
                      "flex items-center gap-x-2.5 rounded-md px-2 py-1.5 text-sm font-medium transition hover:bg-gray-100 hover:dark:bg-gray-900 font-heading",
                      focusRing,
                    )}
                  >
                    <item.icon className="size-4 shrink-0" aria-hidden="true" />
                    {item.name}
                  </Link>
                </li>
              ))}
            </ul>
            <div>
              <span className="text-xs font-medium leading-6 text-gray-500 font-heading">
                Shortcuts
              </span>
              <ul aria-label="shortcuts" role="list" className="space-y-0.5">
                {shortcuts.map((item) => (
                  <li key={item.name}>
                    <Link
                      href={item.href}
                      className={cx(
                        pathname === item.href || pathname.startsWith(item.href)
                          ? "text-indigo-600 dark:text-indigo-400"
                          : "text-gray-700 hover:text-gray-900 dark:text-gray-400 hover:dark:text-gray-50",
                        "flex items-center gap-x-2.5 rounded-md px-2 py-1.5 text-sm font-medium transition hover:bg-gray-100 hover:dark:bg-gray-900 font-heading",
                        focusRing,
                      )}
                    >
                      <item.icon
                        className="size-4 shrink-0"
                        aria-hidden="true"
                      />
                      {item.name}
                    </Link>
                  </li>
                ))}
              </ul>
            </div>
          </nav>
          <div className="mt-auto">
            <UserProfileDesktop />
          </div>
        </aside>
      </nav>
      {/* top navbar (xs-lg) */}
      <div className="sticky top-0 z-40 flex h-16 shrink-0 items-center justify-between border-b border-gray-200 bg-white px-2 shadow-sm sm:gap-x-6 sm:px-4 lg:hidden dark:border-gray-800 dark:bg-gray-950">
        <WorkspacesDropdownMobile />
        <div className="flex items-center gap-1 sm:gap-2">
          <UserProfileMobile />
          <MobileSidebar />
        </div>
      </div>
    </>
  )
}
</file>

<file path="tailwind.config.ts">
import type { Config } from "tailwindcss"

const config: Config = {
  darkMode: "selector",
  content: ["./src/**/*.{js,ts,jsx,tsx,mdx}"],
  theme: {
    fontFamily: {
      sans: ['var(--font-colfax)', 'ui-sans-serif', 'system-ui', 'sans-serif'],
      heading: ['var(--font-barlow)', 'ui-sans-serif', 'system-ui', 'sans-serif'],
    },
    extend: {
      gridTemplateColumns: {
        '24': 'repeat(24, minmax(0, 1fr))',
      },
      keyframes: {
        hide: {
          from: { opacity: "1" },
          to: { opacity: "0" },
        },
        slideDownAndFade: {
          from: { opacity: "0", transform: "translateY(-6px)" },
          to: { opacity: "1", transform: "translateY(0)" },
        },
        slideLeftAndFade: {
          from: { opacity: "0", transform: "translateX(6px)" },
          to: { opacity: "1", transform: "translateX(0)" },
        },
        slideUpAndFade: {
          from: { opacity: "0", transform: "translateY(6px)" },
          to: { opacity: "1", transform: "translateY(0)" },
        },
        slideRightAndFade: {
          from: { opacity: "0", transform: "translateX(-6px)" },
          to: { opacity: "1", transform: "translateX(0)" },
        },
        dialogOverlayShow: {
          from: { opacity: "0" },
          to: { opacity: "1" },
        },
        dialogContentShow: {
          from: {
            opacity: "0",
            transform: "translate(-50%, -45%) scale(0.95)",
          },
          to: { opacity: "1", transform: "translate(-50%, -50%) scale(1)" },
        },
        drawerSlideLeftAndFade: {
          from: { opacity: "0", transform: "translateX(50%)" },
          to: { opacity: "1", transform: "translateX(0)" },
        },
      },
      animation: {
        hide: "hide 150ms cubic-bezier(0.16, 1, 0.3, 1)",
        slideDownAndFade:
          "slideDownAndFade 150ms cubic-bezier(0.16, 1, 0.3, 1)",
        slideLeftAndFade:
          "slideLeftAndFade 150ms cubic-bezier(0.16, 1, 0.3, 1)",
        slideUpAndFade: "slideUpAndFade 150ms cubic-bezier(0.16, 1, 0.3, 1)",
        slideRightAndFade:
          "slideRightAndFade 150ms cubic-bezier(0.16, 1, 0.3, 1)",
        drawerSlideLeftAndFade:
          "drawerSlideLeftAndFade 150ms cubic-bezier(0.16, 1, 0.3, 1)",
        dialogOverlayShow:
          "dialogOverlayShow 150ms cubic-bezier(0.16, 1, 0.3, 1)",
        dialogContentShow:
          "dialogContentShow 150ms cubic-bezier(0.16, 1, 0.3, 1)",
      },
    },
  },
  plugins: [require("@tailwindcss/forms")],
}
export default config
</file>

<file path="src/app/(main)/overview/page.tsx">
"use client"
import { CategoryBarCard } from "@/components/ui/overview/DashboardCategoryBarCard"
import { ChartCard } from "@/components/ui/overview/DashboardChartCard"
import { Filterbar } from "@/components/ui/overview/DashboardFilterbar"
import { ProgressBarCard } from "@/components/ui/overview/DashboardProgressBarCard"
import FeatureBento from "@/components/ui/overview/FeatureBento"
import { overviews } from "@/data/overview-data"
import { OverviewData } from "@/data/schema"
import { cx } from "@/lib/utils"
import { subDays, toDate } from "date-fns"
import React from "react"
import { DateRange } from "react-day-picker"

export type PeriodValue = "previous-period" | "last-year" | "no-comparison"

const categories: {
  title: keyof OverviewData
  type: "currency" | "unit"
}[] = [
    {
      title: "Rows read",
      type: "unit",
    },
    {
      title: "Rows written",
      type: "unit",
    },
    {
      title: "Queries",
      type: "unit",
    },
    {
      title: "Payments completed",
      type: "currency",
    },
    {
      title: "Sign ups",
      type: "unit",
    },
    {
      title: "Logins",
      type: "unit",
    },
    {
      title: "Sign outs",
      type: "unit",
    },
    {
      title: "Support calls",
      type: "unit",
    },
  ]

export type KpiEntry = {
  title: string
  percentage: number
  current: number
  allowed: number
  unit?: string
}

const data: KpiEntry[] = [
  {
    title: "Rows read",
    percentage: 48.1,
    current: 48.1,
    allowed: 100,
    unit: "M",
  },
  {
    title: "Rows written",
    percentage: 78.3,
    current: 78.3,
    allowed: 100,
    unit: "M",
  },
  {
    title: "Storage",
    percentage: 26,
    current: 5.2,
    allowed: 20,
    unit: "GB",
  },
]

const data2: KpiEntry[] = [
  {
    title: "Weekly active users",
    percentage: 21.7,
    current: 21.7,
    allowed: 100,
    unit: "%",
  },
  {
    title: "Total users",
    percentage: 70,
    current: 28,
    allowed: 40,
  },
  {
    title: "Uptime",
    percentage: 98.3,
    current: 98.3,
    allowed: 100,
    unit: "%",
  },
]

export type KpiEntryExtended = Omit<
  KpiEntry,
  "current" | "allowed" | "unit"
> & {
  value: string
  color: string
}

const data3: KpiEntryExtended[] = [
  {
    title: "Base tier",
    percentage: 68.1,
    value: "$200",
    color: "bg-indigo-600 dark:bg-indigo-500",
  },
  {
    title: "On-demand charges",
    percentage: 20.8,
    value: "$61.1",
    color: "bg-purple-600 dark:bg-purple-500",
  },
  {
    title: "Caching",
    percentage: 11.1,
    value: "$31.9",
    color: "bg-gray-400 dark:bg-gray-600",
  },
]

const overviewsDates = overviews.map((item) => toDate(item.date).getTime())
const maxDate = toDate(Math.max(...overviewsDates))

export default function Overview() {
  const [selectedDates, setSelectedDates] = React.useState<
    DateRange | undefined
  >({
    from: subDays(maxDate, 30),
    to: maxDate,
  })
  const [selectedPeriod, setSelectedPeriod] =
    React.useState<PeriodValue>("last-year")

  const [selectedCategories, setSelectedCategories] = React.useState<string[]>(
    categories.map((category) => category.title),
  )

  return (
    <>
      {/*<HeroGlobe />
      <HeroBento />*/}
      <FeatureBento />

      <section aria-labelledby="current-billing-cycle">
        <h1
          id="current-billing-cycle"
          className="scroll-mt-10 text-lg tracking-normal font-semibold text-gray-900 sm:text-xl dark:text-gray-50 font-heading"
        >
          CURRENT BILLING CYCLE
        </h1>
        <div className="mt-4 grid grid-cols-1 gap-14 sm:mt-8 sm:grid-cols-2 lg:mt-10 xl:grid-cols-3">
          <ProgressBarCard
            title="Usage"
            change="+0.2%"
            value="68.1%"
            valueDescription="of allowed capacity"
            ctaDescription="Monthly usage resets in 12 days."
            ctaText="Manage plan."
            ctaLink="#"
            data={data}
          />
          <ProgressBarCard
            title="Workspace"
            change="+2.9%"
            value="21.7%"
            valueDescription="weekly active users"
            ctaDescription="Add up to 20 members in free plan."
            ctaText="Invite users."
            ctaLink="#"
            data={data2}
          />
          <CategoryBarCard
            title="Costs"
            change="-1.4%"
            value="$293.5"
            valueDescription="current billing cycle"
            subtitle="Current costs"
            ctaDescription="Set hard caps in"
            ctaText="cost spend management."
            ctaLink="#"
            data={data3}
          />
        </div>
      </section>
      <section aria-labelledby="usage-overview">
        <h1
          id="usage-overview"
          className="mt-16 scroll-mt-8 text-lg font-semibold text-gray-900 sm:text-xl dark:text-gray-50 font-heading"
        >
          Overview
        </h1>
        <div className="sticky top-16 z-20 flex items-center justify-between border-b border-gray-200 bg-white pb-4 pt-4 sm:pt-6 lg:top-0 lg:mx-0 lg:px-0 lg:pt-8 dark:border-gray-800 dark:bg-gray-950">
          <Filterbar
            maxDate={maxDate}
            minDate={new Date(2024, 0, 1)}
            selectedDates={selectedDates}
            onDatesChange={(dates) => setSelectedDates(dates)}
            selectedPeriod={selectedPeriod}
            onPeriodChange={(period) => setSelectedPeriod(period)}
            categories={categories}
            setSelectedCategories={setSelectedCategories}
            selectedCategories={selectedCategories}
          />
        </div>
        <dl
          className={cx(
            "mt-10 grid grid-cols-1 gap-14 sm:grid-cols-1 md:grid-cols-2 xl:grid-cols-3",
          )}
        >
          {categories
            .filter((category) => selectedCategories.includes(category.title))
            .map((category) => {
              return (
                <ChartCard
                  key={category.title}
                  title={category.title}
                  type={category.type}
                  selectedDates={selectedDates}
                  selectedPeriod={selectedPeriod}
                />
              )
            })}
        </dl>
      </section>
    </>
  )
}
</file>

</files>
